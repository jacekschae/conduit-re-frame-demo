{"version":3,"file":"cognitect.transit.js","sources":["cognitect/transit.cljs"],"mappings":";;;;;;AAuBA,AAAA,AAAA,AAAA,6CAAA4E,7CAAa3B;;2DAEX,WAASzC,MAAKG,5EAFhB,AAAA,AAAA,AAAasC;AAEX,AAAA,gBAAA,ZAASzC;GAEL,kBAAWyC,jBAAKtC,JAFpB,AACE;AAEE,QAAY,AAAQH,mBAAM,AAAQG;;AAFpC,GAIE,kBAAWwC,jBAAQxC;AACnB,QAAY,AAAQH,mBAAM,AAAWG;;AALvC,AAAA;;;;;AAUFsC,AADF,AAAA,AAAA,AAAA,AAAA,kDAAA2B;;AACE3B,AADF,AAAA,AAAA,kEAEE,WAAWzC,MAAKG;AAAhB,AAAA,gBAAA,ZAAWH;4CAED,kBAAW2C,jBAAQxC,7CAD3B,GAAI,EAAI,kBAAWsC,jBAAKtC,NAD1B;AAGI,OAACyD,kBAAQ,AAAW5D,qBAAM,AAAWG;;AACrC,MAAO,KAAA4C,MAAW,CAAA,yEAAA,XAAuB/C,8DAAYG;;;;AAN3D,AAAA,AAAA,AAAA,oEAAAiE,pEAOEzB;;oFACA,WAAW3C,MAAKG,rGARlB,AAAA,AAAA,AAOEwC;AACA,AAAA,gBAAA,ZAAW3C;AAAX,AACE,GAAI,EAAI,kBAAWyC,jBAAKtC,sCAChB,kBAAWwC,jBAAQxC;AACzB,OAACyD,kBAAQ,AAAW5D,qBAAM,AAAWG;;AACrC,MAAO,KAAA4C,MAAW,CAAA,yEAAA,XAAuB/C,8DAAYG;;;AAGzDJ,AADF,AAAA,AAAA,AAAA,AAAA,6CAAAqE;;AACErE,2DACA,WAASC,MAAKG,5EAFhB,AAAA,AAAA;AAEE,AAAA,gBAAA,ZAASH;AAAT,AACE,OAAQA,gBAAKG;;;AAEfwC,AALF,AAAA,AAAA,AAAA,+DAAAyB;;6EAME,WAASpE,MAAKG,9FADdwC,AALF,AAAA,AAAA;AAME,AAAA,gBAAA,ZAAS3C;AAAT,AACE,GAAI,kBAAWyC,jBAAKtC;AAClB,OAACkK,iBAAOlK,MAAMH;;AACd,OAAQA,gBAAKG;;;;AAEjBqC,AAXF,AAAA,AAAA,AAAA,sEAAA4B;;AAWE5B,oFACA,WAASxC,MAAKG,rGAZhB,AAAA,AAAA;AAYE,AAAA,gBAAA,ZAASH;AACP,OAAQA,gBAAKG,vBADf;;AAIAJ,AADF,AAAA,AAAA,AAAA,AAAA,4CAAAqE;;AACErE,AADF,AAAA,AAAA,yDAEE,WAAQC;AAAR,AAAA,gBAAA,ZAAQA;AAAR,AACE,OAACwF,kCAAYxF;;;AAEf2C,AALF,AAAA,AAAA,AAAA,8DAAAyB;;2EAME,WAAQpE,tFADR2C,AALF,AAAA,AAAA;AAME,AAAA,gBAAA,ZAAQ3C;AAAR,AACE,OAACsM,eAAK,AAAWtM;;;AAPrB,AAAA,AAAA,AAAA,qEAAAoE,rEASE5B;;kFACA,WAAQxC,7FAVV,AAAA,AAAA,AASEwC;AACA,AAAA,gBAAA,ZAAQxC;AAAR,AACE,OAACwF,kCAAYxF;;AAEjB,AAAA,AAAA,AAAA,yEAAAoE,zEAAazB;;AAAb,AAAA,AAAA,AAAaA,2FAEX,WAAa+I,KAAKC,OAAOlM;AAAzB,AAAA,eAAA,XAAaiM;AAAb,AACE,OAAClI,iBAAOmI,OAAO,CAAA,4EAAA,rBAAgB,AAAWD;;AAE9C,+BAAA,/BAAehL,sEAAYwB,EAAEgI;AAA7B,AACE,IAAAW,mBAAA,AAAA1J,cAAU,AAAC8J,kBAAQf;IAAnBY,qBAAA;IAAAC,qBAAA;IAAAC,iBAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,iBAAAD;AAAA,cAAA,AAAAD,wDAAAE,lEAAQ7H;AAAR,AAAA,AACE,IAAMpB,UAAE,CAAMmI,EAAE/G;AACd,CAAMjB,EAAEiB,WAAEpB,dADZ;;AADF;AAAA,eAAA8I;eAAAC;eAAAC;eAAA,CAAAC,iBAAA;;;;;;;AAAA,IAAAzJ,2BAAA,AAAAJ,cAAA0J;AAAA,AAAA,GAAAtJ;AAAA,AAAA,IAAAsJ,uBAAAtJ;AAAA,AAAA,GAAA,AAAAC,6BAAAqJ;AAAA,IAAApJ,wBAAA,AAAAC,sBAAAmJ;AAAA,AAAA,eAAA,AAAAlJ,qBAAAkJ;eAAApJ;eAAA,AAAAG,gBAAAH;eAAA;;;;;;;AAAA,cAAA,AAAAI,gBAAAgJ,1BAAQ1H;AAAR,AAAA,AACE,IAAMpB,UAAE,CAAMmI,EAAE/G;AACd,CAAMjB,EAAEiB,WAAEpB,dADZ;;AADF;AAAA,eAAA,AAAAD,eAAA+I;eAAA;eAAA;eAAA;;;;;;;;AAAA;;;;;AAGA3I;;AAEF,AAAA;;;;;;AAAA,AAAA,AAAA,AAAA,8CAAA,9CAAkBuB,yDAEPuB;;AAFX,AAAA,QAAA,JAESvF;AAFT,AAEiB,4BAAA,rBAAC8E;;;AAFlB,AAAA,AAAA,6CAAA,7CAAkBd,0DAGNN,EAAEpB,EAAEiD,NAAN3E;;AAHV,AAAA,QAAA,JAGQZ;AAHR,6DAGgC0D,7DAAV,+DAAYpB,xDAAX0E,oDAAOpG;;;AAH9B,AAAA,AAAA,kDAAA,lDAAkBoD,6DAIHpD,EAAE2E;;AAJjB,AAAA,QAAA,JAIavF;AAJb,AAIuB,OAACwF,2BAAY5E;;;AAJpC,AAAA,AAAA,mDAAA,nDAAkBoD,8DAKF2E,IAAIpD;;AALpB,AAAA,QAAA,JAKcvF;AALd,AAK0B,wJAAA,KAAA,6DAAA,KAAA,vNAACoJ,uEAAAA,sFAAAA,jBAAuCT,kEAAAA;;;AALlE,AAAA,wCAAA,xCAAkB3E;AAAlB,AAAA;;;AAAA,AAAA,8CAAA,9CAAkBA;;AAAlB,AAAA,iDAAA,jDAAkBA;;AAAlB,AAAA,sDAAA,WAAAJ,mBAAAC,qBAAAC,zGAAkBE;AAAlB,AAAA,OAAAD,iBAAAF,qBAAA;;;AAAA;;;oCAAA,pCAAkBI;AAAlB,AAAA,YAAAD;;;AAAkBA,AAOlB,AAAA;;;;;;AAAA,AAAA,AAAA,AAAA,iDAAA,jDAAkBmB,4DAEPI;;AAFX,AAAA,QAAA,JAESvF;AAFT,AAEiB,4BAAA,rBAAC8E;;;AAFlB,AAAA,AAAA,gDAAA,hDAAkBK,2DAGR7C,EAAElC,EAAEmF;;AAHd,AAAA,QAAA,JAGQvF;AAHR,AAGoB,OAACoM,mDAAM9J,EAAElC;;;AAH7B,AAAA,AAAA,qDAAA,rDAAkB+E,gEAIH7C,EAAEiD;;AAJjB,AAAA,QAAA,JAIavF;AAJb,AAIuB,OAACwF,2BAAYlD;;;AAJpC,AAAA,AAAA,sDAAA,tDAAkB6C,iEAKFwD,IAAIpD;;AALpB,AAAA,QAAA,JAKcvF;AALd,AAK0B,oJAAA,2DAAA,vMAAC4I,qEAAAA,+EAAAA,ZAAqCD,2DAAAA;;;AALhE,AAAA,2CAAA,3CAAkBxD;AAAlB,AAAA;;;AAAA,AAAA,iDAAA,jDAAkBA;;AAAlB,AAAA,oDAAA,pDAAkBA;;AAAlB,AAAA,yDAAA,WAAAvB,mBAAAC,qBAAAC,5GAAkBqB;AAAlB,AAAA,OAAApB,iBAAAF,qBAAA;;;AAAA;;;uCAAA,vCAAkBuB;AAAlB,AAAA,YAAAD;;;AAOA,AAAA,AAPkBA;;;;;;2BAOlB,mCAAAhC,9DAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,uDAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,uDAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,AAAA,yDAAA,zDAAMD,oEAKFiC;AALJ,AAKU,mEAAA,5DAAC8E,uDAAO9E;;;AALlB,AAAA,yDAAA,zDAAMjC,oEAMFiC,KAAKhE;AANT,AAOK,IAAAuG,WAAU,AAACG,eAAK1C;eACd,6BAAA,7BAACrE,gEAGQ,uGAAA,2CAAA,lJAACgF,3EAJZ6B,sDAGS,AAAC1G,2KAEQ;kBAAKkB;AAAL,AAAQ,OAACqK,+CAAOrK;;CADvB,IAEO;kBAAKA;AAAL,AAAQ,OAACwI,gDAAQxI;;OACf,NAHT;kBAGcA;AAAL,AAAQ,oDAAA,7CAACwD,+EAASxD;;CAH3B,OAIU;kBAAKA;AAAL,AAAQ,oDAAA,7CAACwD,kEAAQ,AAAUxD;;CAJrC,OAKU;kBAAKA;AACH,QAAA,JAAOjC,JADT;IACakC,MAAI,qBAAA,rBAACuC;;AAAhB,AACE,GAAI,CAAGzE,IAAE,AAASiC;AAChB,eAAO,KAAA,JAAGjC;iFACuB,KAAA,JAAKA,XAAxB,GAAQA,3DAApB,AAAC2G,+DAAsB,NAAL1E,LAAVC,YAAqBD;;;;;AAC/B,OAACkD,2BAAYjD;;;;;+OAbtC,QAkBE,AAACnB,qBAAQ,oDAAA,pDAACC,+CAAOC,7LAHA,KAAA0C,iDACE,KAAAmB,hLAFV,AAAA,yFAAW7D;AAfxB,AAAA,oCAAAuG,SAAAC,tCAACC;;;AAPN,AAAA,mDAAA,nDAAM1E;;AA4BN,AA5BA;;;;yBA4BA,zBAAMnC,0DAGHmI,EAAEC;AAHL,AAIE,OAAOD,OAAEC;;AAEX,AAAA;;;;;;AAAA,AAAA,AAAA,AAAA,iDAAA,jDAAkBpD,4DAER5D;;AAFV,AAAA,QAAA,JAEQtC;AAFR,AAAA;;;AAAA,AAAA,AAAA,iDAAA,jDAAkBkG,4DAGR5D;;AAHV,AAAA,QAAA,JAGQtC;AAHR,AAGa,OAAOsC;;;AAHpB,AAAA,AAAA,uDAAA,vDAAkB4D,kEAIF5D;;AAJhB,AAAA,QAAA,JAIctC;AAJd,AAImB,OAAOsC;;;AAJ1B,AAAA,4CAAA,5CAAkB4D;AAAlB,AAAA;;;AAAA,AAAA,kDAAA,lDAAkBA;;AAAlB,AAAA,qDAAA,rDAAkBA;;AAAlB,AAAA,0DAAA,WAAAtC,mBAAAC,qBAAAC,7GAAkBoC;AAAlB,AAAA,OAAAnC,iBAAAF,qBAAA;;;AAAA;;;wCAAA,xCAAkBsC;AAAlB,AAAA,YAAAD;;;AAAkBA,AAMlB,AAAA;;;;;;2DAEU5D,3DAFV,AAAA,AAAA,AAAA,gDAAA,hDAAkB4H;;IAEVlK,JAFR,AAAA,QAAA;AAAA,AAAA;;;AAAA,AAAA,AAAA,gDAAA,hDAAkBkK,2DAGR5H;;AAHV,AAAA,QAAA,JAGQtC;AAHR,AAGa,OAAOsC;;;iEACJA,jEAJhB,AAAA,AAAA,sDAAA,tDAAkB4H;;IAIJlK,JAJd,AAAA,QAAA;AAImB,OAAOsC,PAJ1B;;;AAAA,AAAA,2CAAA,3CAAkB4H;AAAlB,AAAA;;;AAAA,AAAA,iDAAA,jDAAkBA;;AAAlB,AAAA,oDAAA,pDAAkBA;;AAAlB,AAAA,yDAAA,WAAAtG,mBAAAC,qBAAAC,5GAAkBoG;AAAlB,AAAA,OAAAnG,iBAAAF,qBAAA;;;AAAA;;;uCAAA,vCAAkBsG;AAAlB,AAAA,YAAAD;;;AAMA,AAAA,AANkBA;;;;;;yDAQR5H,zDAFV,AAAA,AAAA,AAAA,8CAAA,9CAAkBgG;;IAEVtI,JAFR,AAAA,QAAA;AAAA,AAAA;;;yDAGUsC,zDAHV,AAAA,AAAA,8CAAA,9CAAkBgG;;IAGVtI,JAHR,AAAA,QAAA;AAAA,AAII,UAAA,NAAMuC;AACJ,IAAAd,mBAAA,AAAAC,cAAUY,rCADZ;IACEX,qBAAA;IAAAC,qBAAA;IAAAC,iBAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,iBAAAD;AAAA,cAAA,AAAAD,wDAAAE,lEAAQzB;AAAR,AAAA,AAAa,AAAOmC,SAAInC;;AAAxB;AAAA,eAAAqB;eAAAE;eAAAC;eAAA,CAAAC,iBAAA;;;;;;;AAAA,IAAAC,2BAAA,AAAAJ,cAAAD;AAAA,AAAA,GAAAK;AAAA,AAAA,IAAAL,uBAAAK;AAAA,AAAA,GAAA,AAAAC,6BAAAN;AAAA,IAAAO,wBAAA,AAAAC,sBAAAR;AAAA,AAAA,eAAA,AAAAS,qBAAAT;eAAAO;eAAA,AAAAG,gBAAAH;eAAA;;;;;;;AAAA,cAAA,AAAAI,gBAAAX,1BAAQrB;AAAR,AAAA,AAAa,AAAOmC,SAAInC;;AAAxB;AAAA,eAAA,AAAAiC,eAAAZ;eAAA;eAAA;eAAA;;;;;;;;AAAA;;;;;AACA,oCAAA,7BAACiB,qCAAiBH;;;+DACRD,/DAPhB,AAAA,AAAA,oDAAA,pDAAkBgG;;IAOJtI,JAPd,AAAA,QAAA;AAAA,AAAA;;;AAAA,AAAA,yCAAA,zCAAkBsI;AAAlB,AAAA;;;AAAA,AAAA,+CAAA,/CAAkBA;;AAAlB,AAAA,kDAAA,lDAAkBA;;AAAlB,AAAA,uDAAA,WAAA1E,mBAAAC,qBAAAC,1GAAkBwE;AAAlB,AAAA,OAAAvE,iBAAAF,qBAAA;;;AAAA;;;qCAAA,rCAAkBkG;AAAlB,AAAA,YAAAzB;;;AASA,AAAA,AATkBA;;;;;;AASlB,AAAA,AAAA,AAAA,6CAAA,7CAAkB/D,wDAERjC;;AAFV,AAAA,QAAA,JAEQtC;AAFR,AAAA;;;AAAA,AAAA,AAAA,6CAAA,7CAAkBuE,wDAGRjC;;AAHV,AAAA,QAAA,JAGQtC;AAHR,AAGasC;;;AAHb,AAAA,AAAA,mDAAA,nDAAkBiC,8DAIFjC;;AAJhB,AAAA,QAAA,JAIctC;AAJd,AAAA;;;AAAA,AAAA,wCAAA,xCAAkBuE;AAAlB,AAAA;;;AAAA,AAAA,8CAAA,9CAAkBA;;AAAlB,AAAA,iDAAA,jDAAkBA;;AAAlB,AAAA,sDAAA,WAAAX,mBAAAC,qBAAAC,zGAAkBS;AAAlB,AAAA,OAAAR,iBAAAF,qBAAA;;;AAAA;;;oCAAA,pCAAkBW;AAAlB,AAAA,YAAAD;;;AAAkBA,AAMlB,AAAA;;;;;;wDAEUjC,xDAFV,AAAA,AAAA,AAAA,6CAAA,7CAAkBsC;;IAEV5E,JAFR,AAAA,QAAA;AAAA,AAAA;;;wDAGUsC,xDAHV,AAAA,AAAA,6CAAA,7CAAkBsC;;IAGV5E,JAHR,AAAA,QAAA;AAII,UAAA,NAAMuC,JAJV;AAKM,IAAAkF,mBAAA,AAAA/F,cAAUY,rCADZ;IACEoF,qBAAA;IAAAC,qBAAA;IAAAC,iBAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,iBAAAD;AAAA,cAAA,AAAAD,wDAAAE,lEAAQxH;AAAR,AAAA,AAAa,AAAOmC,SAAInC;;AAAxB;AAAA,eAAAqH;eAAAC;eAAAC;eAAA,CAAAC,iBAAA;;;;;;;AAAA,IAAA9F,2BAAA,AAAAJ,cAAA+F;AAAA,AAAA,GAAA3F;AAAA,AAAA,IAAA2F,uBAAA3F;AAAA,AAAA,GAAA,AAAAC,6BAAA0F;AAAA,IAAAzF,wBAAA,AAAAC,sBAAAwF;AAAA,AAAA,eAAA,AAAAvF,qBAAAuF;eAAAzF;eAAA,AAAAG,gBAAAH;eAAA;;;;;;;AAAA,cAAA,AAAAI,gBAAAqF,1BAAQrH;AAAR,AAAA,AAAa,AAAOmC,SAAInC;;AAAxB;AAAA,eAAA,AAAAiC,eAAAoF;eAAA;eAAA;eAAA;;;;;;;;AAAA;;;;;AACA,oCAAA,7BAAC/E,qCAAiBH;;;AANxB,AAAA,AAAA,mDAAA,nDAAkBqC;;IAOJtC,JAPd,AAAA,QAAA;AAAA,AAAA;;;AAAA,AAAA,wCAAA,xCAAkBsC;AAAlB,AAAA;;;AAAA,AAAA,8CAAA,9CAAkBA;;AAAlB,AAAA,iDAAA,jDAAkBA;;AAAlB,AAAA,sDAAA,WAAAhB,mBAAAC,qBAAAC,zGAAkBc;AAAlB,AAAA,OAAAb,iBAAAF,qBAAA;;;AAAA;;;oCAAA,pCAAkBmI;AAAlB,AAAA,YAAApH;;;AASA,AAAA,AATkBA;;;;;;2DAWRtC,3DAFV,AAAA,AAAA,AAAA,gDAAA,hDAAkB4E;;IAEVlH,JAFR,AAAA,QAAA;AAAA,AAAA;;;2DAGUsC,3DAHV,AAAA,AAAA,gDAAA,hDAAkB4E;;IAGVlH,JAHR,AAAA,QAAA;AAII,UAAA,NAAMuC,JAJV;AAII,AACE,IAAAwK,mBAAA,AAAArL,cAAUY;IAAV0K,qBAAA;IAAAC,qBAAA;IAAAC,iBAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,iBAAAD;AAAA,cAAA,AAAAD,wDAAAE,lEAAQ9M;AAAR,AAAA,AAAa,AAAOmC,SAAInC;;AAAxB;AAAA,eAAA2M;eAAAC;eAAAC;eAAA,CAAAC,iBAAA;;;;;;;AAAA,IAAApL,2BAAA,AAAAJ,cAAAqL;AAAA,AAAA,GAAAjL;AAAA,AAAA,IAAAiL,uBAAAjL;AAAA,AAAA,GAAA,AAAAC,6BAAAgL;AAAA,IAAA/K,wBAAA,AAAAC,sBAAA8K;AAAA,AAAA,eAAA,AAAA7K,qBAAA6K;eAAA/K;eAAA,AAAAG,gBAAAH;eAAA;;;;;;;AAAA,cAAA,AAAAI,gBAAA2K,1BAAQ3M;AAAR,AAAA,AAAa,AAAOmC,SAAInC;;AAAxB;AAAA,eAAA,AAAAiC,eAAA0K;eAAA;eAAA;eAAA;;;;;;;;AAAA;;;;;AACAxK;;;AANN,AAAA,AAAA,sDAAA,tDAAkB2E,iEAOF5E;;AAPhB,AAAA,QAAA,JAOctC;AAPd,AAAA;;;AAAA,AAAA,2CAAA,3CAAkBkH;AAAlB,AAAA;;;AAAA,AAAA,iDAAA,jDAAkBA;;AAAlB,AAAA,oDAAA,pDAAkBA;;AAAlB,AAAA,yDAAA,WAAAtD,mBAAAC,qBAAAC,5GAAkBoD;AAAlB,AAAA,OAAAnD,iBAAAF,qBAAA;;;AAAA;;;uCAAA,vCAAkBsD;AAAlB,AAAA,YAAAD;;;AAAkBA,AASlB,AAAA;;;;;;AAAA,AAAA,AAAA,AAAA,8CAAA,9CAAkBG,yDAER/E;;AAFV,AAAA,QAAA,JAEQtC;AAFR,AAAA;;;AAAA,AAAA,AAAA,8CAAA,9CAAkBqH,yDAGR/E;;AAHV,AAAA,QAAA,JAGQtC;AAHR,AAGa,OAAQsC;;;AAHrB,AAAA,AAAA,oDAAA,pDAAkB+E,+DAIC/E;;AAJnB,AAAA,YAAA,RAIc/B;AAJd,AAIsB,OAAMA,UAAK+B;;;AAJjC,AAAA,yCAAA,zCAAkB+E;AAAlB,AAAA;;;AAAA,AAAA,+CAAA,/CAAkBA;;AAAlB,AAAA,kDAAA,lDAAkBA;;AAAlB,AAAA,uDAAA,WAAAzD,mBAAAC,qBAAAC,1GAAkBuD;AAAlB,AAAA,OAAAtD,iBAAAF,qBAAA;;;AAAA;;;qCAAA,rCAAkByD;AAAlB,AAAA,YAAAD;;;AAAkBA,AAMlB,AAAA;;;;;2BAAA,mCAAAlE,9DAAMkF;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,uDAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,uDAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAA/E,MAAA,CAAA,8DAAA,AAAA;;;;;oEAIIgC,pEAJJ,AAAA,yDAAA,zDAAM+C;AAII,mEAAA,5DAACH,uDAAO5C,9DAJlB;;;oEAKIA,KAAKhE,zEALT,AAAA,yDAAA,zDAAM+G;AAMD,IAAM7B,kBAAgB,KAAAN,3BAN3B;IAOW0F,iBAAgB,KAAA1B;IAChBzJ,eAAgB,KAAA6H;IAChBrD,cAAgB,KAAAV;IAChB3B,cAAgB,KAAAgC;IAChB+B,iBAAgB,KAAAO;IAChB2C,eAAgB,KAAAxC;6YAmBb7G,ofAAgCC,/mBARhCe,4hBAAgCf,sSAmBjC,AAAA,yFAAWa,7zBAhBVkB,ogBAAgC/B,tWAWhCkC,mcAAgCC,jeAnBhCE,ucAAgCrC,7vBAChCgD,ikBAAgChD,/IAmBhCkD,uZAAgCf,7xBARhCsB,8iBAAgCzD,tFAbhCiE,0XAAgCjE,15BAkBhCuE,ilBAAgCC,tiBADhCQ,+jBAAgCR,3bAbhCqB,2gBAAgC7F,hmBAMhC8F,yiBAAgC9F,5UAYhCiG,mdAAgCC,9XAHhCS,mbAAgCnC,/QAPhCgD,uXAAgCxH,/fAGhCiI,maAAgCjI,1oBAQhCiJ,sgBAAgC/C,jcAPhCgD,0eAAgClJ,/3BAnBnC,uGAAA,vGAACwF,gqBA2BEjD,4XAAgC6G,tnBAbhCa,seAAgCjK,pnBAbhCoK,ohBAAgCrE,vzBAFnClC,0pBAGGqH,8XAAgCC,pZAQhCO,uYAAgC1L,ttBAJhC4L,khBAAgC5L,5UAEhCmM,qcAAgCnM,7WAGhCqM,+ZAAgCrM;AAnBzC,AAqCC,IAAA4J,WAAU,AAACrC,eAAK1C;+DAGP,hDAFP,6BAAA,7BAACrE,XADHqJ;kBAGc1J,EAAEC,IAAIC;AAAX,AACE,OAAC6E,oBACC;kBAAKiB,IAAIlD,EAAEpB;AAAX,eACQsE,fAAN,IAAAqD;eAAkBpJ,oCAAAA,uCAAAA,kBAAO,5GAAzB,AAAU,AAAAoJ,qFAAYvG,mBAAAA,2EAAQpB,mBAAAA,zFAAJxB,oCAAAA,uCAAAA,1KAAT;;AAAjBmJ;;CAFJ,CAAA,MAGarJ;;cAEf,iBAAAwD,SAAA,AAAAC,gBAASC;AAAT,AAAA,AAAA,AAAA,AAAAF,iBAEE;kBACSyB;IAALD,JADJ,AAAA,WAAA;AAAA,AAEK,IAAAiD,aAAA,AAAAnH,cAAckE;IAAdkD,eAAA;IAAAC,eAAA;IAAAC,WAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,WAAAD;AAAA,IAAAE,aAAA,AAAAH,kDAAAE;QAAA,AAAAE,4CAAAD,WAAA,IAAA,/DAASvF;QAAT,AAAAwF,4CAAAD,WAAA,IAAA,/DAAW3G;AAAX,AAAA,AACE,CAACuD,kCAAAA,uCAAAA,PAAEvD,mBAAAA,jBAAEoB,mBAAAA;;AADP;AAAA,eAAAmF;eAAAC;eAAAC;eAAA,CAAAC,WAAA;;;;;;;AAAA,IAAAlH,qBAAA,AAAAJ,cAAAmH;AAAA,AAAA,GAAA/G;AAAA,AAAA,IAAA+G,iBAAA/G;AAAA,AAAA,GAAA,AAAAC,6BAAA8G;AAAA,IAAA7G,kBAAA,AAAAC,sBAAA4G;AAAA,AAAA,eAAA,AAAA3G,qBAAA2G;eAAA7G;eAAA,AAAAG,gBAAAH;eAAA;;;;;;;AAAA,IAAAmH,aAAA,AAAA/G,gBAAAyG;QAAA,AAAAK,4CAAAC,WAAA,IAAA,/DAASzF;QAAT,AAAAwF,4CAAAC,WAAA,IAAA,/DAAW7G;AAAX,AAAA,AACE,CAACuD,kCAAAA,uCAAAA,PAAEvD,mBAAAA,jBAAEoB,mBAAAA;;AADP;AAAA,eAAA,AAAArB,eAAAwG;eAAA;eAAA;eAAA;;;;;;;;AAAA;;;;;;;;AAJPzE;gBAOA;kBAAKhE;AACH,GAAI,cAAWqF,bAA6BrF,JAD9C;AAEI,OAAOA;;AADT;;;GAGP,AAACgB,qBAAQ,oDAAA,pDAACC,+CAAOC;AApBrB,AAAA,oCAAA+I,SAAAC,tCAACC;;;AA3CP,AAAA,mDAAA,nDAAMlC;;AAAN,AAiEA;;;0BAAA,1BAAMuB,4DAEHoB,EAAE/K;AAFL,AAGE,OAAQ+K,QAAE/K;;AAEZ;;;;0EAGG4E,zCAHH,jCAAM2C;AAAN,AAIE3C;;AAEF,AAAA;;;;;kCAAA,0CAAA1B,5EAAM2D;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,8DAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,8DAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,8DAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAxD,MAAA,CAAA,8DAAA,AAAA;;;;;2EAIIC,OAAOrD,lFAJX,AAAA,gEAAA,hEAAM4G;AAAN,AAKK,mFAAA,KAAA,jFAACgF,8DAAcvI,OAAOrD;;;2EACvBqD,OAAOrD,OAAOsD,zFANlB,AAAA,gEAAA,hEAAMsD;AAAN,AAOK,8FAAA,vFAACgF,8DAAcvI,OAAOrD,OAAOsD;;;AAPlC,AAAA,gEAAA,hEAAMsD,2EAQFvD,OAAOrD,OAAOsD,WAAWmH;AAR7B,AASK,AAAA,GAAA,OAAA4B;AAAA;AAAA,AAAA,AAAA;;;;;;;;;;;;;;;AAAA,AAAA,AAAA,AAAA,AAAAA,8FAAA,WAAAC,OAAAC;;AAAA,AAAA,IAAAD,aAAA;AAAA,AAAA,YAAAD,mHAAAE,xEADDlJ,cAAOrD,cAAOsD,kBAAWmH;;;AACxB,AAAA,AAAA,AAAA4B,qFAAA,WAAAC;;AAAA,AAAA,IAAAA,aAAA;AAAA,AAAAC;;;sEAEUxM,tEAFV,AAAA,AAAA,AAAAsM,2DAAA;;IAEQvM,JAFR,AAAA,QAAA;AAEa,QAACuD,8CAAAA,iDAAAA,LAAOtD,6BAAAA,/HAFrB;;;sEAGUA,tEAHV,AAAA,AAAA,AAAAsM,2DAAA;;IAGQvM,JAHR,AAAA,QAAA;AAGa,QAACE,8CAAAA,iDAAAA,LAAOD,6BAAAA,/HAHrB;;;4EAIgBA,5EAJhB,AAAA,AAAA,AAAAsM,iEAAA;;IAIcvM,JAJd,AAAA,QAAA;AAImB,oBAAMwD,pBAJzB;AAImB,AAAiB,QAACA,kDAAAA,qDAAAA,LAAWvD,iCAAAA;;AAA7B;;;;AAJnB,AAAA,AAAA,AAAAsM,yEAAA;;IAKsBvM,JALtB,AAAA,QAAA;AAKyB,oBAAM2K,pBAL/B;AAKyB,AAAyB,QAACA,0DAAAA,4DAAAA;;AAA1B;;;;AALzB,AAAA,AAAA4B,sDAAA;AAAA,AAAA,0FAAA,4DAAA,8DAAA,sEAAA,oFAAA;;;AAAA,AAAA,AAAAA,4DAAA;;AAAA,AAAA,AAAAA,+DAAA;;AAAA,AAAA,AAAAA,oEAAA,WAAA3I,mBAAAC,qBAAAC;AAAA,AAAA,OAAAC,iBAAAF,qBAAA;;;AAAA;;;AAAA6I,kDAAA,sHAAAD,5DADDlJ,WAAOrD,WAAOsD,eAAWmH;AACxB,AAAA,YAAA4B,uGAAAE,5DADDlJ,WAAOrD,WAAOsD,eAAWmH;;;AACxB4B;;AAAA,YAAAA,uFAAA,5CADDhJ,OAAOrD,OAAOsD,WAAWmH;;;AAR7B,AAAA,0DAAA,1DAAM7D;;AAmBN,AAnBA;;;;iCAmBA,jCAAMnG,0EAGH6I,IAAIC;AAHP,AAIE,OAACO,wCAAeR,IAAIC;;AAEtB;;;wFAEGrJ,hDAFH,xCAAM2L;AAGJ,OAAC5L,0CAAiBC,jDAHpB;;AAKA;;;;;gEAIGY,pCAJH,5BAAMkE;AAKJ,OAACnE,qCAAYC,5CALf;;AAOA;;;;mCAAA,nCAAMyD,8EAGHrE;AAHH,AAIE,OAAC2G,sCAAa3G;;AAEhB;;;8DAEGY,nCAFH,3BAAM8I;AAGJ,OAAC9D,uCAAchF,9CAHjB;;AAKA;;;kCAAA,lCAAMG,4EAEHf;AAFH,AAGE,OAACqG,yCAAgBrG;;AAEnB;;;2BAAA,3BAAMmI,8DAEHvH;AACD,OAAC+D,4CAAmB/D,nDAHtB;;AAKA;;;4EAEGZ,1CAFH,lCAAMyL;AAGJ,OAACV,yCAAgB/K,hDAHnB;;AAKA;;;wDAEGY,hCAFH,xBAAM0K;AAGJ,OAACrG,gCAAOrE,vCAHV;;AAKA;;;+BAAA,/BAAMoF,sEAEHhG;AAFH,AAGE,OAACmJ,kCAASnJ;;AAEZ;;;0DAEGY,jCAFH,zBAAMsL;AAGJ,OAACvB,iCAAQ/J,xCAHX;;AAKA;;;wEAEGZ,xCAFH,hCAAM6G;AAAN,AAGE,IAAAgE,mBAAI,AAACC,mCAAU9K;AAAf,AAAA,oBAAA6K;AAAAA;;AAAkB,qBAAWjI,bAAK5C;;;AAEpC;;;;8DAGGY,nCAHH,3BAAMyK;AAIJ,OAACjB,mCAAUxJ,1CAJb;;AAMA;;;kCAAA,lCAAMiC,4EAEH7C;AACD,OAACyC,qCAAYzC,5CAHf;;AAKA;;;;2BAAA,3BAAML,8DAGHK;AAHH,AAIE,OAACsF,mCAAUtF;;AAEb;;;kCAAA,lCAAMiG,4EAEHjG;AAFH,AAGE,OAACqI,qCAAYrI;;AAEf;;;;;;;yBAAA,zBAAMoI,0DAMHpI;AACD,OAAC+H,iCAAQ/H,xCAPX;;AASA;;;gCAAA,hCAAMmB,wEAEHnB;AAFH,AAGE,OAACmH,mCAAUnH","names":["cognitect.transit/quoted","_","o","rep-fn","com.cognitect.transit.types/isTaggedValue","x","i","goog/math.Long","this","cljs.core/ArrayNodeSeq","list-handler","other","cognitect.transit/tagged-value","m","kfn","vfn","com.cognitect.transit.types/intValue","s","cognitect.transit/opts-merge","cognitect.transit/read","cognitect.transit/bigint?","cljs.core/clj->js","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","opts","cognitect.transit/link?","cljs.core/IndexedSeq","seq__40656","cljs.core/seq","chunk__40657","count__40658","i__40659","temp__5457__auto__","cljs.core/chunked-seq?","c__4319__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","v","ret","cljs.core/PersistentQueueSeq","a","com.cognitect.transit/tagged","cljs.core/PersistentHashSet","set-handler","com.cognitect.transit.types/isBinary","cljs.core/List","com.cognitect.transit.types/TaggedValue","cljs.core/UUID","cognitect.transit/binary?","com.cognitect.transit.types/UUID","var_args","G__40650","cognitect.transit/reader","js/Error","tag-fn","str-rep-fn","cljs.core/Cons","k","cljs.core/PersistentTreeSet","this__4161__auto__","writer__4162__auto__","opt__4163__auto__","cljs.core/-write","cognitect.transit/MapBuilder","cognitect.transit/->MapBuilder","cljs.core/NodeSeq","cljs.core/compare","x40736","cljs.core/clone","handlers","cognitect.transit/MapHandler","cognitect.transit/->MapHandler","cognitect.transit/integer?","cljs.core/Range","cljs.core/PROTOCOL_SENTINEL","cognitect.transit/SetHandler","from-rep","cljs.core/transient","com.cognitect.transit.types/bigDecimalValue","cljs.core/PersistentHashMap","map-handler","cognitect.transit/integer","cognitect.transit/VectorBuilder","cognitect.transit/->VectorBuilder","com.cognitect.transit.types/uri","type","node","cljs.core/persistent!","cljs.core/PersistentArrayMap","com.cognitect.transit.types/quoted","cljs.core/reduce-kv","coll","f","cljs.core.into.cljs$core$IFn$_invoke$arity$2","com.cognitect.transit.eq/hashCode","com.cognitect.transit.types/bigInteger","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","cognitect.transit/KeywordHandler","cognitect.transit/->KeywordHandler","cognitect.transit/uri?","cognitect.transit/quoted?","cljs.core/LazySeq","cljs.core/PersistentQueue","keyword-handler","com.cognitect.transit.types/isBigInteger","cljs.core/PersistentVector","vector-handler","obj","G__40761","cognitect.transit/write-handler","com.cognitect.transit.types/isInteger","cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3","cognitect.transit/uuid?","cognitect.transit/VectorHandler","cognitect.transit/->VectorHandler","cljs.core/PersistentTreeMap","cognitect.transit/UUIDHandler","cognitect.transit/->UUIDHandler","com.cognitect.transit.types/isLink","cognitect.transit/read-handler","seq__40681","chunk__40682","count__40683","i__40684","G__40651","G__40652","com.cognitect.transit/reader","cljs.core/name","cljs.core/PersistentTreeMapSeq","cognitect.transit.writer.cljs$core$IFn$_invoke$arity$2","com.cognitect.transit.types/link","G__40732","cognitect.transit/writer","cognitect.transit/ListHandler","cognitect.transit/bigdec","cognitect.transit/link","com.cognitect.transit.types/isQuoted","cljs.core/KeySeq","arr","cljs.core/PersistentVector.fromArray","seq__40737","chunk__40738","count__40739","i__40740","vec__40741","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","vec__40744","cljs.core/PersistentArrayMap.fromArray","r","str","com.cognitect.transit.types/isURI","tag","rep","cljs.core/Subvec","cljs.core/ValSeq","cognitect.transit/write","uuid-handler","cognitect.transit/bigint","cognitect.transit/->ListHandler","com.cognitect.transit.types/taggedValue","G__40735","cognitect.transit/SymbolHandler","cognitect.transit/->SymbolHandler","cognitect.transit.reader.cljs$core$IFn$_invoke$arity$2","G__40733","G__40734","com.cognitect.transit/writer","com.cognitect.transit.types/binary","b","cljs.core/PersistentArrayMapSeq","verbose-handler-fn","cljs.core/-equiv","cljs.core/Keyword","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","com.cognitect.transit.types/uuid","w","or__3922__auto__","com.cognitect.transit.types/isUUID","com.cognitect.transit.types/isBigDecimal","seq__40622","chunk__40623","count__40624","i__40625","cljs.core/js-keys","cognitect.transit/binary","cognitect.transit/uri","cljs.core/Symbol","symbol-handler","cognitect.transit/bigdec?","cognitect.transit.write_handler.cljs$core$IFn$_invoke$arity$4","cognitect.transit/tagged-value?","cognitect.transit/->SetHandler","uuid","writer","cljs.core/ChunkedCons","cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2","cljs.core/EmptyList","cognitect.transit/uuid","cognitect.transit/t_cognitect$transit40762","_40764","meta40763","cognitect.transit/->t_cognitect$transit40762","cljs.core.symbol.cljs$core$IFn$_invoke$arity$1","cljs.core/RSeq","cljs.core/hash","cljs.core/ChunkedSeq","seq__40706","chunk__40707","count__40708","i__40709"],"sourcesContent":[";; Copyright 2014 Cognitect. All Rights Reserved.\n;;\n;; Licensed under the Apache License, Version 2.0 (the \"License\");\n;; you may not use this file except in compliance with the License.\n;; You may obtain a copy of the License at\n;;\n;;      http://www.apache.org/licenses/LICENSE-2.0\n;;\n;; Unless required by applicable law or agreed to in writing, software\n;; distributed under the License is distributed on an \"AS-IS\" BASIS,\n;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n;; See the License for the specific language governing permissions and\n;; limitations under the License.\n\n(ns cognitect.transit\n  (:refer-clojure :exclude [integer? uuid uuid? uri?])\n  (:require [com.cognitect.transit :as t]\n            [com.cognitect.transit.types :as ty]\n            [com.cognitect.transit.eq :as eq])\n  (:import [goog.math Long]))\n\n;; patch cljs.core/UUID IEquiv\n\n(extend-type UUID\n  IEquiv\n  (-equiv [this other]\n    (cond\n      (instance? UUID other)\n      (identical? (.-uuid this) (.-uuid other))\n\n      (instance? ty/UUID other)\n      (identical? (.-uuid this) (.toString other))\n\n      :else false)))\n\n(extend-protocol IComparable\n  UUID\n  (-compare [this other]\n    (if (or (instance? UUID other)\n            (instance? ty/UUID other))\n      (compare (.toString this) (.toString other))\n      (throw (js/Error. (str \"Cannot compare \" this \" to \" other)))))\n  ty/UUID\n  (-compare [this other]\n    (if (or (instance? UUID other)\n            (instance? ty/UUID other))\n      (compare (.toString this) (.toString other))\n      (throw (js/Error. (str \"Cannot compare \" this \" to \" other))))))\n\n(extend-protocol IEquiv\n  Long\n  (-equiv [this other]\n    (.equiv this other))\n  \n  ty/UUID\n  (-equiv [this other]\n    (if (instance? UUID other)\n      (-equiv other this)\n      (.equiv this other)))\n\n  ty/TaggedValue\n  (-equiv [this other]\n    (.equiv this other)))\n\n(extend-protocol IHash\n  Long\n  (-hash [this]\n    (eq/hashCode this))\n\n  ty/UUID\n  (-hash [this]\n    (hash (.toString this)))\n\n  ty/TaggedValue\n  (-hash [this]\n    (eq/hashCode this)))\n\n(extend-type ty/UUID\n  IPrintWithWriter\n  (-pr-writer [uuid writer _]\n    (-write writer (str \"#uuid \\\"\" (.toString uuid) \"\\\"\"))))\n\n(defn ^:no-doc opts-merge [a b]\n  (doseq [k (js-keys b)]\n    (let [v (aget b k)]\n      (aset a k v)))\n  a)\n\n(deftype ^:no-doc MapBuilder []\n  Object\n  (init [_ node] (transient {}))\n  (add [_ m k v node] (assoc! m k v))\n  (finalize [_ m node] (persistent! m))\n  (fromArray [_ arr node] (cljs.core/PersistentArrayMap.fromArray arr true true)))\n\n(deftype ^:no-doc VectorBuilder []\n  Object\n  (init [_ node] (transient []))\n  (add [_ v x node] (conj! v x))\n  (finalize [_ v node] (persistent! v))\n  (fromArray [_ arr node] (cljs.core/PersistentVector.fromArray arr true)))\n\n(defn reader\n  \"Return a transit reader. type may be either :json or :json-verbose.\n   opts may be a map optionally containing a :handlers entry. The value\n   of :handlers should be map from tag to a decoder function which returns\n   then in-memory representation of the semantic transit value.\"\n  ([type] (reader type nil))\n  ([type opts]\n     (t/reader (name type)\n       (opts-merge\n         #js {:handlers\n              (clj->js\n                (merge\n                  {\"$\" (fn [v] (symbol v))\n                   \":\" (fn [v] (keyword v))\n                   \"set\" (fn [v] (into #{} v))\n                   \"list\" (fn [v] (into () (.reverse v)))\n                   \"cmap\" (fn [v] \n                            (loop [i 0 ret (transient {})]\n                              (if (< i (alength v))\n                                (recur (+ i 2)\n                                  (assoc! ret (aget v i) (aget v (inc i))))\n                                (persistent! ret))))}\n                  (:handlers opts)))\n              :mapBuilder (MapBuilder.)\n              :arrayBuilder (VectorBuilder.)\n              :prefersStrings false}\n         (clj->js (dissoc opts :handlers))))))\n\n(defn read\n  \"Read a transit encoded string into ClojureScript values given a \n   transit reader.\"\n  [r str]\n  (.read r str))\n\n(deftype ^:no-doc KeywordHandler []\n  Object\n  (tag [_ v] \":\")\n  (rep [_ v] (.-fqn v))\n  (stringRep [_ v] (.-fqn v)))\n\n(deftype ^:no-doc SymbolHandler []\n  Object\n  (tag [_ v] \"$\")\n  (rep [_ v] (.-str v))\n  (stringRep [_ v] (.-str v)))\n\n(deftype ^:no-doc ListHandler []\n  Object\n  (tag [_ v] \"list\")\n  (rep [_ v]\n    (let [ret #js []]\n      (doseq [x v] (.push ret x))\n      (t/tagged \"array\" ret)))\n  (stringRep [_ v] nil))\n\n(deftype ^:no-doc MapHandler []\n  Object\n  (tag [_ v] \"map\")\n  (rep [_ v] v)\n  (stringRep [_ v] nil))\n\n(deftype ^:no-doc SetHandler []\n  Object\n  (tag [_ v] \"set\")\n  (rep [_ v]\n    (let [ret #js []]\n      (doseq [x v] (.push ret x))\n      (t/tagged \"array\" ret)))\n  (stringRep [v] nil))\n\n(deftype ^:no-doc VectorHandler []\n  Object\n  (tag [_ v] \"array\")\n  (rep [_ v]\n    (let [ret #js []]\n      (doseq [x v] (.push ret x))\n      ret))\n  (stringRep [_ v] nil))\n\n(deftype ^:no-doc UUIDHandler []\n  Object\n  (tag [_ v] \"u\")\n  (rep [_ v] (.-uuid v))\n  (stringRep [this v] (.rep this v)))\n\n(defn writer\n  \"Return a transit writer. type maybe either :json or :json-verbose.\n  opts is a map containing a :handlers entry. :handlers is a map of\n  type constructors to handler instances.\"\n  ([type] (writer type nil))\n  ([type opts]\n     (let [keyword-handler (KeywordHandler.)\n           symbol-handler  (SymbolHandler.)\n           list-handler    (ListHandler.)\n           map-handler     (MapHandler.)\n           set-handler     (SetHandler.)\n           vector-handler  (VectorHandler.)\n           uuid-handler    (UUIDHandler.)\n           handlers\n           (merge\n             {cljs.core/Keyword               keyword-handler\n              cljs.core/Symbol                symbol-handler\n              cljs.core/Range                 list-handler\n              cljs.core/List                  list-handler\n              cljs.core/Cons                  list-handler\n              cljs.core/EmptyList             list-handler\n              cljs.core/LazySeq               list-handler\n              cljs.core/RSeq                  list-handler\n              cljs.core/IndexedSeq            list-handler\n              cljs.core/ChunkedCons           list-handler\n              cljs.core/ChunkedSeq            list-handler\n              cljs.core/PersistentQueueSeq    list-handler\n              cljs.core/PersistentQueue       list-handler\n              cljs.core/PersistentArrayMapSeq list-handler\n              cljs.core/PersistentTreeMapSeq  list-handler\n              cljs.core/NodeSeq               list-handler\n              cljs.core/ArrayNodeSeq          list-handler\n              cljs.core/KeySeq                list-handler\n              cljs.core/ValSeq                list-handler\n              cljs.core/PersistentArrayMap    map-handler\n              cljs.core/PersistentHashMap     map-handler\n              cljs.core/PersistentTreeMap     map-handler\n              cljs.core/PersistentHashSet     set-handler\n              cljs.core/PersistentTreeSet     set-handler\n              cljs.core/PersistentVector      vector-handler\n              cljs.core/Subvec                vector-handler\n              cljs.core/UUID                  uuid-handler}\n             (:handlers opts))]\n      (t/writer (name type)\n        (opts-merge\n          #js {:objectBuilder\n               (fn [m kfn vfn]\n                 (reduce-kv\n                   (fn [obj k v]\n                     (doto obj (.push (kfn k) (vfn v))))\n                   #js [\"^ \"] m))\n               :handlers\n               (specify handlers\n                 Object\n                 (forEach\n                   ([coll f]\n                      (doseq [[k v] coll]\n                        (f v k)))))\n               :unpack\n               (fn [x]\n                 (if (instance? cljs.core/PersistentArrayMap x)\n                   (.-arr x)\n                   false))}\n          (clj->js (dissoc opts :handlers)))))))\n\n(defn write\n  \"Encode an object into a transit string given a transit writer.\"\n  [w o]\n  (.write w o))\n\n(defn read-handler\n  \"Construct a read handler. Implemented as identity, exists primarily\n   for API compatiblity with transit-clj\"\n  [from-rep]\n  from-rep)\n\n(defn write-handler\n  \"Creates a transit write handler whose tag, rep,\n   stringRep, and verboseWriteHandler methods\n   invoke the provided fns.\"\n  ([tag-fn rep-fn]\n     (write-handler tag-fn rep-fn nil nil))\n  ([tag-fn rep-fn str-rep-fn]\n     (write-handler tag-fn rep-fn str-rep-fn nil))\n  ([tag-fn rep-fn str-rep-fn verbose-handler-fn]\n     (reify\n       Object\n       (tag [_ o] (tag-fn o))\n       (rep [_ o] (rep-fn o))\n       (stringRep [_ o] (when str-rep-fn (str-rep-fn o)))\n       (getVerboseHandler [_] (when verbose-handler-fn (verbose-handler-fn))))))\n\n;; =============================================================================\n;; Constructors & Predicates\n\n(defn tagged-value\n  \"Construct a tagged value. tag must be a string and rep can\n   be any transit encodeable value.\"\n  [tag rep]\n  (ty/taggedValue tag rep))\n\n(defn tagged-value?\n  \"Returns true if x is a transit tagged value, false otherwise.\"\n  [x]\n  (ty/isTaggedValue x))\n\n(defn integer\n  \"Construct a transit integer value. Returns JavaScript number if\n  in the 53bit integer range, a goog.math.Long instance if above. s\n  may be a string or a JavaScript number.\"\n  [s]\n  (ty/intValue s))\n\n(defn integer?\n  \"Returns true if x is an integer value between the 53bit and 64bit\n  range, false otherwise.\"\n  [x]\n  (ty/isInteger x))\n\n(defn bigint\n  \"Construct a big integer from a string.\"\n  [s]\n  (ty/bigInteger s))\n\n(defn bigint?\n  \"Returns true if x is a transit big integer value, false otherwise.\"\n  [x]\n  (ty/isBigInteger x))\n\n(defn bigdec\n  \"Construct a big decimal from a string.\"\n  [s]\n  (ty/bigDecimalValue s))\n\n(defn bigdec?\n  \"Returns true if x is a transit big decimal value, false otherwise.\"\n  [x]\n  (ty/isBigDecimal x))\n\n(defn uri\n  \"Construct a URI from a string.\"\n  [s]\n  (ty/uri s))\n\n(defn uri?\n  \"Returns true if x is a transit URI value, false otherwise.\"\n  [x]\n  (ty/isURI x))\n\n(defn uuid\n  \"Construct a UUID from a string.\"\n  [s]\n  (ty/uuid s))\n\n(defn uuid?\n  \"Returns true if x is a transit UUID value, false otherwise.\"\n  [x]\n  (or (ty/isUUID x) (instance? UUID x)))\n\n(defn binary\n  \"Construct a transit binary value. s should be base64 encoded\n   string.\"\n  [s]\n  (ty/binary s))\n\n(defn binary?\n  \"Returns true if x is a transit binary value, false otherwise.\"\n  [x]\n  (ty/isBinary x))\n\n(defn quoted\n  \"Construct a quoted transit value. x should be a transit\n   encodeable value.\"\n  [x]\n  (ty/quoted x))\n\n(defn quoted?\n  \"Returns true if x is a transit quoted value, false otherwise.\"\n  [x]\n  (ty/isQuoted x))\n\n(defn link\n  \"Construct a transit link value. x should be an IMap instance\n   containing at a minimum the following keys: :href, :rel. It\n   may optionall include :name, :render, and :prompt. :href must\n   be a transit URI, all other values are strings, and :render must\n   be either :image or :link.\"\n  [x]\n  (ty/link x))\n\n(defn link?\n  \"Returns true if x a transit link value, false if otherwise.\"\n  [x]\n  (ty/isLink x))\n"]}