{"version":3,"file":"rewrite_clj.zip.move.js","sources":["rewrite_clj/zip/move.cljs"],"mappings":";;;;AAKA;;;kEAEGE,rCAFH,7BAAMuB;AAAN,AAGE,IAAAW,WAAQlC;IAARkC,eAAA,EAAA,CAAAA,YAAA,OAAA,KAAA,kBAAAA,lBAAaV;AAAb,AAAA,GAAA,CAAAU,gBAAA;AAAA;;AAAA,gFAAAA,zEAAqBpC;;;AAEvB;;;gEAEGE,pCAFH,5BAAM2B;AAGJ,IAAAd,WAAQb,fAHV;IAGEa,eAAA,EAAA,CAAAA,YAAA,OAAA,KAAA,iBAAAA,jBAAaC;AAAb,AAAA,GAAA,CAAAD,gBAAA;AAAA;;AAAA,uDAAAA,hDAAoBX;;;AAEtB;;;4BAAA,5BAAMM,gEAEHR;AAFH,AAGE,IAAA4B,WAAQ5B;IAAR4B,eAAA,EAAA,CAAAA,YAAA,OAAA,KAAA,iBAAAA,jBAAaC;AAAb,AAAA,GAAA,CAAAD,gBAAA;AAAA;;AAAA,gFAAAA,zEAAoB9B;;;AAEtB;;;0BAAA,1BAAMG,4DAEHD;AAFH,AAGE,IAAAoB,WAAQpB;IAARoB,eAAA,EAAA,CAAAA,YAAA,OAAA,KAAA,eAAAA,fAAaC;AAAb,AAAA,GAAA,CAAAD,gBAAA;AAAA;;AAAA,uDAAAA,hDAAkBlB;;;AAEpB;;;gEAEGF,pCAFH,5BAAMkB;AAGJ,oBAAMlB,pBAHR;AAII,IAAAgB,mBAAI,iBAAAP,WAAST,nDADf;IACMS,eAAA,EAAA,CAAAA,YAAA,OAAA,KAAA,iBAAAA,jBACSC;AADT,AAAA,GAAA,CAAAD,gBAAA;AAAA;;AAES,iGAAAA,1FAACL,yEAAmBM;;;AAFjC,AAAA,oBAAAM;AAAAA;;AAGI,8EAAA,2FAAA,lKAACL,kDAAUX,KAAKY;;;AAJtB;;;AAMF;;;4EAEGZ,1CAFH,lCAAMmB;AAAN,AAGE,IAAAH,mBAAI,AAACgB,cAAIhC;AAAT,AAAA,GAAAgB;AAAAA;;2BACI,AAACU,uBAAO1B,lDADZ,IAAAgB;AAAA,AAAA,oBAAAA;AAAAA;;AAEI,OAAA,yHAAQ,AAACT,eAAKP;;;;AAEpB;;;;wCAAA,xCAAMe,wFAGHf;AAHH,AAIE,6GAAA,rGAAM,AAACF,yEAAmB,AAAC0B,kBAAQxB;;AAErC;;;;sFAGGA,/CAHH,vCAAMsB;AAIJ,mFAAA,3EAAM,AAACpB,gDAAwB,AAACY,iBAAOd,zEAJzC;;AAMA;;;gEAEGA,pCAFH,5BAAMyB;AAGJ,IAAAtB,WAASH,fAHX;IAGEG,eAAA,EAAA,CAAAA,YAAA,OAAA,KAAA,iBAAAA,jBACSE;AADT,AAAA,GAAA,CAAAF,gBAAA;AAAA;;AAES,iGAAAA,1FAACC,yEAAmBC;;;AAE/B;;;wEAEGL,xCAFH,hCAAMM;AAAN,AAGE,IAAA2B,WAAQjC;8CACAiB,1CADRgB,eAAA,EAAA,CAAAA,YAAA,OAAA,KAAA,qBAAAA;AAAA,AAAA,GAAA,CAAAA,gBAAA;AAAA;;OAEQnC,PAFR,gFAAAmC;;;AAIF;;;0EAEGjC,zCAFH,jCAAM8B;AAGJ,IAAA/B,WAAQC,fAHV;IAGED,eAAA,EAAA,CAAAA,YAAA,OAAA,KAAA,sBAAAA,tBACQgC;AADR,AAAA,GAAA,CAAAhC,gBAAA;AAAA;;AAAA,uDAAAA,hDAEQG","names":["rewrite_clj.zip.whitespace.skip_whitespace.cljs$core$IFn$_invoke$arity$1","G__28907","zloc","rewrite-clj.zip.move/up","rewrite-clj.zip.whitespace/skip-whitespace-left","G__28903","rewrite_clj.zip.whitespace.skip_whitespace.cljs$core$IFn$_invoke$arity$2","clojure.zip/prev","rewrite-clj.zip.move/leftmost","cljs.core/meta","rewrite-clj.zip.move/down","G__28898","clojure.zip/next","cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","G__28890","clojure.zip/left","rewrite-clj.zip.move/rightmost?","or__3922__auto__","clojure.zip/leftmost","rewrite-clj.zip.move/next","rewrite-clj.zip.move/end?","G__28895","clojure.zip/up","rewrite-clj.zip.move/leftmost?","rewrite-clj.zip.move/right","clojure.zip/right","rewrite-clj.zip.move/prev","clojure.zip/end?","rewrite-clj.zip.move/left","G__28892","clojure.zip/down","rewrite-clj.zip.move/rightmost","clojure.zip/rightmost","cljs.core/not","G__28906","G__28889"],"sourcesContent":["(ns rewrite-clj.zip.move\n  (:refer-clojure :exclude [next])\n  (:require [rewrite-clj.zip.whitespace :as ws]\n            [clojure.zip :as z]))\n\n(defn right\n  \"Move right to next non-whitespace/non-comment location.\"\n  [zloc]\n  (some-> zloc z/right ws/skip-whitespace))\n\n(defn left\n  \"Move left to next non-whitespace/non-comment location.\"\n  [zloc]\n  (some-> zloc z/left ws/skip-whitespace-left))\n\n(defn down\n  \"Move down to next non-whitespace/non-comment location.\"\n  [zloc]\n  (some-> zloc z/down ws/skip-whitespace))\n\n(defn up\n  \"Move up to next non-whitespace/non-comment location.\"\n  [zloc]\n  (some-> zloc z/up ws/skip-whitespace-left))\n\n(defn next\n  \"Move to the next non-whitespace/non-comment location in a depth-first manner.\"\n  [zloc]\n  (when zloc\n    (or (some->> zloc\n                 z/next\n                 (ws/skip-whitespace z/next))\n        (vary-meta zloc assoc ::end? true))))\n\n(defn end?\n  \"Check whether the given node is at the end of the depth-first traversal.\"\n  [zloc]\n  (or (not zloc)\n      (z/end? zloc)\n      (::end? (meta zloc))))\n\n(defn rightmost?\n  \"Check if the given location represents the leftmost non-whitespace/\n   non-comment one.\"\n  [zloc]\n  (nil? (ws/skip-whitespace (z/right zloc))))\n\n(defn leftmost?\n  \"Check if the given location represents the leftmost non-whitespace/\n   non-comment one.\"\n  [zloc]\n  (nil? (ws/skip-whitespace-left (z/left zloc))))\n\n(defn prev\n  \"Move to the next non-whitespace/non-comment location in a depth-first manner.\"\n  [zloc]\n  (some->> zloc\n           z/prev\n           (ws/skip-whitespace z/prev)))\n\n(defn leftmost\n  \"Move to the leftmost non-whitespace/non-comment location.\"\n  [zloc]\n  (some-> zloc\n          z/leftmost\n          ws/skip-whitespace))\n\n(defn rightmost\n  \"Move to the rightmost non-whitespace/non-comment location.\"\n  [zloc]\n  (some-> zloc\n          z/rightmost\n          ws/skip-whitespace-left))\n"]}