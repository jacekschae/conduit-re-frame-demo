{"version":3,"file":"rewrite_clj.node.keyword.js","sources":["rewrite_clj/node/keyword.cljs"],"mappings":"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","names":["_","c","v","cljs.core/Keyword","k","js/Error","G__28245","temp__5455__auto__","nspace","cljs.core/namespace","this","rewrite-clj.node.protocols/string","cljs.core/count","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","rewrite-clj.node.keyword/->KeywordNode","namespaced?","cljs.core/not","this__11972__auto__","k__11973__auto__","cljs.core._lookup.cljs$core$IFn$_invoke$arity$3","this__11974__auto__","k28239","else__11975__auto__","cljs.core.get.cljs$core$IFn$_invoke$arity$3","__extmap","this__11986__auto__","writer__11987__auto__","opts__11988__auto__","pr-pair__11989__auto__","keyval__11990__auto__","cljs.core/pr-sequential-writer","cljs.core/pr-writer","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core/PersistentVector","G__28238","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__11970__auto__","__meta","this__11967__auto__","__hash","this__11976__auto__","this__11968__auto__","h__4030__auto__","fexpr__28246","coll__11969__auto__","cljs.core/hash-unordered-coll","this28240","other28241","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/PROTOCOL_SENTINEL","this__11981__auto__","k__11982__auto__","cljs.core/contains?","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","cljs.core/-with-meta","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core/not-empty","this__11979__auto__","k__11980__auto__","pred__28249","cljs.core/keyword-identical?","expr__28250","G__28252","G__28253","G__28254","G__28255","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","this__11984__auto__","cljs.core/seq","this__11971__auto__","this__11977__auto__","entry__11978__auto__","cljs.core/vector?","cljs.core/-assoc","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","cljs.core/-conj","rewrite-clj.node.keyword/KeywordNode","this__4208__auto__","cljs.core/List","writer__4209__auto__","cljs.core/-write","G__28242","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic","rewrite-clj.node.keyword/map->KeywordNode","and__3911__auto__","cljs.core/name","var_args","args__4502__auto__","len__4499__auto__","i__4500__auto__","argseq__4503__auto__","cljs.core/IndexedSeq","rewrite-clj.node.keyword/keyword-node","p__28281","vec__28282","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","seq28279","G__28280","cljs.core/first","cljs.core/next","self__4486__auto__"],"sourcesContent":["(ns rewrite-clj.node.keyword\n  (:require [rewrite-clj.node.protocols :as node]))\n\n;; ## Node\n\n(defrecord KeywordNode [k namespaced?]\n  node/Node\n  (tag [_] :token)\n  (printable-only? [_] false)\n  (sexpr [_]\n    (if (and namespaced?\n             (not (namespace k)))\n;;       (keyword\n;;         (name (ns-name *ns*))\n;;         (name k))\n      (throw (js/Error. \"Namespaced keywords not supported !\"))\n      k))\n  (length [this]\n    (let [c (inc (count (name k)))]\n      (if namespaced?\n        (inc c)\n        (if-let [nspace (namespace k)]\n          (+ 1 c (count nspace))\n          c))))\n  (string [_]\n    (let [v (pr-str k)]\n      (if namespaced?\n        (str \":\" v)\n        v)))\n\n  Object\n  (toString [this]\n    (node/string this)))\n\n\n\n\n;; TODO\n;;(node/make-printable! KeywordNode)\n\n;; ## Constructor\n\n(defn keyword-node\n  \"Create node representing a keyword. If `namespaced?` is given as `true`\n   a keyword \u00e0 la `::x` or `::ns/x` (i.e. namespaced/aliased) is generated.\"\n  [k & [namespaced?]]\n  {:pre [(keyword? k)]}\n  (->KeywordNode k namespaced?))\n"]}