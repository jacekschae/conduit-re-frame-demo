{"version":3,"file":"rewrite_clj.node.whitespace.js","sources":["rewrite_clj/node/whitespace.cljs"],"mappings":"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","names":["node","rewrite-clj.node.whitespace/->WhitespaceNode","s","rewrite-clj.node.whitespace/whitespace-nodes","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","rewrite-clj.node.protocols/tag","cljs.core/identity","rewrite-clj.node.whitespace/whitespace-node","cljs.core/contains?","c","rewrite-clj.node.whitespace/newline?","nodes","_","rewrite-clj.node.whitespace/*newline-fn*","newlines","cljs.core.partition_by.cljs$core$IFn$_invoke$arity$2","rewrite-clj.node.whitespace/line-separated","rewrite-clj.node.whitespace/whitespace?","rewrite-clj.node.whitespace/newline-node","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/str","cljs.core.repeat.cljs$core$IFn$_invoke$arity$2","n","rewrite-clj.node.whitespace/newlines","G__28358","G__28371","rewrite-clj.node.protocols/string","this","comma","js/Error","this__11972__auto__","k__11973__auto__","cljs.core._lookup.cljs$core$IFn$_invoke$arity$3","this__11974__auto__","k28367","else__11975__auto__","cljs.core/Keyword","cljs.core.get.cljs$core$IFn$_invoke$arity$3","__extmap","this__11986__auto__","writer__11987__auto__","opts__11988__auto__","pr-pair__11989__auto__","keyval__11990__auto__","cljs.core/pr-sequential-writer","cljs.core/pr-writer","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core/PersistentVector","G__28366","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__11970__auto__","__meta","this__11967__auto__","__hash","this__11976__auto__","cljs.core/count","this__11968__auto__","h__4030__auto__","fexpr__28372","coll__11969__auto__","cljs.core/hash-unordered-coll","this28368","other28369","cljs.core/PROTOCOL_SENTINEL","this__11981__auto__","k__11982__auto__","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","cljs.core/-with-meta","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core/not-empty","this__11979__auto__","k__11980__auto__","pred__28380","cljs.core/keyword-identical?","expr__28381","G__28383","G__28384","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","this__11984__auto__","cljs.core/seq","this__11971__auto__","this__11977__auto__","entry__11978__auto__","cljs.core/vector?","cljs.core/-assoc","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","cljs.core/-conj","rewrite-clj.node.whitespace/NewlineNode","this__4208__auto__","cljs.core/List","writer__4209__auto__","cljs.core/-write","G__28370","rewrite-clj.node.whitespace/->NewlineNode","rewrite-clj.node.whitespace/map->NewlineNode","whitespace","cljs.core/butlast","cljs.core.interleave.cljs$core$IFn$_invoke$arity$2","cljs.core.repeat.cljs$core$IFn$_invoke$arity$1","nl","rewrite-clj.node.whitespace/comma-separated","space","k28354","G__28353","fexpr__28359","this28355","other28356","pred__28360","expr__28361","G__28363","G__28364","rewrite-clj.node.whitespace/WhitespaceNode","G__28357","rewrite-clj.node.whitespace/map->WhitespaceNode","rewrite-clj.node.whitespace/linebreak?","rewrite-clj.node.whitespace/*count-fn*","rewrite-clj.node.whitespace/space-separated","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core/first","char-seq","rewrite-clj.node.whitespace/spaces"],"sourcesContent":["(ns rewrite-clj.node.whitespace\n  (:require [rewrite-clj.node.protocols :as node]))\n\n;; ## Newline Modifiers\n\n(def ^:dynamic *newline-fn*\n  \"This function is applied to every newline string.\"\n  identity)\n\n(def ^:dynamic *count-fn*\n  \"This function is applied to every newline string and should produce\n   the eventual character count.\"\n  count)\n\n\n;; TODO\n;; (defmacro with-newline-fn\n;;   [f & body]\n;;   `(binding [*newline-fn* (comp *newline-fn* ~f)]\n;;      ~@body))\n\n;; (defmacro with-count-fn\n;;   [f & body]\n;;   `(binding [*count-fn* (comp *count-fn* ~f)]\n;;      ~@body))\n\n;; ## Nodes\n\n(defrecord WhitespaceNode [whitespace]\n  node/Node\n  (tag [_] :whitespace)\n  (printable-only? [_] true)\n  (sexpr [_] (throw (js/Error. \"Unsupported operation\")))\n  (length [_] (count whitespace))\n  (string [_] whitespace)\n\n  Object\n  (toString [this]\n    (node/string this)))\n\n(defrecord NewlineNode [newlines]\n  node/Node\n  (tag [_] :newline)\n  (printable-only? [_] true)\n  (sexpr [_] (throw (js/Error. \"Unsupported operation\")))\n  (length [_] (*count-fn* newlines))\n  (string [_] (*newline-fn* newlines))\n\n  Object\n  (toString [this]\n    (node/string this)))\n\n\n;; TODO\n;; (node/make-printable! WhitespaceNode)\n;; (node/make-printable! NewlineNode)\n\n;; ## Constructors\n\n(defn whitespace-node\n  \"Create whitespace node.\"\n  [s]\n  (->WhitespaceNode s))\n\n(defn newline-node\n  \"Create newline node.\"\n  [s]\n  (->NewlineNode s))\n\n(defn- newline?\n  \"Check whether a character represents a linebreak.\"\n  [c]\n  (contains? #{\\return \\newline} c))\n\n(defn whitespace-nodes\n  \"Convert a string of whitespace to whitespace/newline nodes.\"\n  [s]\n  (->> (partition-by newline? s)\n       (map\n         (fn [char-seq]\n           (let [s (apply str char-seq)]\n             (if (newline? (first char-seq))\n               (newline-node s)\n               (whitespace-node s)))))))\n\n;; ## Utilities\n\n(defn spaces\n  \"Create node representing the given number of spaces.\"\n  [n]\n  (whitespace-node (apply str (repeat n \\space))))\n\n(defn newlines\n  \"Create node representing the given number of newline characters.\"\n  [n]\n  (newline-node (apply str (repeat n \\newline))))\n\n\n\n(let [comma (whitespace-node \", \")]\n  (defn comma-separated\n    \"Interleave the given seq of nodes with `\\\", \\\"` nodes.\"\n    [nodes]\n    (butlast (interleave nodes (repeat comma)))))\n\n(let [nl (newline-node \"\\n\")]\n  (defn line-separated\n    \"Interleave the given seq of nodes with newline nodes.\"\n    [nodes]\n    (butlast (interleave nodes (repeat nl)))))\n\n(let [space (whitespace-node \" \")]\n  (defn space-separated\n    \"Interleave the given seq of nodes with `\\\" \\\"` nodes.\"\n    [nodes]\n    (butlast (interleave nodes (repeat space)))))\n\n;; ## Predicates\n\n(defn whitespace?\n  \"Check whether a node represents whitespace.\"\n  [node]\n  (contains?\n    #{:whitespace\n      :newline}\n    (node/tag node)))\n\n(defn linebreak?\n  \"Check whether a ndoe represents linebreaks.\"\n  [node]\n  (= (node/tag node) :newline))\n"]}