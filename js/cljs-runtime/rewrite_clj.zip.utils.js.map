{"version":3,"file":"rewrite_clj.zip.utils.js","sources":["rewrite_clj/zip/utils.cljs"],"mappings":"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","names":["cljs.core.update_in.cljs$core$IFn$_invoke$arity$3","cljs.core/pop","cljs.core/seq","l","cljs.core/with-meta","v","cljs.core.get.cljs$core$IFn$_invoke$arity$2","path","k","clojure.zip/up","cljs.core/peek","_","r","loc","p__28860","vec__28861","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","map__28864","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","rewrite-clj.zip.utils/remove-and-move-left","p__28869","vec__28870","map__28873","rewrite-clj.zip.utils/remove-and-move-right","cljs.core/count","temp__5455__auto__","rloc","clojure.zip/right","zloc","cljs.core/meta","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","p?","lloc","clojure.zip/left","cljs.core/first","clojure.zip/remove","rewrite-clj.zip.utils/update-in-path","and__3911__auto__","ppath","rewrite-clj.zip.utils/remove-right","clojure.zip/make-node","pnodes","rs","ploc","clojure.zip/prev","node","f","rewrite-clj.zip.utils/remove-while","rewrite-clj.zip.utils/remove-right-while","cljs.core/next","vec__28878","map__28881","rewrite-clj.zip.utils/remove-left","p__28847","vec__28848","rewrite-clj.zip.utils/remove-left-while","rewrite-clj.zip.utils/remove-and-move-up","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","cljs.core/not","js/Error"],"sourcesContent":["(ns ^:no-doc rewrite-clj.zip.utils\n  (:require [clojure.zip :as z]))\n\n;; ## Remove\n\n(defn- update-in-path\n  [[node path :as loc] k f]\n  (let [v (get path k)]\n    (if (seq v)\n      (with-meta\n        [node (assoc path k (f v) :changed? true)]\n        (meta loc))\n      loc)))\n\n(defn remove-right\n  \"Remove right sibling of the current node (if there is one).\"\n  [loc]\n  (update-in-path loc :r next))\n\n(defn remove-left\n  \"Remove left sibling of the current node (if there is one).\"\n  [loc]\n  (update-in-path loc :l pop))\n\n\n(defn remove-while\n  [zloc p?]\n  \"Remove nodes while predicate true. (depth first in reverse!) \"\n  (loop [zloc zloc]\n    (let [ploc (z/prev zloc)]\n      (if-not (and ploc (p? ploc))\n        zloc\n        (recur (z/remove zloc))))))\n\n(defn remove-right-while\n  \"Remove elements to the right of the current zipper location as long as\n   the given predicate matches.\"\n  [zloc p?]\n  (loop [zloc zloc]\n    (if-let [rloc (z/right zloc)]\n      (if (p? rloc)\n        (recur (remove-right zloc))\n        zloc)\n      zloc)))\n\n(defn remove-left-while\n  \"Remove elements to the left of the current zipper location as long as\n   the given predicate matches.\"\n  [zloc p?]\n  (loop [zloc zloc]\n    (if-let [lloc (z/left zloc)]\n      (if (p? lloc)\n        (recur (remove-left zloc))\n        zloc)\n      zloc)))\n\n;; ## Remove and Move\n\n(defn remove-and-move-left\n  \"Remove current node and move left. If current node is at the leftmost\n   location, returns `nil`.\"\n  [[_ {:keys [l] :as path} :as loc]]\n  (if (seq l)\n    (with-meta\n      [(peek l) (-> path\n                    (update-in [:l] pop)\n                    (assoc :changed? true))]\n      (meta loc))))\n\n(defn remove-and-move-right\n  \"Remove current node and move right. If current node is at the rightmost\n   location, returns `nil`.\"\n  [[_ {:keys [r] :as path} :as loc]]\n  (if (seq r)\n    (with-meta\n      [(first r) (-> path\n                     (update-in [:r] next)\n                     (assoc :changed? true))]\n      (meta loc))))\n\n\n(defn remove-and-move-up [loc]\n  (let [[node {l :l, ppath :ppath, pnodes :pnodes, rs :r, :as path}] loc]\n    (if (nil? path)\n      (throw (js/Error. \"Remove at top\"))\n      (if (pos? (count l))\n        (z/up (with-meta [(peek l)\n                    (assoc path :l (pop l) :changed? true)]\n                   (meta loc)))\n        (with-meta [(z/make-node loc (peek pnodes) rs)\n                    (and ppath (assoc ppath :changed? true))]\n                   (meta loc))))))\n\n"]}