{"version":3,"file":"rewrite_clj.parser.core.js","sources":["rewrite_clj/parser/core.cljs"],"mappings":"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","names":["G__28791","rewrite-clj.node/quote-node","rewrite_clj.parser.core.parse_printables.cljs$core$IFn$_invoke$arity$variadic","reader","G__28756","rewrite-clj.node/reader-macro-node","G__28761","rewrite-clj.node/token-node","cljs.core.symbol.cljs$core$IFn$_invoke$arity$1","rewrite-clj.parser.token/parse-token","c","rewrite-clj.parser.core/parse-map","rewrite-clj.parser.core/parse-unmatched","rewrite-clj.reader/ignore","cljs.core/cons","G__28760","rewrite-clj.reader/peek","G__28754","rewrite-clj.node/map-node","rewrite-clj.parser.core/parse-delim","ignore?","rewrite-clj.parser.core/parse-printables","rewrite-clj.reader/throw-reader","rewrite-clj.parser.core/parse-meta","rewrite-clj.parser.core/parse-unquote","rewrite-clj.reader/next","rewrite-clj.parser.core/parse-quote","G__28774","rewrite-clj.node/meta-node","rewrite-clj.parser.core/dispatch","rewrite-clj.parser.core/parse-vector","G__28771","rewrite-clj.node/set-node","rewrite-clj.parser.core/parse-comment","rewrite-clj.parser.core/parse-list","rewrite-clj.parser.core/parse-syntax-quote","rewrite-clj.parser.core/parse-conditional","*delimiter*28710","rewrite-clj.parser.core/*delimiter*","delimiter","node-tag","rewrite-clj.parser.core/parse-deref","rewrite-clj.parser.core/parse-next","G__28745","G__28752","rewrite-clj.node/vector-node","cljs.core/complement","rewrite-clj.node/printable-only?","p1__28709#","rdr","G__28770","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","rewrite-clj.parser.core/parse-sharp","rewrite-clj.parser.string/parse-string","G__28778","rewrite-clj.parser.core/parse-eof","rewrite-clj.reader/read-n","G__28773","rewrite-clj.node/fn-node","G__28798","rewrite-clj.node/unquote-node","var_args","args__4502__auto__","len__4499__auto__","i__4500__auto__","argseq__4503__auto__","cljs.core/IndexedSeq","p__28726","vec__28727","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","seq28716","G__28717","cljs.core/first","cljs.core/next","G__28718","G__28722","self__4486__auto__","n","G__28792","rewrite-clj.node/syntax-quote-node","rewrite-clj.reader/whitespace?","rewrite-clj.parser.whitespace/parse-whitespace","rewrite_clj.reader.throw_reader.cljs$core$IFn$_invoke$arity$variadic","rewrite-clj.reader/read-repeatedly","read1","G__28776","rewrite-clj.node/eval-node","G__28788","rewrite-clj.node/deref-node","G__28762","G__28797","rewrite-clj.node/unquote-splicing-node","G__28799","rewrite-clj.node/comment-node","rewrite-clj.reader/read-include-linebreak","rewrite-clj.parser.keyword/parse-keyword","G__28763","G__28764","rewrite-clj.reader/unread","G__28777","rewrite-clj.node/uneval-node","rewrite-clj.reader/read-with-meta","G__28775","rewrite-clj.node/var-node","G__28750","rewrite-clj.node/list-node","rewrite-clj.parser.string/parse-regex"],"sourcesContent":["(ns rewrite-clj.parser.core\n  (:require [rewrite-clj.node :as node]\n            [rewrite-clj.reader :as reader]\n            [rewrite-clj.parser.keyword :refer [parse-keyword]]\n            [rewrite-clj.parser.string :refer [parse-string parse-regex]]\n            [rewrite-clj.parser.token :refer [parse-token]]\n            [rewrite-clj.parser.whitespace :refer [parse-whitespace]]\n            [cljs.tools.reader.reader-types :refer [peek-char]]))\n\n;; ## Base Parser\n\n(def ^:dynamic ^:private *delimiter*\n  nil)\n\n\n(declare parse-next)\n\n\n(defn- parse-delim\n  [^not-native reader delimiter]\n  (reader/ignore reader)\n  (->> #(binding [*delimiter* delimiter]\n          (parse-next %))\n       (reader/read-repeatedly reader)))\n\n(defn- parse-printables\n  [^not-native reader node-tag n & [ignore?]]\n  (when ignore?\n    (reader/ignore reader))\n  (reader/read-n\n    reader\n    node-tag\n    parse-next\n    (complement node/printable-only?)\n    n))\n\n\n(defn- parse-meta\n  [^not-native reader]\n  (reader/ignore reader)\n  (node/meta-node (parse-printables reader :meta 2)))\n\n\n(defn- parse-eof\n  [^not-native reader]\n  (when *delimiter*\n    (reader/throw-reader reader \"Unexpected EOF.\")))\n\n;; ### Seqs\n\n(defn- parse-list\n  [^not-native reader]\n  (node/list-node (parse-delim reader \\))))\n\n(defn- parse-vector\n  [^not-native reader]\n  (node/vector-node (parse-delim reader \\])))\n\n(defn- parse-map\n  [^not-native reader]\n  (node/map-node (parse-delim reader \\})))\n\n\n;; ### Reader Specialities\n\n\n(defn- parse-conditional [reader]\n  ;; we need to examine the next character, so consume one (known \\?)\n  (reader/next reader)\n  ;; we will always have a reader-macro-node as the result\n  (node/reader-macro-node\n    (let [read1 (fn [] (parse-printables reader :reader-macro 1))]\n      (cons (case (reader/peek reader)\n              ;; the easy case, just emit a token\n              \\( (node/token-node (symbol \"?\"))\n\n              ;; the harder case, match \\@, consume it and emit the token\n              \\@ (do (reader/next reader)\n                   (node/token-node (symbol \"?@\")))\n\n              ;; otherwise no idea what we're reading but its \\? prefixed\n              (do (reader/unread reader \\?)\n                (first (read1))))\n            (read1)))))\n\n\n\n(defn- parse-sharp\n  [^not-native reader]\n  (reader/ignore reader)\n  (case (peek-char reader)\n    nil (reader/throw-reader reader \"Unexpected EOF.\")\n    \\{ (node/set-node (parse-delim reader \\}))\n    \\( (node/fn-node (parse-delim reader \\)))\n    \\\" (parse-regex reader)\n    \\^ (node/meta-node (parse-printables reader :meta 2 true))\n    \\' (node/var-node (parse-printables reader :var 1 true))\n    \\= (node/eval-node (parse-printables reader :eval 1 true))\n    \\_ (node/uneval-node (parse-printables reader :uneval 1 true))\n    \\? (parse-conditional reader)\n    (node/reader-macro-node (parse-printables reader :reader-macro 2))))\n\n\n\n\n(defn- parse-unmatched\n  [^not-native reader]\n  (reader/throw-reader\n    reader\n    \"Unmatched delimiter: %s\"\n    (peek-char reader)))\n\n\n(defn- parse-deref\n  [^not-native reader]\n  (node/deref-node (parse-printables reader :deref 1 true)))\n\n;; ## Quotes\n\n(defn- parse-quote\n  [^not-native reader]\n  (node/quote-node (parse-printables reader :quote 1 true)))\n\n(defn- parse-syntax-quote\n  [^not-native reader]\n  (node/syntax-quote-node (parse-printables reader :syntax-quote 1 true)))\n\n(defn- parse-unquote\n  [^not-native reader]\n  (reader/ignore reader)\n  (let [c (peek-char reader)]\n    (if (= c \\@)\n      (node/unquote-splicing-node\n        (parse-printables reader :unquote 1 true))\n      (node/unquote-node\n        (parse-printables reader :unquote 1)))))\n\n(defn- parse-comment\n  [^not-native reader]\n  (reader/ignore reader)\n  (node/comment-node (reader/read-include-linebreak reader)))\n\n\n\n(defn- dispatch\n  [c]\n  (cond (nil? c)                        parse-eof\n        (identical? c *delimiter*)      reader/ignore\n        (reader/whitespace? c)          parse-whitespace\n        (identical? c \\^)               parse-meta\n        (identical? c \\#)               parse-sharp\n        (identical? c \\()               parse-list\n        (identical? c \\[)               parse-vector\n        (identical? c \\{)               parse-map\n        (identical? c \\})               parse-unmatched\n        (identical? c \\])               parse-unmatched\n        (identical? c \\))               parse-unmatched\n        (identical? c \\~)               parse-unquote\n        (identical? c \\')               parse-quote\n        (identical? c \\`)               parse-syntax-quote\n        (identical? c \\;)               parse-comment\n        (identical? c \\@)               parse-deref\n        (identical? c \\\")               parse-string\n        (identical? c \\:)               parse-keyword\n        :else                           parse-token))\n\n\n(defn parse-next\n  [^not-native rdr]\n  (reader/read-with-meta rdr (dispatch (peek-char rdr))))\n"]}