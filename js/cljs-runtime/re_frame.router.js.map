{"version":3,"file":"re_frame.router.js","sources":["re_frame/router.cljc"],"mappings":"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","names":["re-frame.router/dispatch-sync","f","G__38437","re-frame.interop/after-render","re-frame.interop/next-tick","x__4211__auto__","m__4212__auto__","re-frame/router.push","goog/typeOf","cljs.core/missing-protocol","re-frame/router.add-post-event-callback","re-frame/router.remove-post-event-callback","re-frame/router.purge","re-frame/router.-fsm-trigger","re-frame/router.-add-event","re-frame/router.-process-1st-event-in-queue","re-frame/router.-run-next-tick","re-frame/router.-run-queue","re-frame/router.-exception","re-frame/router.-pause","re-frame/router.-resume","re-frame/router.-call-post-event-callbacks","re-frame.router/IEventQueue","re-frame.router/add-post-event-callback","this","id","callack","fsm-state","_","G__38463","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","G__38471","trigger","re-frame.trace/is-trace-enabled?","*current-trace*38456","re-frame.trace/*current-trace*","re-frame.trace/start-trace","end__38171__auto__","re-frame.interop/now","duration__38172__auto__","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","re-frame.trace/traces","cljs.core/conj","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","re-frame.trace/run-tracing-callbacks!","seq__38482","cljs.core/seq","chunk__38483","count__38484","i__38485","temp__5457__auto__","cljs.core/chunked-seq?","c__4319__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","callback","cljs.core/vals","post-event-callback-fns","re-frame.router/-exception","ex","re-frame.router/event-queue","re-frame.router/->EventQueue","re-frame.interop/empty-queue","later-fn","event-v","cljs.core/peek","queue","re-frame.router/-fsm-trigger","event","G__38476","new-fsm-state","re-frame.router/-run-queue","re-frame.router/-resume","arg","re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic","n","e38478","re-frame.router/-call-post-event-callbacks","callback-fn","re-frame.router/remove-post-event-callback","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","re-frame.router/-add-event","re-frame.events/handle","vec__38460","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","vec__38468","action-fn","cljs.core/pop","cljs.core/empty?","re-frame.router/-process-1st-event-in-queue","re-frame.router/dispatch","cljs.core/PROTOCOL_SENTINEL","this__4161__auto__","writer__4162__auto__","opt__4163__auto__","cljs.core/-write","re-frame.router/EventQueue","cljs.core/contains?","re-frame.router/later-fns","re-frame.router/purge","re-frame.router/-pause","re-frame.router/-run-next-tick","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2","re-frame.router/push","new-trace__38173__auto__","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","cljs.core.update.cljs$core$IFn$_invoke$arity$4","cljs.core/merge","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","cljs.core/keys","cljs.core/some","cljs.core/meta","temp__5455__auto__","G__38454"],"sourcesContent":["(ns re-frame.router\n  (:require [re-frame.events  :refer [handle]]\n            [re-frame.interop :refer [after-render empty-queue next-tick]]\n            [re-frame.loggers :refer [console]]\n            [re-frame.trace   :as trace :include-macros true]))\n\n\n;; -- Router Loop ------------------------------------------------------------\n;;\n;; A call to \"re-frame.core/dispatch\" places an event on a queue for processing.\n;; A short time later, the handler registered to handle this event will be run.\n;; What follows is the implementation of this process.\n;;\n;; The task is to process queued events in a perpetual loop, one after\n;; the other, FIFO, calling the registered event-handler for each, being idle when\n;; there are no events, and firing up when one arrives.\n;;\n;; But browsers only have a single thread of control and we must be\n;; careful to not hog the CPU. When processing events one after another, we\n;; must regularly hand back control to the browser, so it can redraw, process\n;; websockets, etc. But not too regularly! If we are in a de-focused browser\n;; tab, our app will be CPU throttled. Each time we get back control, we have\n;; to process all queued events, or else something like a bursty websocket\n;; (producing events) might overwhelm the queue. So there's a balance.\n;;\n;; The processing/handling of an event happens \"asynchronously\" sometime after\n;; that event was enqueued via \"dispatch\". The original implementation of this router loop\n;; used `core.async`. As a result, it was fairly simple, and it mostly worked,\n;; but it did not give enough control. So now we hand-roll our own,\n;; finite-state-machine and all.\n;;\n;; In what follows, the strategy is this:\n;;   - maintain a FIFO queue of `dispatched` events.\n;;   - when a new event arrives, \"schedule\" processing of this queue using\n;;     goog.async.nextTick, which means it will happen \"very soon\".\n;;   - when processing events, one after the other, do ALL the currently\n;;     queued events. Don't stop. Don't yield to the browser. Hog that CPU.\n;;   - but if any new events are dispatched during this cycle of processing,\n;;     don't do them immediately. Leave them queued. Yield first to the browser,\n;;     and do these new events in the next processing cycle. That way we drain\n;;     the queue up to a point, but we never hog the CPU forever. In\n;;     particular, we handle the case where handling one event will beget\n;;     another event. The freshly begotten event will be handled next cycle,\n;;     with yielding in-between.\n;;   - In some cases, an event should not be handled until after the GUI has been\n;;     updated, i.e., after the next Reagent animation frame. In such a case,\n;;     the event should be dispatched with :flush-dom metadata like this:\n;;       (dispatch ^:flush-dom [:event-id other params])\n;;     Such an event will temporarily block all further processing because\n;;     events are processed sequentially: we handle one event completely\n;;     before we handle the ones behind it.\n;;\n;; Implementation notes:\n;;   - queue processing can be in a number of states: scheduled, running, paused\n;;     etc. So it is modeled as a Finite State Machine.\n;;     See \"-fsm-trigger\" (below) for the states and transitions.\n;;   - the scheduling is done via \"goog.async.nextTick\" which is pretty quick\n;;   - when the event has :flush-dom metadata we schedule via\n;;       \"reagent.core.after-render\"\n;;     which will run event processing after the next Reagent animation frame.\n;;\n\n;; Events can have metadata which says to pause event processing.\n;; event metadata -> \"run later\" functions\n(def later-fns\n  {:flush-dom (fn [f] (after-render #(next-tick f)))   ;; one tick after the end of the next annimation frame\n   :yield     next-tick})               ;; almost immediately\n\n\n;; Event Queue Abstraction\n(defprotocol IEventQueue\n\n  ;; -- API\n  (push [this event])\n  (add-post-event-callback [this id callack])\n  (remove-post-event-callback [this f])\n  (purge [this])\n\n  ;; -- Implementation via a Finite State Machine\n  (-fsm-trigger [this trigger arg])\n\n  ;; -- Finite State Machine actions\n  (-add-event [this event])\n  (-process-1st-event-in-queue [this])\n  (-run-next-tick [this])\n  (-run-queue [this])\n  (-exception [this ex])\n  (-pause [this later-fn])\n  (-resume [this])\n  (-call-post-event-callbacks [this event]))\n\n\n;; Concrete implementation of IEventQueue\n(deftype EventQueue [#?(:cljs ^:mutable fsm-state               :clj ^:volatile-mutable fsm-state)\n                     #?(:cljs ^:mutable queue                   :clj ^:volatile-mutable queue)\n                     #?(:cljs ^:mutable post-event-callback-fns :clj ^:volatile-mutable post-event-callback-fns)]\n  IEventQueue\n\n  ;; -- API ------------------------------------------------------------------\n\n  (push [this event]         ;; presumably called by dispatch\n    (-fsm-trigger this :add-event event))\n\n  ;; register a callback function which will be called after each event is processed\n  (add-post-event-callback [_ id callback-fn]\n    (if (contains? post-event-callback-fns id)\n      (console :warn \"re-frame: overwriting existing post event call back with id:\" id))\n    (->> (assoc post-event-callback-fns id callback-fn)\n         (set! post-event-callback-fns)))\n\n  (remove-post-event-callback [_ id]\n    (if-not (contains? post-event-callback-fns id)\n      (console :warn \"re-frame: could not remove post event call back with id:\" id)\n      (->> (dissoc post-event-callback-fns id)\n           (set! post-event-callback-fns))))\n\n  (purge [_]\n    (set! queue empty-queue))\n\n  ;; -- FSM Implementation ---------------------------------------------------\n\n  (-fsm-trigger\n    [this trigger arg]\n\n    ;; The following \"case\" implements the Finite State Machine.\n    ;; Given a \"trigger\", and the existing FSM state, it computes the\n    ;; new FSM state and the transition action (function).\n\n    (trace/with-trace {:op-type ::fsm-trigger}\n      (let [[new-fsm-state action-fn]\n            (case [fsm-state trigger]\n\n              ;; You should read the following \"case\" as:\n              ;; [current-FSM-state trigger] -> [new-FSM-state action-fn]\n              ;;\n              ;; So, for example, the next line should be interpreted as:\n              ;; if you are in state \":idle\" and a trigger \":add-event\"\n              ;; happens, then move the FSM to state \":scheduled\" and execute\n              ;; that two-part \"do\" function.\n              [:idle :add-event] [:scheduled #(do (-add-event this arg)\n                                                  (-run-next-tick this))]\n\n              ;; State: :scheduled  (the queue is scheduled to run, soon)\n              [:scheduled :add-event] [:scheduled #(-add-event this arg)]\n              [:scheduled :run-queue] [:running #(-run-queue this)]\n\n              ;; State: :running (the queue is being processed one event after another)\n              [:running :add-event] [:running #(-add-event this arg)]\n              [:running :pause] [:paused #(-pause this arg)]\n              [:running :exception] [:idle #(-exception this arg)]\n              [:running :finish-run] (if (empty? queue)     ;; FSM guard\n                                       [:idle]\n                                       [:scheduled #(-run-next-tick this)])\n\n              ;; State: :paused (:flush-dom metadata on an event has caused a temporary pause in processing)\n              [:paused :add-event] [:paused #(-add-event this arg)]\n              [:paused :resume] [:running #(-resume this)]\n\n              (throw (ex-info (str \"re-frame: router state transition not found. \" fsm-state \" \" trigger)\n                              {:fsm-state fsm-state, :trigger trigger})))]\n\n        ;; The \"case\" above computed both the new FSM state, and the action. Now, make it happen.\n\n        (trace/merge-trace! {:operation [fsm-state trigger]\n                             :tags      {:current-state fsm-state\n                                         :new-state     new-fsm-state}})\n        (set! fsm-state new-fsm-state)\n        (when action-fn (action-fn)))))\n\n  (-add-event\n    [_ event]\n    (set! queue (conj queue event)))\n\n  (-process-1st-event-in-queue\n    [this]\n    (let [event-v (peek queue)]\n      (try\n        (handle event-v)\n        (set! queue (pop queue))\n        (-call-post-event-callbacks this event-v)\n        (catch #?(:cljs :default :clj Exception) ex\n          (-fsm-trigger this :exception ex)))))\n\n  (-run-next-tick\n    [this]\n    (next-tick #(-fsm-trigger this :run-queue nil)))\n\n  ;; Process all the events currently in the queue, but not any new ones.\n  ;; Be aware that events might have metadata which will pause processing.\n  (-run-queue\n    [this]\n    (loop [n (count queue)]\n      (if (zero? n)\n        (-fsm-trigger this :finish-run nil)\n        (if-let [later-fn (some later-fns (-> queue peek meta keys))]  ;; any metadata which causes pausing?\n          (-fsm-trigger this :pause later-fn)\n          (do (-process-1st-event-in-queue this)\n              (recur (dec n)))))))\n\n  (-exception\n    [this ex]\n    (purge this)   ;; purge the queue\n    (throw ex))\n\n  (-pause\n    [this later-fn]\n    (later-fn #(-fsm-trigger this :resume nil)))\n\n  (-call-post-event-callbacks\n    [_ event-v]\n    (doseq [callback (vals post-event-callback-fns)]\n      (callback event-v queue)))\n\n  (-resume\n    [this]\n    (-process-1st-event-in-queue this)  ;; do the event which paused processing\n    (-run-queue this)))                 ;; do the rest of the queued events\n\n\n;; ---------------------------------------------------------------------------\n;; Event Queue\n;; When \"dispatch\" is called, the event is added into this event queue.  Later,\n;;  the queue will \"run\" and the event will be \"handled\" by the registered function.\n;;\n(def event-queue (->EventQueue :idle empty-queue {}))\n\n\n;; ---------------------------------------------------------------------------\n;; Dispatching\n;;\n\n(defn dispatch\n  \"Enqueue `event` for processing by event handling machinery.\n\n  `event` is a vector of length >= 1. The 1st element identifies the kind of event.\n\n  Note: the event handler is not run immediately - it is not run\n  synchronously. It will likely be run 'very soon', although it may be\n  added to the end of a FIFO queue which already contain events.\n\n  Usage:\n     (dispatch [:order-pizza {:supreme 2 :meatlovers 1 :veg 1})\"\n  [event]\n  (if (nil? event)\n      (throw (ex-info \"re-frame: you called \\\"dispatch\\\" without an event vector.\" {}))\n      (push event-queue event))\n  nil)                                           ;; Ensure nil return. See https://github.com/Day8/re-frame/wiki/Beware-Returning-False\n\n\n(defn dispatch-sync\n  \"Synchronously (immediately) process `event`. Do not queue.\n\n  Generally, don't use this. Instead use `dispatch`. It is an error\n  to use `dispatch-sync` within an event handler.\n\n  Useful when any delay in processing is a problem:\n     1. the `:on-change` handler of a text field where we are expecting fast typing.\n     2  when initialising your app - see 'main' in todomvc examples\n     3. in a unit test where we don't want the action 'later'\n\n  Usage:\n     (dispatch-sync [:sing :falsetto 634])\"\n  [event-v]\n  (handle event-v)\n  (-call-post-event-callbacks event-queue event-v)  ;; slightly ugly hack. Run the registered post event callbacks.\n  nil)                                              ;; Ensure nil return. See https://github.com/Day8/re-frame/wiki/Beware-Returning-False\n"]}