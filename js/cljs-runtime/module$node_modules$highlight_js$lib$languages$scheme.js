shadow$provide.module$node_modules$highlight_js$lib$languages$scheme=function(d,f,c,b,e){b.exports=function(a){var b={className:"literal",begin:"(#t|#f|#\\\\[^\\(\\)\\[\\]\\{\\}\",'`;#|\\\\\\s]+|#\\\\.)"},c={className:"number",variants:[{begin:"(\\-|\\+)?\\d+([./]\\d+)?",relevance:0},{begin:"(\\-|\\+)?\\d+([./]\\d+)?[+\\-](\\-|\\+)?\\d+([./]\\d+)?i",relevance:0},{begin:"#b[0-1]+(/[0-1]+)?"},{begin:"#o[0-7]+(/[0-7]+)?"},{begin:"#x[0-9a-f]+(/[0-9a-f]+)?"}]},d=a.QUOTE_STRING_MODE;a=[a.COMMENT(";","$",
{relevance:0}),a.COMMENT("#\\|","\\|#")];var e={begin:"[^\\(\\)\\[\\]\\{\\}\",'`;#|\\\\\\s]+",relevance:0},f={className:"symbol",begin:"'[^\\(\\)\\[\\]\\{\\}\",'`;#|\\\\\\s]+"},g={endsWithParent:!0,relevance:0},m={variants:[{begin:/'/},{begin:"`"}],contains:[{begin:"\\(",end:"\\)",contains:["self",b,d,c,e,f]}]},l={className:"name",begin:"[^\\(\\)\\[\\]\\{\\}\",'`;#|\\\\\\s]+",lexemes:"[^\\(\\)\\[\\]\\{\\}\",'`;#|\\\\\\s]+",keywords:{"builtin-name":"case-lambda call/cc class define-class exit-handler field import inherit init-field interface let*-values let-values let/ec mixin opt-lambda override protect provide public rename require require-for-syntax syntax syntax-case syntax-error unit/sig unless when with-syntax and begin call-with-current-continuation call-with-input-file call-with-output-file case cond define define-syntax delay do dynamic-wind else for-each if lambda let let* let-syntax letrec letrec-syntax map or syntax-rules ' * + , ,@ - ... / ; \x3c \x3c\x3d \x3d \x3d\x3e \x3e \x3e\x3d ` abs acos angle append apply asin assoc assq assv atan boolean? caar cadr call-with-input-file call-with-output-file call-with-values car cdddar cddddr cdr ceiling char-\x3einteger char-alphabetic? char-ci\x3c\x3d? char-ci\x3c? char-ci\x3d? char-ci\x3e\x3d? char-ci\x3e? char-downcase char-lower-case? char-numeric? char-ready? char-upcase char-upper-case? char-whitespace? char\x3c\x3d? char\x3c? char\x3d? char\x3e\x3d? char\x3e? char? close-input-port close-output-port complex? cons cos current-input-port current-output-port denominator display eof-object? eq? equal? eqv? eval even? exact-\x3einexact exact? exp expt floor force gcd imag-part inexact-\x3eexact inexact? input-port? integer-\x3echar integer? interaction-environment lcm length list list-\x3estring list-\x3evector list-ref list-tail list? load log magnitude make-polar make-rectangular make-string make-vector max member memq memv min modulo negative? newline not null-environment null? number-\x3estring number? numerator odd? open-input-file open-output-file output-port? pair? peek-char port? positive? procedure? quasiquote quote quotient rational? rationalize read read-char real-part real? remainder reverse round scheme-report-environment set! set-car! set-cdr! sin sqrt string string-\x3elist string-\x3enumber string-\x3esymbol string-append string-ci\x3c\x3d? string-ci\x3c? string-ci\x3d? string-ci\x3e\x3d? string-ci\x3e? string-copy string-fill! string-length string-ref string-set! string\x3c\x3d? string\x3c? string\x3d? string\x3e\x3d? string\x3e? string? substring symbol-\x3estring symbol? tan transcript-off transcript-on truncate values vector vector-\x3elist vector-fill! vector-length vector-ref vector-set! with-input-from-file with-output-to-file write write-char zero?"}};
l={variants:[{begin:"\\(",end:"\\)"},{begin:"\\[",end:"\\]"}],contains:[{begin:/lambda/,endsWithParent:!0,returnBegin:!0,contains:[l,{begin:/\(/,end:/\)/,endsParent:!0,contains:[e]}]},l,g]};g.contains=[b,c,d,e,f,m,l].concat(a);return{illegal:/\S/,contains:[{className:"meta",begin:"^#!",end:"$"},c,d,f,m,l].concat(a)}}}
//# sourceMappingURL=module$node_modules$highlight_js$lib$languages$scheme.js.map
