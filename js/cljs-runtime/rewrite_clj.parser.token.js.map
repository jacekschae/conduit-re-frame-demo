{"version":3,"file":"rewrite_clj.parser.token.js","sources":["rewrite_clj/parser/token.cljs"],"mappings":";;;;;AAMA,kCAAA,lCAAOU,4EAAQR,EAAEE;AACf,qCAAIF,9BAAwB,AAAA,KAAAC,oCAASC,hDADvC;;AAGA,kDAAA,lDAAgBS,4GAAkBK;AAAlC,AAAA;;AAGA,iDAAA,jDAAgBI,0GAAiBJ;AAC/B,SAAI,OAAA,NAAYA,VADlB,0BAEM,OAAA,NAAYA;;gGAKHZ,OAAOe,vGADtB,4CAAA,5CAAOT;AAEL,4CAAA,WAAAL,hDAACC,8BACAF,rCAHH;AAEE,AAEE,SAAK,AAACc,cAAI,6FAAAb,6CAAAA,zIAACc,+CAAAA,iEAAAA,kDACN,iDAAAd,jDAACkB;;;0GAMKnB,1GADf,iDAAA,jDAAOD;AAAP,AAEE,IAAMa,IAAE,CAACU,6DAAAA,qEAAAA,VAAYtB,iDAAAA;AACnB,OAACI,gCAAOQ,EAAE,qHAAA,nHAAI,EAAK,OAAA,NAAYA,cACnB,AAACN,0CAAiBN,OAAOO,7GAFvC;;AAOF;;;;sFAGeP,OAAOa,MAAML,5DAH5B,vCAAOe;AAIL,IAAMd,SAAO,AAACH,iDAECU,PADAhB,vDALjB;AAIE,AAGE,GAAI,AAACiB,uBAAOR;AACV,QAACS,4DAAAA,gFAAAA,tBAAgBL,4DAAAA,tDAAML,4DAAAA;;AACvB,IAAML,IAAE,AAACC,gCAAOI,aAAaC;AAA7B,eAEI,CAACE,+DAAAA,kEAAAA,LAAcR,8CAAAA,1LADjB,IAAAiB;IAAAC,WAEElB;AAFF,AAAA,8HAAAiB,SAAAC,kDAAAD,SAAAC,1LAACH,4DAAAA,+EAAAA;;;AAOT;;;uCAAA,vCAAMR,sFAESV;AAFf,AAGE,IAAMK,aAAW,CAACiB,6DAAAA,qEAAAA,VAAYtB,iDAAAA;4EAEP,AAACD,+CAAsBC,vHADxCG,IAAE,AAACC,gCAAOC,WAAW,EAAI,gBAAA,fAAYA,6EAEpB,AAACC,0CAAiBN,OAAOO;IAC1CZ,IAAE,CAACgB,+DAAAA,kEAAAA,LAAcR,8CAAAA;AACrB,GAAI,cAAAT,bAASC,JALf;AAMI,OAAC4B,qCAAYvB,OAAOL,EAAEQ;;AACtB,QAACe,4DAAAA,iEAAAA,PAAgBvB,6CAAAA,3CAAEQ,6CAAAA","names":["cljs.core/Symbol","v","a","goog.string/StringBuffer","b","rewrite-clj.parser.token/read-to-char-boundary","reader","p1__28633#","rewrite-clj.reader/read-until","s","rewrite-clj.parser.token/join-2","first-char","rewrite-clj.parser.token/read-to-boundary","rewrite-clj.parser.token/allowed-default?","value-string","suffix","rewrite-clj.parser.token/parse-token","rewrite-clj.reader/read-string","c","value","cljs.core/not","allowed?","rewrite-clj.parser.token/allowed-suffix?","cljs.core/empty?","rewrite-clj.node/token-node","rewrite-clj.reader/whitespace-or-boundary?","G__28663","G__28664","rewrite-clj.reader/read-char","rewrite-clj.parser.token/symbol-node"],"sourcesContent":["(ns rewrite-clj.parser.token\n  (:require [rewrite-clj.node :as node]\n            [rewrite-clj.reader :as r]\n            [goog.string :as gstring]))\n\n\n(defn- join-2 [a b]\n  (-> a gstring/StringBuffer. (.append b) .toString))\n\n(defn- ^boolean allowed-default? [c]\n  false)\n\n(defn- ^boolean allowed-suffix? [c]\n  (or (identical? c \\')\n      (identical? c \\:)))\n\n\n\n(defn- read-to-boundary\n  [^not-native reader allowed?]\n  (r/read-until\n   reader\n   #(and (not (allowed? %))\n         (r/whitespace-or-boundary? %))))\n\n\n\n\n(defn- read-to-char-boundary\n  [^not-native reader]\n  (let [c (r/read-char reader)]\n    (join-2 c (if (not (identical? c \\\\))\n                (read-to-boundary reader allowed-default?)\n                \"\"))))\n\n\n\n(defn- symbol-node\n  \"Symbols allow for certain boundary characters that have\n   to be handled explicitly.\"\n  [^not-native reader value value-string]\n  (let [suffix (read-to-boundary\n                 reader\n                 allowed-suffix?)]\n    (if (empty? suffix)\n      (node/token-node value value-string)\n      (let [s (join-2 value-string suffix)]\n        (node/token-node\n          (r/read-string s)\n          s)))))\n\n\n\n\n(defn parse-token\n  \"Parse a single token.\"\n  [^not-native reader]\n  (let [first-char (r/read-char reader)\n        s (join-2 first-char (if (identical? first-char \\\\)\n                         (read-to-char-boundary reader)\n                         (read-to-boundary reader allowed-default?)))\n        v (r/read-string s)]\n    (if (symbol? v)\n      (symbol-node reader v s)\n      (node/token-node v s))))\n"]}