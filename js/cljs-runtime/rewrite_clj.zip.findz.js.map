{"version":3,"file":"rewrite_clj.zip.findz.js","sources":["rewrite_clj/zip/findz.cljs"],"mappings":"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","names":["zloc","p?","rewrite-clj.zip.findz/find-depth-first","rewrite_clj.zip.findz.find_tag.cljs$core$IFn$_invoke$arity$3","rewrite-clj.zip.move/right","t","and__3911__auto__","r","row","f","rewrite-clj.zip.findz/find-tag-by-pos","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","v","rewrite-clj.zip.base/sexpr","rewrite-clj.zip.findz/in-range?","p1__28931#","clojure.zip/node","cljs.core/meta","pos","cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2","cljs.core/complement","p1__28939#","rewrite_clj.zip.findz.find.cljs$core$IFn$_invoke$arity$3","rewrite-clj.zip.base/tag","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","rewrite_clj.zip.findz.find_next_tag.cljs$core$IFn$_invoke$arity$3","rewrite_clj.zip.findz.find_next_value.cljs$core$IFn$_invoke$arity$3","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","rewrite_clj.zip.findz.find_token.cljs$core$IFn$_invoke$arity$3","rewrite_clj.zip.findz.find_last_by_pos.cljs$core$IFn$_invoke$arity$3","p1__28948#","additional","node","cljs.core/constantly","rewrite-clj.zip.findz/find-next-depth-first","end-row","p1__28968#","var_args","G__28977","rewrite-clj.zip.findz/find-next-value","js/Error","cljs.core/first","G__28955","rewrite-clj.zip.findz/find-token","cljs.core/last","c","col","G__28944","rewrite-clj.zip.findz/find-next-tag","cljs.core/iterate","G__28961","rewrite-clj.zip.findz/find-next-token","G__28933","rewrite-clj.zip.findz/find-last-by-pos","G__28929","rewrite-clj.zip.findz/find","cljs.core/set?","clojure.zip/next","rewrite_clj.zip.findz.find_value.cljs$core$IFn$_invoke$arity$3","p1__28908#","G__28936","rewrite-clj.zip.findz/find-next","end-col","G__28970","rewrite-clj.zip.findz/find-value","G__28941","rewrite-clj.zip.findz/find-tag","rewrite-clj.zip.findz/tag-predicate","p__28920","p__28921","map__28922","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","map__28923","rewrite_clj.zip.findz.tag_predicate.cljs$core$IFn$_invoke$arity$variadic","cljs.core.take_while.cljs$core$IFn$_invoke$arity$2","rewrite-clj.zip.move/end?","rewrite_clj.zip.findz.find_next_token.cljs$core$IFn$_invoke$arity$3","rewrite_clj.zip.findz.find_next.cljs$core$IFn$_invoke$arity$3","G__28937","args__4502__auto__","len__4499__auto__","i__4500__auto__","argseq__4503__auto__","cljs.core/IndexedSeq","p__28911","vec__28912","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","seq28909","G__28910","cljs.core/next","self__4486__auto__","cljs.core/identity","rewrite-clj.zip.move/next"],"sourcesContent":["(ns rewrite-clj.zip.findz\n  (:refer-clojure :exclude [find])\n  (:require [rewrite-clj.zip.base :as base]\n            [rewrite-clj.zip.move :as m]\n            [rewrite-clj.node :as node]\n            [rewrite-clj.zip.whitespace :as ws]\n            [clojure.zip :as z]))\n\n;; ## Helpers\n\n(defn- tag-predicate\n  [t & [additional]]\n  (if additional\n    (fn [node]\n      (and (= (base/tag node) t)\n           (additional node)))\n    #(= (base/tag %) t)))\n\n\n(defn in-range? [{:keys [row col end-row end-col]} {r :row c :col}]\n  (and (>= r row)\n       (<= r end-row)\n       (if (= r row) (>= c col) true)\n       (if (= r end-row) (<= c end-col) true)))\n\n\n;; ## Find Operations\n\n(defn find\n  \"Find node satisfying the given predicate by repeatedly\n   applying the given movement function to the initial zipper\n   location.\"\n  ([zloc p?]\n   (find zloc m/right p?))\n  ([zloc f p?]\n   (->> zloc\n        (iterate f)\n        (take-while identity)\n        (take-while (complement m/end?))\n        (drop-while (complement p?))\n        (first))))\n\n\n\n(defn find-last-by-pos\n  \"Find last node (if more than one node) that is in range of pos and\n  satisfying the given predicate depth first from initial zipper\n  location.\"\n  ([zloc pos] (find-last-by-pos zloc pos (constantly true)))\n  ([zloc pos p?]\n   (->> zloc\n        (iterate z/next)\n        (take-while identity)\n        (take-while (complement m/end?))\n        (filter #(and (p? %)\n                      (in-range? (-> % z/node meta) pos)))\n        last)))\n\n\n(defn find-depth-first\n  \"Find node satisfying the given predicate by traversing\n   the zipper in a depth-first way.\"\n  [zloc p?]\n  (find zloc m/next p?))\n\n\n(defn find-next\n  \"Find node other than the current zipper location matching\n   the given predicate by applying the given movement function\n   to the initial zipper location.\"\n  ([zloc p?]\n   (find-next zloc m/right p?))\n  ([zloc f p?]\n   (some-> zloc f (find f p?))))\n\n(defn find-next-depth-first\n  \"Find node other than the current zipper location matching\n   the given predicate by traversing the zipper in a\n   depth-first way.\"\n  [zloc p?]\n  (find-next zloc m/next p?))\n\n(defn find-tag\n  \"Find node with the given tag by repeatedly applying the given\n   movement function to the initial zipper location.\"\n  ([zloc t]\n   (find-tag zloc m/right t))\n  ([zloc f t]\n   (find zloc f #(= (base/tag %) t))))\n\n(defn find-next-tag\n  \"Find node other than the current zipper location with the\n   given tag by repeatedly applying the given movement function to\n   the initial zipper location.\"\n  ([zloc t]\n   (find-next-tag zloc m/right t))\n  ([zloc f t]\n   (->> (tag-predicate t)\n        (find-next zloc f))))\n\n\n(defn find-tag-by-pos\n  \"Find node with the given tag and pos depth-first from initial zipper location.\"\n  ([zloc pos t]\n   (find-last-by-pos zloc pos #(= (base/tag %) t))))\n\n\n\n(defn find-token\n  \"Find token node matching the given predicate by applying the\n   given movement function to the initial zipper location, defaulting\n   to `right`.\"\n  ([zloc p?]\n   (find-token zloc m/right p?))\n  ([zloc f p?]\n   (->> (tag-predicate :token p?)\n        (find zloc f))))\n\n(defn find-next-token\n  \"Find next token node matching the given predicate by applying the\n   given movement function to the initial zipper location, defaulting\n   to `right`.\"\n  ([zloc p?]\n   (find-next-token zloc m/right p?))\n  ([zloc f p?]\n   (find-token (f zloc) f p?)))\n\n(defn find-value\n  \"Find token node whose value matches the given one by applying the\n   given movement function to the initial zipper location, defaulting\n   to `right`.\"\n  ([zloc v]\n   (find-value zloc m/right v))\n  ([zloc f v]\n   (let [p? (if (set? v)\n              (comp v base/sexpr)\n              #(= (base/sexpr %) v))]\n     (find-token zloc f p?))))\n\n(defn find-next-value\n  \"Find next token node whose value matches the given one by applying the\n   given movement function to the initial zipper location, defaulting\n   to `right`.\"\n  ([zloc v]\n   (find-next-value zloc m/right v))\n  ([zloc f v]\n   (find-value (f zloc) f v)))\n"]}