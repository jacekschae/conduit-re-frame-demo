{"version":3,"file":"rewrite_clj.node.protocols.js","sources":["rewrite_clj/node/protocols.cljs"],"mappings":"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","names":["js/Error","rewrite-clj.node.protocols/tag","_","goog.object/set","rewrite-clj.node.protocols/Node","G__27997","G__27998","G__27999","G__28000","rewrite-clj.node.protocols/printable-only?","G__28001","G__28002","G__28003","rewrite-clj.node.protocols/sexpr","G__28004","G__28005","G__28006","rewrite-clj.node.protocols/length","G__28007","G__28008","G__28009","rewrite-clj.node.protocols/string","G__28010","G__28011","this","rewrite-clj.node.protocols/assert-single-sexpr","cljs.core.reduce.cljs$core$IFn$_invoke$arity$2","cljs.core/+","cljs.core.map.cljs$core$IFn$_invoke$arity$2","nodes","rewrite-clj.node.protocols/assert-sexpr-count","c","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/count","rewrite-clj.node.protocols/InnerNode","G__28035","rewrite-clj.node.protocols/inner?","G__28036","G__28037","G__28039","rewrite-clj.node.protocols/children","G__28040","G__28041","G__28042","rewrite-clj.node.protocols/replace-children","G__28043","G__28044","rewrite-clj.node.protocols/sum-lengths","rewrite-clj.node.protocols/concat-strings","cljs.core/str","rewrite-clj.node.protocols/sexprs","rewrite-clj.node.protocols/child-sexprs","node","x__4211__auto__","m__4212__auto__","rewrite-clj/node.protocols.inner?","goog/typeOf","cljs.core/missing-protocol","rewrite-clj/node.protocols.children","rewrite-clj/node.protocols.replace-children","rewrite-clj/node.protocols.tag","rewrite-clj/node.protocols.printable-only?","rewrite-clj/node.protocols.sexpr","rewrite-clj/node.protocols.length","rewrite-clj/node.protocols.string","children","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","rewrite-clj.node.protocols/coerce","rewrite-clj/node.protocols.coerce","rewrite-clj.node.protocols/NodeCoerceable"],"sourcesContent":["(ns rewrite-clj.node.protocols\n  (:require [clojure.string :as s]))\n\n\n\n(defprotocol Node\n  \"Protocol for EDN/Clojure nodes.\"\n  (tag [_]\n    \"Keyword representing the type of the node.\")\n  (printable-only? [_]\n    \"Return true if the node cannot be converted to an s-expression\n     element.\")\n  (sexpr [_]\n    \"Convert node to s-expression.\")\n  (length [_]\n    \"Get number of characters for the string version of this node.\")\n  (string [_]\n    \"Convert node to printable string.\"))\n\n\n(extend-protocol Node\n  object\n  (tag [_] :unknown)\n  (printable-only? [_] false)\n  (sexpr [this] this)\n  (length [this] (count (string this)))\n  (string [this] (pr-str this)))\n\n(defn sexprs\n  \"Given a seq of nodes, convert those that represent s-expressions\n   to the respective forms.\"\n  [nodes]\n  (->> nodes\n       (remove printable-only?)\n       (map sexpr)))\n\n(defn sum-lengths\n  \"Sum up lengths of the given nodes.\"\n  [nodes]\n  (reduce + (map length nodes)))\n\n(defn concat-strings\n  \"Convert nodes to strings and concatenate them.\"\n  [nodes]\n  (reduce str (map string nodes)))\n\n\n(defprotocol InnerNode\n  \"Protocol for non-leaf EDN/Clojure nodes.\"\n  (inner? [_]\n    \"Check whether the node can contain children.\")\n  (children [_]\n    \"Get child nodes.\")\n  (replace-children [_ children]\n    \"Replace the node's children.\"))\n\n(extend-protocol InnerNode\n  object\n  (inner? [_] false)\n  (children [_]\n    (throw (js/Error. \"UnsupportedOperationException\")))\n  (replace-children [_ _]\n    (throw (js/Error. \"UnsupportedOperationException\"))))\n\n(defn child-sexprs\n  \"Get all child s-expressions for the given node.\"\n  [node]\n  (if (inner? node)\n    (sexprs (children node))))\n\n\n(defprotocol NodeCoerceable\n  \"Protocol for values that can be coerced to nodes.\"\n  (coerce [_]))\n\n\n;; TODO: Need to handle format !!!!\n;; (defn- node->string\n;;   [node]\n;;   (let [n (str (if (printable-only? node)\n;;                  (pr-str (string node))\n;;                  (string node)))\n;;         n' (if (re-find #\"\\n\" n)\n;;              (->> (s/replace n #\"\\r?\\n\" \"\\n  \")\n;;                   (format \"%n  %s%n\"))\n;;              (str \" \" n))]\n;;     (format \"<%s:%s>\" (name (tag node)) n')))\n\n\n;; (defn write-node\n;;   [writer node]\n;;   (str writer (node->string node)))\n\n\n;; ## Helpers\n\n(defn assert-sexpr-count\n  [nodes c]\n  (assert\n    (= (count (remove printable-only? nodes)) c)\n   (str \"can only contain\" c \" non-whitespace form(s).\")))\n\n(defn assert-single-sexpr\n  [nodes]\n  (assert-sexpr-count nodes 1))\n"]}