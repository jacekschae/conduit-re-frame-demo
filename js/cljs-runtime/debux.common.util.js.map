{"version":3,"file":"debux.common.util.js","sources":["debux/common/util.cljc"],"mappings":"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","names":["debux.common.util/sequential-zip","root","clojure.zip/zipper","cljs.core/sequential?","cljs.core/identity","x","children","cljs.core/vector?","cljs.core/vec","debux.common.util/right-or-next","loc","temp__5455__auto__","right","clojure.zip/right","clojure.zip/node","rightmost","clojure.zip/down","clojure.zip/rightmost","clojure.zip/next","debux.common.util/auto-gensym-pattern","debux.common.util/anon-gensym-pattern","debux.common.util/named-gensym-pattern","debux.common.util/anon-param-pattern","debux.common.util/form-tree-seq","form","cljs.core/tree-seq","cljs.core/seq","debux.common.util/with-gensyms-names","mapping","gen-name","result","name","cljs.core/contains?","cljs.core/iterate","cljs.core/inc","p1__27843#","cljs.core.map.cljs$core$IFn$_invoke$arity$2","p1__27844#","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","cljs.core/first","name-for","sym-name","groups","cljs.core/re-matches","cljs.core/second","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","new-name","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","p1__27845#","cljs.core/Symbol","cljs.core/namespace","cljs.core/name","p__27848","map__27849","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","debux.common.util/with-symbols-names","context","refers","aliases","state","sym","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","p1__27846#","and__3911__auto__","debux.common.util/tidy-macroexpanded-form","clojure.zip/end?","clojure.zip/root","clojure.zip/edit","cljs.core.symbol.cljs$core$IFn$_invoke$arity$1","cljs.core.get.cljs$core$IFn$_invoke$arity$3","debux.common.util/send-form!","re-frame.trace/is-trace-enabled?","new-trace__26457__auto__","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","cljs.core.update.cljs$core$IFn$_invoke$arity$4","re-frame.trace/*current-trace*","cljs.core/merge","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","debux.common.util/send-trace!","code-trace","code","cljs.core.get_in.cljs$core$IFn$_invoke$arity$3","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","debux.common.util/indent-level*","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","debux.common.util/reset-indent-level!","cljs.core/reset!","debux.common.util/print-seq-length*","debux.common.util/set-print-seq-length!","num","debux.common.util/cljs-env?","env","cljs.core/boolean","debux.common.util/lazy-seq?","coll","clojure/lang.IPending","debux.common.util/vec->map","v","cljs.core/array-map","cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic","cljs.core.sequence.cljs$core$IFn$_invoke$arity$1","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core/List","elm","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","debux.common.util/replace-&","clojure.walk/postwalk-replace","debux.common.util/take-n-if-seq","n","cljs.core/seq?","cljs.core.take.cljs$core$IFn$_invoke$arity$2","or__3922__auto__","cljs.core/deref","debux.common.util/truncate","s","cljs.core/count","debux.common.util/make-bars-","times","cljs.core/str","cljs.core.repeat.cljs$core$IFn$_invoke$arity$2","debux.common.util/make-bars","cljs.core/memoize","debux.common.util/prepend-bars","line","indent-level","debux.common.util/print-form-with-indent","cljs.core.println.cljs$core$IFn$_invoke$arity$variadic","cljs.core/flush","var_args","args__4502__auto__","len__4499__auto__","i__4500__auto__","argseq__4503__auto__","cljs.core/IndexedSeq","debux.common.util/form-header","p__27858","vec__27859","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","seq27856","G__27857","cljs.core/next","self__4486__auto__","msg","debux.common.util/prepend-blanks","lines","p1__27865#","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","debux.common.util/pprint-result-with-indent","res","sb__4430__auto__","js/goog.string.StringBuffer","*print-newline*27867","cljs.core/*print-newline*","*print-fn*27868","cljs.core/*print-fn*","x__4431__auto__","cljs.pprint.pprint.cljs$core$IFn$_invoke$arity$1","pprint","clojure.string/trim","clojure.string.split.cljs$core$IFn$_invoke$arity$2","p1__27866#","clojure.string.join.cljs$core$IFn$_invoke$arity$2","debux.common.util/insert-blank-line","debux.common.util/parse-opts","opts","acc","f","cljs.core/empty?","cljs.core/nnext","fexpr__27871","fexpr__27872","p__27887","vec__27888","debux.common.util/quote-val","k","debux.common.util/quote-vals","m","cljs.core.into.cljs$core$IFn$_invoke$arity$2","debux.common.util/include-recur?","G__27893","fexpr__27892","fexpr__27894","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","cljs.core/set","cljs.core/flatten","debux.common.util/o-skip?","debux.common.util/spy-first","quoted-form","indent","js/Error","cljs.core/integer?","cljs.core.prn_str.cljs$core$IFn$_invoke$arity$variadic","G__27896","G__27897","debux.common.util/remove-d","debux.common.util/spy-last","G__27898","G__27899","debux.common.util/spy-comp","arg","G__27900","G__27901","debux.common.util/debux-skip-symbol?","debux.common.util/spy-first?","debux.common.util/third","d-sym","node","clojure.zip/replace","cljs.core/last"],"sourcesContent":["(ns debux.common.util\n  \"Utilities common for clojure and clojurescript\"\n  (:refer-clojure :exclude [coll?])\n  (:require [clojure.string :as str]\n            [clojure.pprint :as pp]\n            [clojure.zip :as z]\n            [clojure.walk :as walk]\n            [cljs.analyzer.api :as ana]\n            [clojure.repl :as repl]\n            [re-frame.trace :as trace]))\n\n;;; zipper\n(defn sequential-zip [root]\n  (z/zipper sequential?\n            identity\n            (fn [x children]\n              (if (vector? x) (vec children) children))\n            root))\n\n(defn right-or-next [loc]\n  (if-let [right (z/right loc)]\n    ;; in case of (... (+ a b) c) or (... a b)\n    right\n    (if (sequential? (z/node loc))\n      (let [rightmost (-> loc z/down z/rightmost)]\n        (if (sequential? (z/node rightmost))\n          ;; in case of (... (+ a (* b c)))\n          (recur rightmost)\n\n          ;; in case of (... (+ a b))\n          (-> rightmost z/next)))\n\n      ;; in case of (... a)\n      (-> loc z/next))))\n\n\n;; Tidy up macroexpansions\n\n(def auto-gensym-pattern #\"(.*)__\\d+__auto__\")              ;; form#\n(def anon-gensym-pattern #\"G__\\d+\")                         ;; (gensym)\n(def named-gensym-pattern #\"(.*?)\\d{4,}\")                   ;; (gensym 'form), must match at least 4 numbers so we don't catch symbols with trailing numbers\n(def anon-param-pattern #\"p(\\d+)__\\d+#\")                    ;; #(%1 %2 %3)\n\n(defn form-tree-seq [form]\n  (tree-seq\n    sequential?\n    seq\n    form))\n\n(defn with-gensyms-names\n  \"Reverse gensym'd names to their original source form to make them easier to read.\"\n  [form mapping]\n  (let [gen-name (fn [result name]\n                   (if-not (contains? result (str name \"#\"))\n                     (str name \"#\")\n                     (->> (iterate inc 2)\n                          (map #(str name % \"#\"))\n                          (filter #(not (contains? result %)))\n                          (first))))\n        name-for (fn [result sym-name]\n                   (if-let [groups (re-matches auto-gensym-pattern sym-name)]\n                     (gen-name result (second groups))\n                     (if (re-matches anon-gensym-pattern sym-name)\n                       (gen-name result \"gensym\")\n                       (if-let [groups (re-matches named-gensym-pattern sym-name)]\n                         (gen-name result (second groups))\n                         (if-let [groups (re-matches anon-param-pattern sym-name)]\n                           (str \"%\" (second groups)))))))]\n    (reduce (fn [result sym-name]\n              (if (contains? result sym-name)\n                result\n                (if-let [new-name (name-for result sym-name)]\n                  (assoc result sym-name new-name)\n                  result)))\n            mapping\n            (->> (form-tree-seq form)\n                 (filter #(and (symbol? %) (nil? (namespace %))))\n                 (map name)))))\n\n(defn with-symbols-names\n  \"Tidy up fully qualified names that have aliases in the existing namespace.\"\n  ;; TODO: handle FQN's other than clojure.core\n  [form {:keys [context refers aliases] :as state} mapping]\n  (reduce (fn [result sym]\n            (if (= \"clojure.core\" (namespace sym))\n              (assoc result (pr-str sym) (name sym))\n              result))\n          mapping\n          (->> (form-tree-seq form)\n               ;; TODO: use qualified-symbol? once we are on Clojure 1.9\n               (filter #(and (symbol? %) (namespace %)))))\n\n  #_(reduce (fn [result sym]\n              (let [sym-ns (namespace sym)\n                    alias  (get aliases sym-ns)\n                    refers (get refers sym-ns)]\n                (cond\n                  ; Referred symbol, or from this ns\n                  (or (= :all (:refer refers))\n                      (contains? (:refer refers) (name sym))\n                      (= (context/namespace context) sym-ns))\n                  (assoc result (names/qualified-name sym) (name sym))\n                  ; Aliased symbol\n                  alias (assoc result (names/qualified-name sym) (str alias \\/ (name sym)))\n                  :else result)))\n            mapping\n            (->> (visible-tree-seq form)\n                 (filter #(and (psi/symbol? %) (namespace %))))))\n\n(defn tidy-macroexpanded-form\n  \"Takes a macroexpanded form and tidies it up to be more readable by\n  unmapping gensyms and replacing fully qualified namespaces with aliases\n  or nothing if the function is referred.\"\n  [form state]\n  ;; Mapping is a mapping of String:String which represent symbols\n  (let [mapping (->> {}\n                     (with-gensyms-names form)\n                     (with-symbols-names form state))]\n    (loop [loc (sequential-zip form)]\n      (if (z/end? loc)\n        (z/root loc)\n        (if (symbol? (z/node loc))\n          (recur (z/next (z/edit loc (fn [sym] (symbol (get mapping (pr-str sym) sym))))))\n          (recur (z/next loc)))))))\n\n;;\n\n(defn send-form! [form]\n  (trace/merge-trace! {:tags {:form form}}))\n\n(defn send-trace! [code-trace]\n  (let [code (get-in trace/*current-trace* [:tags :code] [])]\n    ;; TODO: also capture macroexpanded form? Might be useful in some cases?\n    (trace/merge-trace!\n      {:tags {:code (conj code {:form (tidy-macroexpanded-form (:form code-trace) {}) :result (:result code-trace) :indent-level (:indent-level code-trace)})}})))\n\n;;; For internal debugging\n(defmacro d\n  \"The internal macro to debug dbg macro.\n   <form any> a form to be evaluated\"\n  [form]\n  `(let [return# ~form]\n     (println \">> dbg_:\" (pr-str '~form) \"=>\\n\" (pr-str return#) \"<<\")\n     return#))\n\n\n;;; indent-level control\n(def indent-level* (atom 1))\n\n(defn reset-indent-level! []\n  (reset! indent-level* 1))\n\n\n;;; print-seq-length\n(def print-seq-length* (atom 100))\n\n(defn set-print-seq-length! [num]\n  (reset! print-seq-length* num))\n\n\n;;; general\n(defmacro read-source [sym]\n  `(-> (repl/source ~sym)\n       with-out-str\n       read-string))\n\n(defn cljs-env? [env]\n  (boolean (:ns env)))\n\n(defn lazy-seq? [coll]\n  (instance? clojure.lang.IPending coll))\n\n(defn vec->map\n  \"Transsub-forms a vector into an array-map with key/value pairs.\n  (def a 10)\n  (def b 20)\n  (vec-map [a b :c [30 40]])\n  => {:a 10 :b 20 ::c :c :[30 40] [30 40]}\"\n  [v]\n  (apply array-map\n         (mapcat (fn [elm]\n                   `[~(keyword (str elm)) ~elm])\n                 v)))\n\n(defn replace-& [v]\n  (walk/postwalk-replace {'& ''&} v))\n\n\n\n;;; symbol with namespace\n#?(:clj\n   (defn- var->symbol [v]\n     (let [m    (meta v)\n           ns   (str (ns-name (:ns m)))\n           name (str (:name m))]\n       (symbol ns name))))\n\n#?(:clj\n   (defn- ns-symbol-for-clj [sym]\n     (if-let [v (resolve sym)]\n       (var->symbol v)\n       sym)))\n\n#?(:clj\n   (defn- ns-symbol-for-cljs [sym env]\n     (if-let [meta (ana/resolve env sym)]\n       ;; normal symbol\n       (let [[ns name] (str/split (str (:name meta)) #\"/\")]\n         ;; The special symbol `.` must be handled in the following special symbol part.\n         ;; However, the special symbol `.` returns meta {:name / :ns nil}, which may be a bug.\n         (if (nil? ns)\n           sym\n           (symbol ns name)))\n       ;; special symbols except for `.`\n       sym)))\n\n#?(:clj\n   (defn ns-symbol [sym & [env]]\n     (if (symbol? sym)\n       (if (cljs-env? env)\n         (ns-symbol-for-cljs sym env)\n         (ns-symbol-for-clj sym))\n       sym)))\n\n\n;;; print\n(defn take-n-if-seq [n result]\n  (if (seq? result)\n    (take (or n @print-seq-length*) result)\n    result))\n\n(defn truncate [s]\n  (if (> (count s) 70)\n    (str (.substring s 0 70) \" ...\")\n    s))\n\n(defn- make-bars-\n  [times]\n  (apply str (repeat times \"|\")))\n\n(def make-bars (memoize make-bars-))\n\n(defn prepend-bars\n  [line indent-level]\n  (str (make-bars indent-level) \" \" line))\n\n(defn print-form-with-indent\n  [form indent-level]\n  ;; TODO: trace this information somehow\n  (println (prepend-bars form indent-level))\n  (flush))\n\n(defn form-header [form & [msg]]\n  (str (truncate (pr-str form))\n       (and msg (str \"   <\" msg \">\"))\n       \" =>\"))\n\n\n(defn prepend-blanks\n  [lines]\n  (mapv #(str \"  \" %) lines))\n\n(defn pprint-result-with-indent\n  [result indent-level]\n  ;; TODO: trace this information somehow\n  (let [res    result\n        result (with-out-str (pp/pprint res))\n        pprint (str/trim result)]\n    (println (->> (str/split pprint #\"\\n\")\n                  prepend-blanks\n                  (mapv #(prepend-bars % indent-level))\n                  (str/join \"\\n\")))\n    (flush)))\n\n(defn insert-blank-line []\n  (println \" \")\n  (flush))\n\n\n;;; parse options\n(defn parse-opts\n  [opts]\n  (loop [opts opts\n         acc  {}]\n    (let [f (first opts)\n          s (second opts)]\n      (cond\n        (empty? opts)\n        acc\n\n        (number? f)\n        (recur (next opts) (assoc acc :n f))\n\n        (string? f)\n        (recur (next opts) (assoc acc :msg f))\n\n        (= f :if)\n        (recur (nnext opts) (assoc acc :condition s))\n\n        ;;; for clojurescript\n        (= f :js)\n        (recur (next opts) (assoc acc :js true))\n\n        (#{:once :o} f)\n        (recur (next opts) (assoc acc :once true))\n\n        (#{:style :s} f)\n        (recur (nnext opts) (assoc acc :style s))\n\n        (= f :clog)\n        (recur (next opts) (assoc acc :clog true))))))\n\n\n;;; quote the value parts of a map\n(defn quote-val [[k v]]\n  `[~k '~v])\n\n(defn quote-vals [m]\n  (->> (map quote-val m)\n       (into {})))\n\n\n;;; for recur processing\n(defn include-recur? [form]\n  (((comp set flatten) form) 'recur))\n\n#?(:clj\n   (defn final-target? [sym targets env]\n     (let [ns-sym (ns-symbol sym env)]\n       (or (get targets ns-sym)\n           (some #(= % ns-sym)\n                 '[clojure.core/defn clojure.core/defn- clojure.core/fn\n                   cljs.core/defn cljs.core/defn- cljs.core/fn])))))\n\n(defn o-skip? [sym]\n  (= 'debux.common.macro-specs/o-skip sym))\n\n(declare remove-d)\n\n;;; spy functions\n(def spy-first\n  (fn [result quoted-form indent]\n    (assert (integer? indent) (str \"indent was not correctly replaced for form \" (prn-str quoted-form) \"\\nThis is a bug, please report it to https://github.com/Day8/re-frame-debux\"))\n    (send-trace! {:form (remove-d quoted-form 'dummy) :result result :indent-level indent})\n    ;(print-form-with-indent (form-header quoted-form) indent)\n    ;(pprint-result-with-indent (take-n-if-seq 100 result) indent)\n    result))\n\n(def spy-last\n  (fn [quoted-form indent result]\n    (assert (integer? indent) (str \"indent was not correctly replaced for form \" (prn-str quoted-form) \"\\nThis is a bug, please report it to https://github.com/Day8/re-frame-debux\"))\n    (send-trace! {:form (remove-d quoted-form 'dummy) :result result :indent-level indent})\n    ;(print-form-with-indent (form-header quoted-form) indent)\n    ;(pprint-result-with-indent (take-n-if-seq 100 result) indent)\n    result))\n\n(defn spy-comp [quoted-form indent form]\n  (fn [& arg]\n    (let [result (apply form arg)]\n      (assert (integer? indent) (str \"indent was not correctly replaced for form \" (prn-str quoted-form) \"\\nThis is a bug, please report it to https://github.com/Day8/re-frame-debux\"))\n      (send-trace! {:form (remove-d quoted-form 'dummy) :result result :indent-level indent})\n      ;(print-form-with-indent (form-header quoted-form) indent)\n      ;(pprint-result-with-indent (take-n-if-seq 100 result) indent)\n      result)))\n\n;; Remove trace info\n\n(defn debux-skip-symbol? [sym]\n  (contains? #{'debux.common.macro-specs/skip-outer\n               'debux.common.macro-specs/skip\n               'debux.common.macro-specs/o-skip}\n             sym))\n\n(defn spy-first? [sym]\n  (= 'debux.common.util/spy-first sym))\n\n(defn third [coll]\n  (first (next (next coll))))\n\n(defn remove-d [form d-sym]\n  ;; TODO: should we instead look to rewrite the quoted/spied forms\n  ;; at macro compile time, rather than filtering them out\n  ;; when the trace is being emitted?\n  (loop [loc (sequential-zip form)]\n    (let [node (z/node loc)]\n      ;(ut/d node)\n      (cond\n        (z/end? loc) (z/root loc)\n\n        ;; in case of (d ...)\n        (and (seq? node)\n             (or (= d-sym (first node))\n                 (debux-skip-symbol? (first node))\n                 (spy-first? (first node))))\n        ;; We take the third node, because the first two are\n        ;; (d <indent-level> ...)\n        (recur (z/replace loc (third node)))\n\n        ;; in case of spy-last\n        (and (seq? node)\n             (= `spy-last (first node)))\n        (recur (z/replace loc (last node)))\n\n        :else\n        (recur (z/next loc))))))\n"]}