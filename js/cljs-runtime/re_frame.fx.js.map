{"version":3,"file":"re_frame.fx.js","sources":["re_frame/fx.cljc"],"mappings":"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","names":["context","temp__5455__auto__","effect-fn","re_frame.registrar.get_handler.cljs$core$IFn$_invoke$arity$3","re-frame.fx/kind","effect-key","cljs.core/deref","re-frame.db/app-db","value","re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic","cljs.core/sequential?","cljs.core/reset!","re-frame.fx/do-fx","re-frame.fx/reg-fx","effect","js/Error","re-frame.registrar/kinds","effect-value","cljs.core/vector?","id","handler","seq__38821","cljs.core/seq","chunk__38822","count__38823","i__38824","temp__5457__auto__","cljs.core/chunked-seq?","c__4319__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","event","clear-event","seq__38785","chunk__38786","count__38787","i__38788","map__38789","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","map__38791","ms","dispatch","re-frame.router/dispatch","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","re-frame.registrar/clear-handlers","re-frame.events/kind","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","seq__38805","chunk__38806","count__38807","i__38808","cljs.core/nil?","seq__38723","chunk__38725","count__38726","i__38727","vec__38735","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","vec__38738","seq__38741","chunk__38742","count__38743","i__38744","vec__38745","vec__38748","re-frame.interop/set-timeout!","re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic","re-frame.trace/is-trace-enabled?","*current-trace*38719","re-frame.trace/*current-trace*","re-frame.trace/start-trace","end__38171__auto__","re-frame.interop/now","duration__38172__auto__","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","re-frame.trace/traces","cljs.core/conj","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","re-frame.trace/run-tracing-callbacks!","re-frame.registrar/register-handler","cljs.core/empty?"],"sourcesContent":["(ns re-frame.fx\n  (:require\n    [re-frame.router      :as router]\n    [re-frame.db          :refer [app-db]]\n    [re-frame.interceptor :refer [->interceptor]]\n    [re-frame.interop     :refer [set-timeout!]]\n    [re-frame.events      :as events]\n    [re-frame.registrar   :refer [get-handler clear-handlers register-handler]]\n    [re-frame.loggers     :refer [console]]\n    [re-frame.trace :as trace :include-macros true]))\n\n\n;; -- Registration ------------------------------------------------------------\n\n(def kind :fx)\n(assert (re-frame.registrar/kinds kind))\n\n(defn reg-fx\n  \"Register the given effect `handler` for the given `id`.\n\n  `id` is keyword, often namespaced.\n  `handler` is a side-effecting function which takes a single argument and whose return\n  value is ignored.\n\n  Example Use\n  -----------\n\n  First, registration ... associate `:effect2` with a handler.\n\n  (reg-fx\n     :effect2\n     (fn [value]\n        ... do something side-effect-y))\n\n  Then, later, if an event handler were to return this effects map ...\n\n  {...\n   :effect2  [1 2]}\n\n   ... then the `handler` `fn` we registered previously, using `reg-fx`, will be\n   called with an argument of `[1 2]`.\"\n  [id handler]\n  (register-handler kind id handler))\n\n;; -- Interceptor -------------------------------------------------------------\n\n(def do-fx\n  \"An interceptor whose `:after` actions the contents of `:effects`. As a result,\n  this interceptor is Domino 3.\n\n  This interceptor is silently added (by reg-event-db etc) to the front of\n  interceptor chains for all events.\n\n  For each key in `:effects` (a map), it calls the registered `effects handler`\n  (see `reg-fx` for registration of effect handlers).\n\n  So, if `:effects` was:\n      {:dispatch  [:hello 42]\n       :db        {...}\n       :undo      \\\"set flag\\\"}\n\n  it will call the registered effect handlers for each of the map's keys:\n  `:dispatch`, `:undo` and `:db`. When calling each handler, provides the map\n  value for that key - so in the example above the effect handler for :dispatch\n  will be given one arg `[:hello 42]`.\n\n  You cannot rely on the ordering in which effects are executed.\"\n  (->interceptor\n    :id :do-fx\n    :after (fn do-fx-after\n             [context]\n             (trace/with-trace\n               {:op-type :event/do-fx}\n               (doseq [[effect-key effect-value] (:effects context)]\n                 (if-let [effect-fn (get-handler kind effect-key false)]\n                   (effect-fn effect-value)\n                   (console :error \"re-frame: no handler registered for effect:\" effect-key \". Ignoring.\")))))))\n\n;; -- Builtin Effect Handlers  ------------------------------------------------\n\n;; :dispatch-later\n;;\n;; `dispatch` one or more events after given delays. Expects a collection\n;; of maps with two keys:  :`ms` and `:dispatch`\n;;\n;; usage:\n;;\n;;    {:dispatch-later [{:ms 200 :dispatch [:event-id \"param\"]}    ;;  in 200ms do this: (dispatch [:event-id \"param\"])\n;;                      {:ms 100 :dispatch [:also :this :in :100ms]}]}\n;;\n(reg-fx\n  :dispatch-later\n  (fn [value]\n    (doseq [{:keys [ms dispatch] :as effect} value]\n        (if (or (empty? dispatch) (not (number? ms)))\n          (console :error \"re-frame: ignoring bad :dispatch-later value:\" effect)\n          (set-timeout! #(router/dispatch dispatch) ms)))))\n\n\n;; :dispatch\n;;\n;; `dispatch` one event. Excepts a single vector.\n;;\n;; usage:\n;;   {:dispatch [:event-id \"param\"] }\n\n(reg-fx\n  :dispatch\n  (fn [value]\n    (if-not (vector? value)\n      (console :error \"re-frame: ignoring bad :dispatch value. Expected a vector, but got:\" value)\n      (router/dispatch value))))\n\n\n;; :dispatch-n\n;;\n;; `dispatch` more than one event. Expects a list or vector of events. Something for which\n;; sequential? returns true.\n;;\n;; usage:\n;;   {:dispatch-n (list [:do :all] [:three :of] [:these])}\n;;\n;; Note: nil events are ignored which means events can be added\n;; conditionally:\n;;    {:dispatch-n (list (when (> 3 5) [:conditioned-out])\n;;                       [:another-one])}\n;;\n(reg-fx\n  :dispatch-n\n  (fn [value]\n    (if-not (sequential? value)\n      (console :error \"re-frame: ignoring bad :dispatch-n value. Expected a collection, got got:\" value)\n      (doseq [event (remove nil? value)] (router/dispatch event)))))\n\n\n;; :deregister-event-handler\n;;\n;; removes a previously registered event handler. Expects either a single id (\n;; typically a namespaced keyword), or a seq of ids.\n;;\n;; usage:\n;;   {:deregister-event-handler :my-id)}\n;; or:\n;;   {:deregister-event-handler [:one-id :another-id]}\n;;\n(reg-fx\n  :deregister-event-handler\n  (fn [value]\n    (let [clear-event (partial clear-handlers events/kind)]\n      (if (sequential? value)\n        (doseq [event value] (clear-event event))\n        (clear-event value)))))\n\n\n;; :db\n;;\n;; reset! app-db with a new value. `value` is expected to be a map.\n;;\n;; usage:\n;;   {:db  {:key1 value1 key2 value2}}\n;;\n(reg-fx\n  :db\n  (fn [value]\n    (if-not (identical? @app-db value)\n      (reset! app-db value))))\n\n"]}