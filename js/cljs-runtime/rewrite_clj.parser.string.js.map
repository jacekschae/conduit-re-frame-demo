{"version":3,"file":"rewrite_clj.parser.string.js","sources":["rewrite_clj/parser/string.cljs"],"mappings":";;;;;AAKA;;;sFAEGA,MAAMC,rDAFT,vCAAOC;AAAP,AAGE,IAAMmB,IAAE,AAAWpB;AACjB,QAAA,RAAMA,AADR;;AAEE,OAACmB,6CAAKpB,MAAMqB;;kGAGDV,lGADf,6CAAA,7CAAOG;AAAP,AAEE,AAACI,0BAASP;;AACV,IAAMV,MAAI,KAAAQ;AAAV,AACE,oBAAA,hBAAOO;IACAhB,QADP;;AAAA,AAEE,IAAAsB,qBAAW,CAACC,6DAAAA,qEAAAA,VAAYZ,iDAAAA;AAAxB,AAAA,oBAAAW;AAAA,QAAAA,JAASnB;AACP,GAAM,EAAK,EAAKa,oBAAS,OAAA,NAAYb,5BADvC;AAEQ,OAACD,qCAAWF,MAAMC;;GAElB,OAAA,NAAYE,JAHlB;AAIM,eAAOa;eAAQ,AAACd,qCAAWF,MAAMC;;;;;AAI/B,AAASA,WAAIE,XARrB,AAOM;;AAEE,eAAO,EAAK,EAAKa,oBAAS,OAAA,NAAYb;eAAOH;;;;;;;;AACrD,8CAAA,vCAACe,gCAAeJ;;;;;AAExB,yCAAA,zCAAMD,0FACSC;AADf,AAEE,IAAAC,WAAkB,AAACE,2CAAiBH;AAApC,AAAA,gIAAAC,mDAAAA,3KAACC,6DAAAA,uEAAAA;;wFAGYF,xFADf,wCAAA,xCAAMM;AAAN,AAEE,IAAMjB,QAAM,AAACc,2CAAiBH;IACxBH,QAAM,kDAAA,lDAACW,uDAAyBnB;AACpC,IAAAI,WAAiB,AAACG,qBAAWC,pCAF/B;IAEEH,WAAoC,CAAA,yDAAA,PAAWG;AAA/C,AAAA,8HAAAJ,SAAAC,kDAAAD,SAAAC,1LAACC,4DAAAA,+EAAAA","names":["lines","buf","rewrite-clj.parser.string/flush-into","c","G__28638","G__28639","rewrite-clj.node/token-node","cljs.core/re-pattern","regex","goog.string/StringBuffer","rewrite-clj.parser.string/parse-string","reader","G__28632","rewrite-clj.node/string-node","rewrite-clj.parser.string/read-string-data","rewrite-clj.reader/throw-reader","escape?","rewrite-clj.parser.string/parse-regex","rewrite-clj.reader/ignore","clojure.string.join.cljs$core$IFn$_invoke$arity$2","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","s","temp__5455__auto__","rewrite-clj.reader/read-char"],"sourcesContent":["(ns rewrite-clj.parser.string\n  (:require [rewrite-clj.node :as node]\n            [rewrite-clj.reader :as r]\n            [goog.string :as gstring]))\n\n(defn- flush-into\n  \"Flush buffer and add string to the given vector.\"\n  [lines buf]\n  (let [s (.toString buf)]\n    (.set buf \"\")\n    (conj lines s)))\n\n(defn- read-string-data\n  [^not-native reader]\n  (r/ignore reader)\n  (let [buf (gstring/StringBuffer.)]\n    (loop [escape? false\n           lines []]\n      (if-let [c (r/read-char reader)]\n        (cond (and (not escape?) (identical? c \\\"))\n              (flush-into lines buf)\n\n              (identical? c \\newline)\n              (recur escape? (flush-into lines buf))\n\n              :else\n              (do\n                (.append buf c)\n                (recur (and (not escape?) (identical? c \\\\)) lines)))\n        (r/throw-reader reader \"Unexpected EOF while reading string.\")))))\n\n(defn parse-string\n  [^not-native reader]\n  (node/string-node (read-string-data reader)))\n\n(defn parse-regex\n  [^not-native reader]\n  (let [lines (read-string-data reader)\n        regex (clojure.string/join \"\\n\" lines)]\n    (node/token-node (re-pattern regex) (str \"#\\\"\" regex \"\\\"\"))))\n"]}