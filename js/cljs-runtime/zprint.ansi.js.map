{"version":3,"file":"zprint.ansi.js","sources":["zprint/ansi.cljc"],"mappings":";;;AAOA,yBAAA,wCAAA,qDAAA,qEAAA,uDAAA,iEAAA,uDAAA,+DAAA,yDAAA,kEAAA,uDAAA,oEAAA,qDAAA,+DAAA,mDAAA,gEAAA,0DAAA,8DAAA,yDAAA,mDAAA,qDAAA,kDAAA,2DAAA,yDAAA,qDAAA,2DAAA,yDAAA,IAAA,KAAA,IAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,IAAA,KAAA,KAAA,IAAA,KAAA,IAAA,KAAA,KAAA,IAAA,KAAA,KAAA,KAAA,IAAA,/lDAAKA;AA2BL,AAAA;;;wBAAA,gCAAAC,xDAAMM;AAAN,AAAA,IAAAL,qBAAA;AAAA,AAAA,IAAAC,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAAD,wBAAA,CAAA,UAAAE;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,EAAA,CAAA,MAAA,AAAAH,4BAAA,AAAA,KAAAI,qBAAA,AAAAJ,yBAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAAK,2DAAA,CAAA,UAAA,MAAAF;;;AAAA,AAAA,AAAA,AAAAE,6DAAA,WAEGM,EAAIC;AAFP,oMAG0DA,vIAAlCC,oEAAmBC,tDAAdC,AAAD,kDAAA,9GAAX,fAAf,6KAA6CjB,9JAA7BkB,kHAAwB,7HAAlCC;AAAN,AACE,oDAAA,sDAAA,uGAAA,gGAAA,sDAAA,iDAAA,iDAAA,9SAAeA,uGAAYN;;;AAJ/B,AAAA,AAAAN,gDAAA;;AAAA;AAAA,AAAA,AAAAA,0CAAA,WAAAC;AAAA,AAAA,IAAAC,WAAA,AAAAC,gBAAAF;IAAAA,eAAA,AAAAG,eAAAH;AAAA,AAAA,IAAAI,qBAAA;AAAA,AAAA,OAAAA,wDAAAH,SAAAD;;;AAAA","names":["zprint.ansi/ansi-codes","var_args","args__4502__auto__","len__4499__auto__","i__4500__auto__","argseq__4503__auto__","cljs.core/IndexedSeq","zprint.ansi/color-str","seq27730","G__27731","cljs.core/first","cljs.core/next","self__4486__auto__","s","ansi","cljs.core/str","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core.interpose.cljs$core$IFn$_invoke$arity$2","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","ansi-str"],"sourcesContent":["(ns zprint.ansi\n  (:require clojure.string))\n\n;;\n;; # Do ANSI Escape code processing\n;;\n\n(def ansi-codes\n  {:off 0,\n   :bold 1,\n   :underline 3,\n   :blink 5,\n   :reverse 7,\n   :hidden 8,\n   :strike 9,\n   :black 30,\n   :none 30,\n   :red 31,\n   :green 32,\n   :yellow 33,\n   :blue 34,\n   :magenta 35,\n   :purple 35,\n   :cyan 36,\n   :white 37,\n   :xsf 38,\n   :back-red 41,\n   :back-green 42,\n   :back-yellow 43,\n   :back-blue 44,\n   :back-magenta 45,\n   :back-purple 45,\n   :back-cyan 66})\n\n(defn color-str\n  \"Wraps a string with ANSI escape codes.\"\n  [s & ansi]\n  (let [ansi-str (apply str (interpose \\; (map ansi-codes ansi)))]\n    (str \\u001b \\[ ansi-str \\m s \\u001b \\[ \\0 \\m)))"]}