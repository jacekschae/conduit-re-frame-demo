{"version":3,"file":"rewrite_clj.node.quote.js","sources":["rewrite_clj/node/quote.cljs"],"mappings":"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","names":["cljs.core/sequential?","children","_","tag","rewrite-clj.node.protocols/assert-single-sexpr","children'","this","rewrite-clj.node.quote/syntax-quote-node","G__28264","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","rewrite-clj.node.quote/->node","t","prefix","sym","rewrite-clj.node.quote/unquote-node","rewrite-clj.node.quote/quote-node","rewrite-clj.node.protocols/string","rewrite-clj.node.quote/->QuoteNode","cljs.core/count","rewrite-clj.node.protocols/sum-lengths","rewrite-clj.node.quote/unquote-splicing-node","this__11972__auto__","k__11973__auto__","cljs.core._lookup.cljs$core$IFn$_invoke$arity$3","this__11974__auto__","k28258","else__11975__auto__","cljs.core/Keyword","cljs.core.get.cljs$core$IFn$_invoke$arity$3","__extmap","this__11986__auto__","writer__11987__auto__","opts__11988__auto__","pr-pair__11989__auto__","keyval__11990__auto__","cljs.core/pr-sequential-writer","cljs.core/pr-writer","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core/PersistentVector","G__28257","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__11970__auto__","__meta","this__11967__auto__","__hash","this__11976__auto__","this__11968__auto__","h__4030__auto__","fexpr__28265","coll__11969__auto__","cljs.core/hash-unordered-coll","this28259","other28260","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/PROTOCOL_SENTINEL","this__11981__auto__","k__11982__auto__","cljs.core/contains?","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","cljs.core/-with-meta","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core/not-empty","this__11979__auto__","k__11980__auto__","pred__28267","cljs.core/keyword-identical?","expr__28268","G__28270","G__28271","G__28273","G__28274","G__28275","G__28276","G__28277","G__28278","this__11984__auto__","cljs.core/seq","this__11971__auto__","this__11977__auto__","entry__11978__auto__","cljs.core/vector?","cljs.core/-assoc","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","cljs.core/-conj","rewrite-clj.node.quote/QuoteNode","this__4208__auto__","cljs.core/List","writer__4209__auto__","cljs.core/-write","G__28261","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic","rewrite-clj.node.quote/map->QuoteNode","rewrite-clj.node.protocols/concat-strings","cljs.core/first","rewrite-clj.node.protocols/sexprs"],"sourcesContent":["(ns ^:no-doc rewrite-clj.node.quote\n  (:require [rewrite-clj.node.protocols :as node]))\n\n;; ## Node\n\n(defrecord QuoteNode [tag prefix sym children]\n  node/Node\n  (tag [_] tag)\n  (printable-only? [_] false)\n  (sexpr [_]\n    (list sym (first (node/sexprs children))))\n  (length [_]\n    (+ (count prefix) (node/sum-lengths children)))\n  (string [_]\n    (str prefix (node/concat-strings children)))\n\n  node/InnerNode\n  (inner? [_] true)\n  (children [_] children)\n  (replace-children [this children']\n    (node/assert-single-sexpr children')\n    (assoc this :children children'))\n\n  Object\n  (toString [this]\n    (node/string this)))\n\n;(node/make-printable! QuoteNode)\n\n;; ## Constructors\n\n(defn- ->node\n  [t prefix sym children]\n  (node/assert-single-sexpr children)\n  (->QuoteNode t prefix sym children))\n\n(defn quote-node\n  \"Create node representing a quoted form.\n   Takes either a seq of nodes or a single one.\"\n  [children]\n  (if (sequential? children)\n    (->node\n      :quote \"'\" 'quote\n      children)\n    (recur [children])))\n\n(defn syntax-quote-node\n  \"Create node representing a syntax-quoted form.\n   Takes either a seq of nodes or a single one.\"\n  [children]\n  (if (sequential? children)\n    (->node\n      :syntax-quote \"`\" 'quote\n      children)\n    (recur [children])))\n\n(defn unquote-node\n  \"Create node representing an unquoted form. (`~...`)\n   Takes either a seq of nodes or a single one.\"\n  [children]\n  (if (sequential? children)\n    (->node\n      :unquote \"~\" 'unquote\n      children)\n    (recur [children])))\n\n(defn unquote-splicing-node\n  \"Create node representing an unquote-spliced form. (`~@...`)\n   Takes either a seq of nodes or a single one.\"\n  [children]\n  (if (sequential? children)\n    (->node\n      :unquote-splicing \"~@\" 'unquote-splicing\n      children)\n    (recur [children])))\n"]}