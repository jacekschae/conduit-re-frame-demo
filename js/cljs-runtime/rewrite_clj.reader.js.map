{"version":3,"file":"rewrite_clj.reader.js","sources":["rewrite_clj/reader.cljs"],"mappings":"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","names":["reader","read-fn","temp__5455__auto__","c","rewrite-clj.reader/read-char","p?","eof?","rewrite-clj.reader/buf","node-tag","ns","token","end-col","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","n","rewrite-clj.reader/read-include-linebreak","rewrite-clj.reader/get-column-number","rewrite_clj.reader.read_while.cljs$core$IFn$_invoke$arity$3","cljs.core/not","matches","data","fmt","row","js/Error","rewrite-clj.reader/read-n","v","rewrite-clj.reader/read-until","rewrite-clj.reader/read-with-meta","rewrite-clj.reader/string->edn","cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$1","goog.string/StringBuffer","p1__28586#","rewrite-clj.reader/linebreak?","end-row","rewrite-clj.reader/whitespace-or-boundary?","rewrite-clj.reader/throw-reader","l","rewrite-clj.reader/get-line-number","col","a","cljs.core.keyword.cljs$core$IFn$_invoke$arity$2","name","entry","rewrite-clj.reader/re-matches*","cljs.core/re-pattern","tok","var_args","G__28584","rewrite-clj.reader/read-while","rewrite-clj.reader/unread","cljs.tools.reader.reader-types/unread","rewrite-clj.reader/read-keyword","vs","ch","rewrite-clj.reader/ignore","rewrite-clj.reader/boundary?","cljs.tools.reader.impl.errors.reader_error.cljs$core$IFn$_invoke$arity$variadic","re","s","rewrite-clj.reader/whitespace?","cljs.core.doall.cljs$core$IFn$_invoke$arity$1","args__4502__auto__","len__4499__auto__","i__4500__auto__","argseq__4503__auto__","cljs.core/IndexedSeq","seq28577","G__28578","cljs.core/first","cljs.core/next","G__28579","self__4486__auto__","rewrite-clj.reader/indexing-push-back-reader","cljs.tools.reader.reader-types/indexing-push-back-reader","rewrite-clj.reader/next","cljs.tools.reader/read-token","rewrite-clj.reader/peek-char","cljs.tools.reader.reader-types/peek-char","cljs.tools.reader.reader-types/get-column-number","cljs.core.take_while.cljs$core$IFn$_invoke$arity$2","cljs.core/identity","rewrite-clj.reader/peek","initch","cljs.core/complement","rewrite-clj.reader/read-string","cljs.tools.reader/read-string","rewrite-clj.reader/space?","rewrite-clj.reader/read-repeatedly","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","cljs.tools.reader.reader-types/get-line-number","or__3922__auto__","rewrite_clj.reader.throw_reader.cljs$core$IFn$_invoke$arity$variadic","cljs.tools.reader.reader-types/read-char"],"sourcesContent":["(ns rewrite-clj.reader\n  (:refer-clojure :exclude [peek next])\n  (:require [cljs.tools.reader :as r]\n            [cljs.tools.reader.reader-types :as reader-types]\n            [cljs.tools.reader.impl.commons :refer [parse-symbol]]\n            [goog.string :as gstring]\n            [rewrite-clj.node.protocols :as nd]))\n\n(def read-char reader-types/read-char)\n(def get-column-number reader-types/get-column-number)\n(def get-line-number reader-types/get-line-number)\n(def peek-char reader-types/peek-char)\n(def indexing-push-back-reader reader-types/indexing-push-back-reader)\n(def unread reader-types/unread)\n(def read-string r/read-string)\n\n;; TODO: try to get goog.string.format up and running !\n(defn throw-reader\n  \"Throw reader exception, including line/column.\"\n  [^not-native reader fmt & data]\n  (let [c (get-column-number reader)\n        l (get-line-number reader)]\n    (throw\n      (js/Error.\n        (str data fmt\n             \" [at line \" l \", column \" c \"]\")))))\n\n\n(defn boundary?\n  \"Check whether a given char is a token boundary.\"\n  [c]\n  (< -1 (.indexOf #js [\\\" \\: \\; \\' \\@ \\^ \\` \\~\n                       \\( \\) \\[ \\] \\{ \\} \\\\ nil] c)))\n\n(defn- ^boolean whitespace?\n  \"Checks whether a given character is whitespace\"\n  [ch]\n  ;(or (gstring/isBreakingWhitespace ch) (identical? \\, ch))\n  (< -1 (.indexOf #js [\\return \\newline \\tab \\space \",\"] ch)))\n\n(defn ^boolean linebreak?\n  \"Checks whether the character is a newline\"\n  [c]\n  (< -1 (.indexOf #js [\\return \\newline] c)))\n\n(defn ^boolean space?\n  \"Checks whether the character is a space\"\n  [c]\n  (< -1 (.indexOf #js [\\tab \\space \",\"] c)))\n\n(defn ^boolean whitespace-or-boundary?\n  [c]\n  (or (whitespace? c) (boundary? c)))\n\n(def buf (gstring/StringBuffer. \"\"))\n\n(defn read-while\n  \"Read while the chars fulfill the given condition. Ignores\n  the unmatching char.\"\n  ([^not-native reader p?]\n   (read-while reader p? (not (p? nil))))\n\n  ([^not-native reader p? eof?]\n    (.clear buf)\n    (loop []\n      (if-let [c (read-char reader)]\n        (if (p? c)\n          (do\n            (.append buf c)\n            (recur))\n          (do\n            (unread reader c)\n            (.toString buf)))\n        (if eof?\n          (.toString buf)\n          (throw-reader reader \"Unexpected EOF.\"))))))\n\n(defn read-until\n  \"Read until a char fulfills the given condition. Ignores the\n   matching char.\"\n  [^not-native reader p?]\n  (read-while\n    reader\n    (complement p?)\n    (p? nil)))\n\n(defn read-include-linebreak\n  \"Read until linebreak and include it.\"\n  [^not-native reader]\n  (str\n    (read-until\n      reader\n      #(or (nil? %) (linebreak? %)))\n    (read-char reader)))\n\n(defn string->edn\n  \"Convert string to EDN value.\"\n  [s]\n  (read-string s))\n\n(defn ignore\n  \"Ignore the next character.\"\n  [^not-native reader]\n  (read-char reader)\n  nil)\n\n\n(defn next\n  \"Read next char.\"\n  [^not-native reader]\n  (read-char reader))\n\n(defn peek\n  \"Peek next char.\"\n  [^not-native reader]\n  (peek-char reader))\n\n\n\n(defn read-with-meta\n  \"Use the given function to read value, then attach row/col metadata.\"\n  [^not-native reader read-fn]\n  (let [row (get-line-number reader)\n        col (get-column-number reader)\n        ^not-native entry (read-fn reader)]\n    (when entry\n      (let [end-row (get-line-number reader)\n            end-col (get-column-number reader)\n            end-col (if (= 0 end-col)\n                      (+ col (.-length (nd/string entry)))\n                      end-col)] ; TODO: Figure out why numbers are sometimes whacky\n        (if (= 0 col) ; why oh why\n          entry\n          (-with-meta\n            entry\n            {:row row\n             :col col\n             :end-row end-row\n             :end-col end-col}))))))\n\n(defn read-repeatedly\n  \"Call the given function on the given reader until it returns\n   a non-truthy value.\"\n  [^not-native reader read-fn]\n  (->> (repeatedly #(read-fn reader))\n       (take-while identity)\n       (doall)))\n\n\n(defn read-n\n  \"Call the given function on the given reader until `n` values matching `p?` have been\n   collected.\"\n  [^not-native reader node-tag read-fn p? n]\n  {:pre [(pos? n)]}\n  (loop [c 0\n         vs []]\n    (if (< c n)\n      (if-let [v (read-fn reader)]\n        (recur\n          (if (p? v) (inc c) c)\n          (conj vs v))\n        (throw-reader\n          reader\n          \"%s node expects %d value%s.\"\n          node-tag\n          n\n          (if (= n 1) \"\" \"s\")))\n      vs)))\n\n(defn- re-matches*\n  [re s]\n  (let [matches (.exec re s)]\n    (when (and (not (nil? matches))\n               (identical? (aget matches 0) s))\n      (if (== (alength matches) 1)\n        (aget matches 0)\n        matches))))\n\n(defn read-keyword\n  [^not-native reader initch]\n  (let [tok (cljs.tools.reader/read-token reader :keyword (read-char reader))\n        a (re-matches* (re-pattern \"^[:]?([^0-9/].*/)?([^0-9/][^/]*)$\") tok)\n        token (aget a 0)\n        ns (aget a 1)\n        name (aget a 2)]\n    (if (or (and (not (undefined? ns))\n                 (identical? (. ns (substring (- (.-length ns) 2) (.-length ns))) \":/\"))\n            (identical? (aget name (dec (.-length name))) \":\")\n            (not (== (.indexOf token \"::\" 1) -1)))\n      (cljs.tools.reader.impl.errors/reader-error reader \n                                                  \"Invalid token: \" \n\t\t\t\t\t\t  token)\n      (if (and (not (nil? ns)) (> (.-length ns) 0))\n        (keyword (.substring ns 0 (.indexOf ns \"/\")) name)\n        (keyword (.substring token 1))))))\n\n;; (let [form-rdr (r/indexing-push-back-reader \"(+ 1 1)\")]\n;;   (read-include-linebreak form-rdr))\n\n\n;(re-matches* (re-pattern \"^[:]?([^0-9/].*/)?([^0-9/][^/]*)$\") \":%dill.*\")\n"]}