{"version":3,"file":"ajax.formats.js","sources":["ajax/formats.cljc"],"mappings":"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","names":["format-entry","request","ajax.formats.get_format.cljs$core$IFn$_invoke$arity$2","cljs.core/second","accept","response","response-format","_","ajax.formats.raw_response_format.cljs$core$IFn$_invoke$arity$0","fe","cljs.core/map?","cljs.core/first","ajax.formats.get_accept_entries.cljs$core$IFn$_invoke$arity$2","p__41016","map__41017","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","ajax.formats/get-default-format","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","format","var_args","G__40917","ajax.formats/content-type-matches","js/Error","cljs.core/vector?","ajax.interceptors/map->ResponseFormat","ajax.formats/text-request-format","ajax.formats.detect_response_format_read.cljs$core$IFn$_invoke$arity$1","opts","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","f","cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic","ajax.formats.get_accept_entries.cljs$core$IFn$_invoke$arity$1","G__41036","ajax.formats/detect-response-format-read","ajax.formats/detect-response-format","ajax.formats/accept-header","ajax.util/to-utf8-writer","cljs.core/identity","content-type","G__40771","ajax.formats/raw-response-format","cljs.core/some","ajax.formats.content_type_matches.cljs$core$IFn$_invoke$arity$1","ajax.formats/text-response-format","ajax.protocols/-body","p__41052","map__41057","ajax.formats.detect_content_type.cljs$core$IFn$_invoke$arity$2","ajax.util/get-content-type","fexpr__41039","fexpr__41042","G__40863","ajax.formats/get-accept-entries","G__40967","ajax.formats/detect-content-type","G__40831","ajax.formats/get-format"],"sourcesContent":["(ns ajax.formats\n    \"This file contains the base formats: raw, text and detect.\n     url, json and transit are found in their own files.\"\n    (:require [ajax.interceptors :as i]\n              [ajax.util :as u]\n              [ajax.protocols :as pr]\n              #? (:clj [poppea :as p]))\n    #? (:clj (:import [java.io InputStream]\n                      [java.util Scanner])\n        :cljs (:require-macros [poppea :as p])))\n\n(defn raw-response-format\n  \"This will literally return whatever the underlying implementation\n   considers has been sent. Obviously, this is highly implementation\n   dependent, gives different results depending on your platform but\n   is nonetheless really rather useful.\"\n  ([] (i/map->ResponseFormat {:read pr/-body\n                            :description #? (:cljs \"raw text\"\n                                             :clj \"raw binary\")\n                            :content-type [\"*/*\"]}))\n  ([_] (raw-response-format)))\n\n(defn text-request-format []\n  {:write (u/to-utf8-writer identity)\n   :content-type \"text/plain; charset=utf-8\"})\n\n#? (:clj\n    ;;; http://stackoverflow.com/questions/309424/read-convert-an-inputstream-to-a-string\n    (do\n      (defn response-to-string [response]\n        \"Interprets the response as text (a string). Isn't likely \n         to give you a good outcome if the response wasn't text.\"\n        (let [s (doto (Scanner. ^InputStream (pr/-body response)\n                                \"UTF-8\")\n                  (.useDelimiter \"\\\\A\"))]\n          (if (.hasNext s) (.next s) \"\")))\n\n      (defn text-response-format\n        ([] (i/map->ResponseFormat {:read response-to-string\n                                  :description \"raw text\"\n                                  :content-type [\"*/*\"]}))\n        ([_] (text-response-format))))\n    :cljs\n    ;;; For CLJS, there's no distinction betweeen raw and text\n    ;;; format, because it's a string in the API anyway.\n    (def text-response-format raw-response-format))\n\n;;; Detect Response Format\n\n(p/defn-curried get-format [request format-entry]\n  \"Converts one of a number of types to a response format.\n   Note that it processes `[text format]` the same as `format`,\n   which makes it easier to work with detection vectors such as\n   `default-formats`.\n   \n   It also supports providing formats as raw functions. I don't \n   know if anyone has ever used this.\"\n  (cond\n   (or (nil? format-entry) (map? format-entry))\n   format-entry\n\n   (vector? format-entry)\n   (get-format request (second format-entry))\n\n   ;;; Must be a format generating function\n   :else (format-entry request)))\n\n(p/defn-curried get-accept-entries [request format-entry]\n  (let [fe (if (vector? format-entry)\n             (first format-entry)\n             (:content-type (get-format request format-entry)))]\n    (cond (nil? fe) [\"*/*\"]\n          (string? fe) [fe]\n          :else fe)))\n\n(p/defn-curried content-type-matches\n  [^String content-type ^String accept]\n  (or (= accept \"*/*\")\n      (>= (.indexOf content-type accept) 0)))\n\n(p/defn-curried detect-content-type\n  [content-type request format-entry]\n  (let [accept (get-accept-entries request format-entry)]\n    (some (content-type-matches content-type) accept)))\n\n(defn get-default-format\n  [response {:keys [response-format] :as request}]\n  (let [f (detect-content-type (u/get-content-type response) request)]\n    (->> response-format\n         (filter f)\n         first\n         (get-format request))))\n\n(p/defn-curried detect-response-format-read\n  [request response]\n  (let [format (get-default-format response request)]\n    ((:read format) response)))\n\n(defn accept-header [{:keys [response-format] :as request}]\n  (if (vector? response-format)\n    (mapcat (get-accept-entries request) response-format)\n    (get-accept-entries request response-format)))\n\n(defn detect-response-format [opts]\n    \"NB This version of the response format doesn't have a zero\n     arity version. This is because it would involve pulling\n     in every dependency. Instead, core.cljc adds it in.\"\n     (let [accept (accept-header opts)]\n       (i/map->ResponseFormat\n        {:read (detect-response-format-read opts)\n         :format (str \"(from \" accept \")\")\n         :content-type accept})))\n"]}