{"version":3,"file":"rewrite_clj.node.coercer.js","sources":["rewrite_clj/node/coercer.cljs"],"mappings":"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","names":["rewrite-clj.node.forms/FormsNode","v","cljs.core/PROTOCOL_SENTINEL","sq","G__28608","f","rewrite-clj.node.coercer/seq-node","rewrite-clj.node.seq/set-node","rewrite-clj.node.stringz/StringNode","rewrite-clj.node.reader-macro/ReaderMacroNode","cljs.core.map.cljs$core$IFn$_invoke$arity$2","rewrite-clj.node.protocols/coerce","p__28609","vec__28610","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","k","mta","cljs.core/meta","value","cljs.core/PersistentHashSet","rewrite-clj.node.coercer/node-with-meta","rewrite-clj.node.whitespace/space-separated","cljs.core/List","n","rewrite-clj.node.whitespace/WhitespaceNode","cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic","m","cljs.core/empty?","rewrite-clj.node.reader-macro/DerefNode","rewrite_clj.node.token.token_node.cljs$core$IFn$_invoke$arity$1","cljs.core/vec","cljs.core/butlast","rewrite-clj.node.fn/FnNode","goog.object/set","rewrite-clj.node.protocols/NodeCoerceable","G__28590","G__28591","G__28592","rewrite-clj.node.token/TokenNode","rewrite-clj.node.meta/MetaNode","cljs.core/PersistentVector","rewrite_clj.node.meta.meta_node.cljs$core$IFn$_invoke$arity$2","rewrite-clj.node.reader-macro/ReaderNode","space","rewrite-clj.node.whitespace/whitespace-node","rewrite-clj.node.seq/map-node","rewrite-clj.node.coercer/map->children","rewrite-clj.node.seq/vector-node","G__28602","G__28603","G__28604","rewrite-clj.node.whitespace/NewlineNode","rewrite-clj.node.seq/SeqNode","comma","rewrite-clj.node.comment/CommentNode","rewrite-clj.node.quote/QuoteNode","rewrite-clj.node.keyword/KeywordNode","rewrite-clj.node.seq/list-node","G__28596","G__28597","G__28598","cljs.core/PersistentHashMap","rewrite-clj.node.stringz/string-node"],"sourcesContent":["(ns rewrite-clj.node.coercer\n  (:require [rewrite-clj.node.comment :refer [CommentNode]]\n            [rewrite-clj.node.forms :refer [FormsNode]]\n            [rewrite-clj.node.keyword :refer [KeywordNode]]\n            [rewrite-clj.node.quote :refer [QuoteNode]]\n            [rewrite-clj.node.stringz :refer [StringNode string-node]]\n            [rewrite-clj.node.uneval :refer [UnevalNode]]\n            [rewrite-clj.node.meta :refer [MetaNode meta-node]]\n            [rewrite-clj.node.fn :refer [FnNode]]\n            [rewrite-clj.node.protocols :refer [NodeCoerceable coerce]]\n            [rewrite-clj.node.reader-macro :refer [ReaderNode ReaderMacroNode DerefNode]]\n            [rewrite-clj.node.seq :refer [SeqNode vector-node list-node set-node map-node]]\n            [rewrite-clj.node.token :refer [TokenNode token-node]]\n            [rewrite-clj.node.whitespace :refer [WhitespaceNode NewlineNode whitespace-node space-separated]]))\n\n;; ## Helpers\n\n(defn node-with-meta\n  [n value]\n  (if (implements? IWithMeta value)\n    (let [mta (meta value)]\n      (if (empty? mta)\n        n\n        (meta-node (coerce mta) n)))\n    n))\n\n\n;; ## Tokens\n\n(extend-protocol NodeCoerceable\n  object\n  (coerce [v]\n    (node-with-meta\n      (token-node v)\n      v)))\n\n;; Number\n(extend-protocol NodeCoerceable\n  number\n  (coerce [n]\n    (node-with-meta\n     (token-node n)\n     n)))\n\n;; Number\n(extend-protocol NodeCoerceable\n  string\n  (coerce [n]\n    (node-with-meta\n     (string-node n)\n     n)))\n\n\n\n;; ## Seqs\n\n(defn seq-node\n  [f sq]\n  (node-with-meta\n    (->> (map coerce sq)\n         (space-separated)\n         (vec)\n         (f))\n    sq))\n\n(extend-protocol NodeCoerceable\n  PersistentVector\n  (coerce [sq]\n    (seq-node vector-node sq))\n  List\n  (coerce [sq]\n    (seq-node list-node sq))\n  PersistentHashSet\n  (coerce [sq]\n    (seq-node set-node sq)))\n\n\n\n\n;; ## Maps\n\n(let [comma (whitespace-node \", \")\n      space (whitespace-node \" \")]\n  (defn- map->children\n    [m]\n    (->> (mapcat\n           (fn [[k v]]\n             [(coerce k) space (coerce v) comma])\n           m)\n         (butlast)\n         (vec))))\n\n\n(extend-protocol NodeCoerceable\n  PersistentHashMap\n  (coerce [m]\n    (node-with-meta\n      (map-node (map->children m))\n      m)))\n\n\n\n\n;(seq-node vector-node [1])\n\n;; ## Vars\n\n;; (extend-protocol NodeCoerceable\n;;   Var\n;;   (coerce [v]\n;;     (-> (str v)\n;;         (subs 2)\n;;         (symbol)\n;;         (token-node)\n;;         (vector)\n;;         (var-node))))\n\n;; ## Existing Nodes\n\n(extend-protocol NodeCoerceable\n  CommentNode     (coerce [v] v)\n  FormsNode       (coerce [v] v)\n  FnNode          (coerce [v] v)\n  ;IntNode         (coerce [v] v)\n  KeywordNode     (coerce [v] v)\n  MetaNode        (coerce [v] v)\n  QuoteNode       (coerce [v] v)\n  ReaderNode      (coerce [v] v)\n  ReaderMacroNode (coerce [v] v)\n  DerefNode       (coerce [v] v)\n  StringNode      (coerce [v] v)\n  ;UnevalNode      (coerce [v] v)\n  NewlineNode     (coerce [v] v)\n  SeqNode         (coerce [v] v)\n  TokenNode       (coerce [v] v)\n  WhitespaceNode  (coerce [v] v))\n"]}