{"version":3,"file":"day8.re_frame.http_fx.js","sources":["day8/re_frame/http_fx.cljs"],"mappings":";;;;;AAsBA;;;8FAEGK,WAAWE,WAAWC,zEAFzB,+EAAA8B,1HAAMN;AAAN,AAAA,IAAAO,aAAAD;IAEgC7B,iBAFhC,AAAA+B,4CAAAD,WAAA,IAAA;IAEyCjC,WAFzC,AAAAkC,4CAAAD,WAAA,IAAA;AAAA,AAIE,oBAAI9B;AACF,QAACJ,2CAAAA,qDAAAA,ZAAWC,iCAAAA;;4XAIsB,AAAeE,+FACf,AAAmBA,4HACfA,5BAAwB,iBAAA4B,WAAA,pYAJ5B,AAAa5B,nNAD/C,IAAMmC,UAAQ,uGAAA,2CAAA,sEAAA,qFAAA,sFAAA,mGAAA,teAACC,2RAEmB,AAAepC;AAGa,AAAA,0CAAA4B,nCAACC;aAC/C/B;AANhB,AAOE,QAACC,2CAAAA,oDAAAA,XAAWoC,gCAAAA;;;AAGlB,kDAAA,0DAAAE,5GAAM1C;AAAN,AAAA,IAAA2C,aAAAD;IAAAC,iBAAA,EAAA,EAAA,EAAA,CAAAA,cAAA,QAAA,EAAA,EAAA,CAAA,AAAAA,iDAAA,WAAA,CAAAC,gCAAA,AAAAD,+BAAA,KAAA,OAAA,QAAA,AAAAE,8CAAAC,mBAAAH,YAAAA;IACU5C,UADV4C;IAEWzC,aAFX,AAAA6C,4CAAAJ,eAAA,iEAAA,mFAAA;IAEsBvC,aAFtB,AAAA2C,4CAAAJ,eAAA,gEAAA,mFAAA;AAME,IAAML,MAAI,KAAKC,fANjB;6DAQQ,6DAAA,yGAAA,tKAACd,iOAEU,yFAAA,zFAACG,gDAAQC,9UAJ1B,6KAGiBS,3DAFXvC,lHAOA,OAACiD;kBAJUtB;AAAA,AACU,IAAAuB,WAAU,wDAAAvB,xDAACM,6CAAK9B;AAAhB,AAAA,oHAAA+C,6CAAAA,zJAAClB,uDAAAA,iEAAAA;;CADX;kBAAAJ;AAAA,AAEU,IAAAG,WAAU,wDAAAH,xDAACK,6CAAK5B;AAAhB,AAAA,oHAAA0B,6CAAAA,zJAACC,uDAAAA,iEAAAA;;CACFO,WACpB,mHAAA;;AA0BR,oCAAA,pCAAMd,gFACHzB;AAGD,AAJF,IAMQqB,mBAAiB,gDAAA,9CAAI,AAAC8B,4BAAYnD,UAASA,2FAASA;AACxD,IAAAQ,aAAA,AAAAC,cAAgBY,/BAHlB;IAGEX,eAAA;IAAAC,eAAA;IAAAC,WAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,WAAAD;AAAA,kBAAA,AAAAD,kDAAAE,hEAAQZ;AACN,IAAAF,iBAAA,gDAAIE,hDAAQC,rBADd,AAAA;AACE,AAAA,6GAAAH,mDAAAA,/JAAmCI,uDAAAA,uEAAAA;;AADrC;AAAA,eAAAM;eAAAE;eAAAC;eAAA,CAAAC,WAAA;;;;;;;AAAA,IAAAC,qBAAA,AAAAJ,cAAAD;AAAA,AAAA,GAAAK;AAAA,AAAA,IAAAL,iBAAAK;AAAA,AAAA,GAAA,AAAAC,6BAAAN;AAAA,IAAAO,kBAAA,AAAAC,sBAAAR;AAAA,AAAA,eAAA,AAAAS,qBAAAT;eAAAO;eAAA,AAAAG,gBAAAH;eAAA;;;;;;;AAAA,kBAAA,AAAAI,gBAAAX,9BAAQR;AACN,IAAAD,iBAAA,gDAAIC,hDAAQC,rBADd,AAAA;AACE,AAAA,6GAAAF,mDAAAA,/JAAmCG,uDAAAA,uEAAAA;;AADrC;AAAA,eAAA,AAAAkB,eAAAZ;eAAA;eAAA;eAAA;;;;;;;;AAAA;;;;;;AAGJ,IAAAc,iBAAA;IAAAC,iBAAoBE;AAApB,AAAA,yGAAAH,eAAAC,iDAAAD,eAAAC,vLAACC,qDAAAA,oFAAAA","names":["G__41954","G__41958","request","day8.re-frame.http-fx/request->xhrio-options","ajax.core/ajax-request","on-success","response","on-failure","xhrio","success?","seq__41949","cljs.core/seq","chunk__41950","count__41951","i__41952","temp__5457__auto__","cljs.core/chunked-seq?","c__4319__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","seq-request-maps","G__41975","G__41976","re-frame.core/reg-fx","day8.re-frame.http-fx/http-effect","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","p1__41928#","p1__41929#","cljs.core.partial.cljs$core$IFn$_invoke$arity$4","day8.re-frame.http-fx/ajax-xhrio-handler","G__41947","re-frame.core/dispatch","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","G__41909","goog.net.ErrorCode/getDebugMessage","p__41901","vec__41903","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","api","js/goog.net.XhrIo","details","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","p__41930","map__41935","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$3","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic","G__41943","cljs.core/sequential?"],"sourcesContent":["(ns day8.re-frame.http-fx\n  (:require\n    [goog.net.ErrorCode :as errors]\n    [re-frame.core :refer [reg-fx dispatch console]]\n    [ajax.core :as ajax]\n    #_[cljs.spec :as s]))\n\n;; I provide the :http-xhrio effect handler leveraging cljs-ajax lib\n;; see API docs https://github.com/JulianBirch/cljs-ajax\n;; Note we use the ajax-request.\n;;\n;; Deviation from cljs-ajax options in request\n;; :handler       - not supported, see :on-success and :on-failure\n;; :on-success    - event vector dispatched with result\n;; :on-failure    - event vector dispatched with result\n;;\n;; NOTE: if you need tokens or other values for your handlers,\n;;       provide them in the on-success and on-failure event e.g.\n;;       [:success-event \"my-token\"] your handler will get event-v\n;;       [:success-event \"my-token\" result]\n\n\n(defn ajax-xhrio-handler\n  \"ajax-request only provides a single handler for success and errors\"\n  [on-success on-failure xhrio [success? response]]\n  ; see http://docs.closure-library.googlecode.com/git/class_goog_net_XhrIo.html\n  (if success?\n    (on-success response)\n    (let [details (merge\n                    {:uri             (.getLastUri xhrio)\n                     :last-method     (.-lastMethod_ xhrio)\n                     :last-error      (.getLastError xhrio)\n                     :last-error-code (.getLastErrorCode xhrio)\n                     :debug-message   (-> xhrio .getLastErrorCode (errors/getDebugMessage))}\n                    response)]\n      (on-failure details))))\n\n\n(defn request->xhrio-options\n  [{:as   request\n    :keys [on-success on-failure]\n    :or   {on-success      [:http-no-on-success]\n           on-failure      [:http-no-on-failure]}}]\n  ; wrap events in cljs-ajax callback\n  (let [api (new js/goog.net.XhrIo)]\n    (-> request\n        (assoc\n          :api     api\n          :handler (partial ajax-xhrio-handler\n                            #(dispatch (conj on-success %))\n                            #(dispatch (conj on-failure %))\n                            api))\n        (dissoc :on-success :on-failure))))\n\n;; Specs commented out until ClojureScript has a stable release of spec.\n;\n;(s/def ::method keyword?)\n;(s/def ::uri string?)\n;(s/def ::response-format (s/keys :req-un [::description ::read ::content-type]))\n;(s/def ::format (s/keys :req-un [::write ::content-type]))\n;(s/def ::timeout nat-int?)\n;(s/def ::params any?)\n;(s/def ::headers map?)\n;(s/def ::with-credentials boolean?)\n;\n;(s/def ::on-success vector?)\n;(s/def ::on-failure vector?)\n;\n;(s/def ::request-map (s/and (s/keys :req-un [::method ::uri ::response-format ::on-success ::on-failure]\n;                                    :opt-un [::format ::timeout ::params ::headers ::with-credentials])\n;                            (fn [m] (if (contains? m :params)\n;                                      (contains? m :format)\n;                                      true))))\n;\n;(s/def ::sequential-or-map (s/or :request-map ::request-map :seq-request-maps (s/coll-of ::request-map\n;                                                                                         :kind sequential?\n;                                                                                         :into [])))\n\n(defn http-effect\n  [request]\n  #_(when-not (s/valid? ::sequential-or-map request)\n      (throw (ex-info \"http-xhrio fx: spec error\" (s/explain-data ::sequential-or-map request))))\n  (let [#_ #_ [conform-val v] (s/conform ::sequential-or-map request)\n        #_ #_ seq-request-maps (if (= :seq-request-maps conform-val) v [v])\n        seq-request-maps (if (sequential? request) request [request])]\n    (doseq [request seq-request-maps]\n      (-> request request->xhrio-options ajax/ajax-request))))\n\n(reg-fx :http-xhrio http-effect)\n"]}