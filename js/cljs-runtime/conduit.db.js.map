{"version":3,"file":"conduit.db.js","sources":["conduit/db.cljs"],"mappings":";;;;AAWA,wBAAA,2CAAA,kEAAA,rIAAKa;AAOL,8BAAA,9BAAKP;AAEL;;;yBAAA,zBAAMN,0DAEHO;AAFH,AAGE,OAAUF,qBAAgBC,4BAAiB,6CAAKC;;AAIlD;;;4BAAA,5BAAMN;AAAN,AAGE,OAAaI,wBAAgBC;;AAa/B,IAAAE,iBAAA;IAAAC,iBAEC;kBAAKN,KAAKW;AACR,0DAAA,nDAACZ,8CAAMC,sJAEM,iBAAAC,WAAS,AAAUC,qBAAgBC,rHADzC,AAACK,6CAAK,AAACC,pLAFhB;AAGe,AAAA,GAAA,CAAAR,YAAA;AAAA;;AACS,6DAAAA,tDAACW;;;;;AAN1B,AAAA,6GAAAP,eAAAC,mDAAAD,eAAAC,7LAACC,uDAAAA,sFAAAA","names":["conduit.db/set-user-ls","conduit.db/remove-user-ls","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cofx","G__40263","js/localStorage","conduit.db/conduit-user-key","user","G__40261","G__40262","re-frame.core/reg-cofx","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core/sorted-map","conduit.db/default-db","_","cljs.reader.read_string.cljs$core$IFn$_invoke$arity$1"],"sourcesContent":["(ns conduit.db\n  (:require [cljs.reader]\n            [re-frame.core :refer [reg-cofx]]))\n\n;; -- Default app-db Value  ---------------------------------------------------\n;;\n;; When the application first starts, this will be the value put in app-db\n;; Look in:\n;;   1.  `core.cljs` for  \"(dispatch-sync [:initialise-db])\"\n;;   2.  `events.cljs` for the registration of :initialise-db handler\n;;\n(def default-db {:active-page :home})  ;; what gets put into app-db by default.\n\n;; -- Local Storage  ----------------------------------------------------------\n;;\n;; Part of the conduit challenge is to store a user in localStorage, and\n;; on app startup, reload the user from when the program was last run.\n;;\n(def conduit-user-key \"conduit-user\")  ;; localstore key\n\n(defn set-user-ls\n  \"Puts user into localStorage\"\n  [user]\n  (.setItem js/localStorage conduit-user-key (str user)))  ;; sorted-map written as an EDN map\n\n;; Removes user information from localStorge when a user logs out.\n;;\n(defn remove-user-ls\n  \"Removes user from localStorage\"\n  []\n  (.removeItem js/localStorage conduit-user-key))\n\n;; -- cofx Registrations  -----------------------------------------------------\n;;\n;; Use `reg-cofx` to register a \"coeffect handler\" which will inject the user\n;; stored in localStorge.\n;;\n;; To see it used, look in `events.cljs` at the event handler for `:initialise-db`.\n;; That event handler has the interceptor `(inject-cofx :local-store-user)`\n;; The function registered below will be used to fulfill that request.\n;;\n;; We must supply a `sorted-map` but in localStorage it is stored as a `map`.\n;;\n(reg-cofx\n :local-store-user\n (fn [cofx _]\n   (assoc cofx :local-store-user  ;; put the local-store user into the coeffect under :local-store-user\n          (into (sorted-map)      ;; read in user from localstore, and process into a sorted map\n                (some->> (.getItem js/localStorage conduit-user-key)\n                         (cljs.reader/read-string))))))  ;; EDN map -> map\n"]}