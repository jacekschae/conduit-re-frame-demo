{"version":3,"file":"reagent.impl.component.js","sources":["reagent/impl/component.cljs"],"mappings":"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","names":["G__37834","G__37838","res","path","name","ok","temp__5455__auto__","fiber","G__37837","c","reagent.impl.component/cache-react-class","constructor","G__37815","reagent.impl.component/fiber-component-path","f","cljs.core/ifn?","js/Error","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","render-fun","G__37842","reagent.impl.util/fun-name","renders","cljs.core/select-keys","fmap","reagent.impl.component/state-atom","cljs.core/reset!","reagent.impl.component/obligatory","k","ks","i","reagent.impl.component/add-obligatory","fun-map","G__37812","reagent.impl.component/react-class?","reagent.impl.component/props-argv","nextprops","cljs.core.into_array.cljs$core$IFn$_invoke$arity$1","v","reagent.impl.component/extract-props","G__37833","body","old-argv","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","reagent.impl.component/component-path","reagent.impl.component/get-argv","reagent.impl.component/wrap-render","reagent.impl.component/dash-to-camel","reagent.impl.util/memoize-1","reagent.impl.util/dash-to-camel","reagent.impl.component/shallow-obj-to-map","p","or__3922__auto__","cljs.core/empty?","sa","this","G__37817","reagent.impl.component/as-element","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","cljs.core/vector","args","reagent.impl.batching/mark-rendered","cljs.core/count","reagent.impl.component/cljsify","reagent.impl.component/create-class","n","G__37841","G__37816","temp__5459__auto__","cached-class","reagent.impl.component/cached-react-class","tag","rat","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","m","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","reagent.impl.component/wrap-funs","reagent.impl.util/*non-reactive*","reagent.impl.component/reagent-class?","o","reagent.impl.component/get-children","G__37824","cljs.core.gensym.cljs$core$IFn$_invoke$arity$1","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","G__37836","first-child","cljs.core.subvec.cljs$core$IFn$_invoke$arity$2","reagent.impl.component/fn-to-class","wrap","reagent.impl.component/custom-wrapper","key","G__37832","G__37828","reagent/debug.has-console","reagent/debug.tracking","reagent/debug.track-console","js/console","reagent.impl.component/camelify-map-keys","reagent.impl.component/*current-component*","G__37835","cljs.core/name","_","elem","reagent.impl.batching/queue-render","reagent.impl.component/rat-opts","oldprops","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","reagent.impl.component/as-class","noargv","new-argv","a","G__37825","reagent.ratom/dispose!","reagent.impl.batching/next-mount-count","cljs.core/fn?","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","legacy-render","reagent.impl.component/extract-children","reagent.impl.component/static-fns","reagent.impl.component/reagent-component?","comp","spec","cljs.core/meta","cljs.core/reduce-kv","cljs.core/vector?","withrender","G__37843","len","parent","reagent.ratom/run-in-reaction","reagent.impl.component/do-render","cljs.core/vals","cljs.core/first","reagent.impl.component/comp-name","error","info","*current-component*37823","G__37840","reagent.impl.component/get-wrapper","reagent.impl.component/map-to-js","reagent.impl.component/reactify-component","G__37805","js/module$node_modules$react$index.Children.toArray","cljs.core/map?","cljs.core/js-keys","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","nextstate","js/module$node_modules$create_react_class$index","and__3911__auto__","cljs.core/Keyword","reagent.impl.util/*always-update*","reagent.impl.component/get-props","reagent.ratom.atom.cljs$core$IFn$_invoke$arity$1"],"sourcesContent":["(ns reagent.impl.component\n  (:require [create-react-class :as create-react-class]\n            [react :as react]\n            [reagent.impl.util :as util]\n            [reagent.impl.batching :as batch]\n            [reagent.ratom :as ratom]\n            [reagent.interop :refer-macros [$ $!]]\n            [reagent.debug :refer-macros [dbg prn dev? warn error warn-unless\n                                          assert-callable]]))\n\n(declare ^:dynamic *current-component*)\n\n\n;;; Argv access\n\n(defn shallow-obj-to-map [o]\n  (let [ks (js-keys o)\n        len (alength ks)]\n    (loop [m {} i 0]\n      (if (< i len)\n        (let [k (aget ks i)]\n          (recur (assoc m (keyword k) (aget o k)) (inc i)))\n        m))))\n\n(defn extract-props [v]\n  (let [p (nth v 1 nil)]\n    (if (map? p) p)))\n\n(defn extract-children [v]\n  (let [p (nth v 1 nil)\n        first-child (if (or (nil? p) (map? p)) 2 1)]\n    (if (> (count v) first-child)\n      (subvec v first-child))))\n\n(defn props-argv [c p]\n  (if-some [a ($ p :argv)]\n    a\n    [(.-constructor c) (shallow-obj-to-map p)]))\n\n(defn get-argv [c]\n  (props-argv c ($ c :props)))\n\n(defn get-props [c]\n  (let [p ($ c :props)]\n    (if-some [v ($ p :argv)]\n      (extract-props v)\n      (shallow-obj-to-map p))))\n\n(defn get-children [c]\n  (let [p ($ c :props)]\n    (if-some [v ($ p :argv)]\n      (extract-children v)\n      (->> ($ p :children)\n           (react/Children.toArray)\n           (into [])))))\n\n(defn ^boolean reagent-class? [c]\n  (and (fn? c)\n       (some? (some-> c .-prototype ($ :reagentRender)))))\n\n(defn ^boolean react-class? [c]\n  (and (fn? c)\n       (some? (some-> c .-prototype ($ :render)))))\n\n(defn ^boolean reagent-component? [c]\n  (some? ($ c :reagentRender)))\n\n(defn cached-react-class [c]\n  ($ c :cljsReactClass))\n\n(defn cache-react-class [c constructor]\n  ($! c :cljsReactClass constructor))\n\n\n;;; State\n\n(defn state-atom [this]\n  (let [sa ($ this :cljsState)]\n    (if-not (nil? sa)\n      sa\n      ($! this :cljsState (ratom/atom nil)))))\n\n;; avoid circular dependency: this gets set from template.cljs\n(defonce as-element nil)\n\n\n;;; Rendering\n\n(defn wrap-render [c]\n  (let [f ($ c :reagentRender)\n        _ (assert-callable f)\n        res (if (true? ($ c :cljsLegacyRender))\n              (.call f c c)\n              (let [v (get-argv c)\n                    n (count v)]\n                (case n\n                  1 (.call f c)\n                  2 (.call f c (nth v 1))\n                  3 (.call f c (nth v 1) (nth v 2))\n                  4 (.call f c (nth v 1) (nth v 2) (nth v 3))\n                  5 (.call f c (nth v 1) (nth v 2) (nth v 3) (nth v 4))\n                  (.apply f c (.slice (into-array v) 1)))))]\n    (cond\n      (vector? res) (as-element res)\n      (ifn? res) (let [f (if (reagent-class? res)\n                           (fn [& args]\n                             (as-element (apply vector res args)))\n                           res)]\n                   ($! c :reagentRender f)\n                   (recur c))\n      :else res)))\n\n(declare comp-name)\n\n(defn do-render [c]\n  (binding [*current-component* c]\n    (if (dev?)\n      ;; Log errors, without using try/catch (and mess up call stack)\n      (let [ok (array false)]\n        (try\n          (let [res (wrap-render c)]\n            (aset ok 0 true)\n            res)\n          (finally\n            (when-not (aget ok 0)\n              (error (str \"Error rendering component\"\n                          (comp-name)))))))\n      (wrap-render c))))\n\n\n;;; Method wrapping\n\n(def rat-opts {:no-cache true})\n\n(def static-fns\n  {:render\n   (fn render []\n     (this-as c (if util/*non-reactive*\n                  (do-render c)\n                  (let [rat ($ c :cljsRatom)]\n                    (batch/mark-rendered c)\n                    (if (nil? rat)\n                      (ratom/run-in-reaction #(do-render c) c \"cljsRatom\"\n                                             batch/queue-render rat-opts)\n                      (._run rat false))))))})\n\n(defn custom-wrapper [key f]\n  (case key\n    :getDefaultProps\n    (throw (js/Error. \"getDefaultProps not supported\"))\n\n    :getInitialState\n    (fn getInitialState []\n      (this-as c (reset! (state-atom c) (.call f c c))))\n\n    :componentWillReceiveProps\n    (fn componentWillReceiveProps [nextprops]\n      (this-as c (.call f c c (props-argv c nextprops))))\n\n    :shouldComponentUpdate\n    (fn shouldComponentUpdate [nextprops nextstate]\n      (or util/*always-update*\n          (this-as c\n                   ;; Don't care about nextstate here, we use forceUpdate\n                   ;; when only when state has changed anyway.\n                   (let [old-argv ($ c :props.argv)\n                         new-argv ($ nextprops :argv)\n                         noargv (or (nil? old-argv) (nil? new-argv))]\n                     (cond\n                       (nil? f) (or noargv (not= old-argv new-argv))\n                       noargv (.call f c c (get-argv c) (props-argv c nextprops))\n                       :else  (.call f c c old-argv new-argv))))))\n\n    :componentWillUpdate\n    (fn componentWillUpdate [nextprops]\n      (this-as c (.call f c c (props-argv c nextprops))))\n\n    :componentDidUpdate\n    (fn componentDidUpdate [oldprops]\n      (this-as c (.call f c c (props-argv c oldprops))))\n\n    :componentWillMount\n    (fn componentWillMount []\n      (this-as c\n               ($! c :cljsMountOrder (batch/next-mount-count))\n               (when-not (nil? f)\n                 (.call f c c))))\n\n    :componentDidMount\n    (fn componentDidMount []\n      (this-as c (.call f c c)))\n\n    :componentWillUnmount\n    (fn componentWillUnmount []\n      (this-as c\n               (some-> ($ c :cljsRatom)\n                       ratom/dispose!)\n               (batch/mark-rendered c)\n               (when-not (nil? f)\n                 (.call f c c))))\n\n    :componentDidCatch\n    (fn componentDidCatch [error info]\n      (this-as c (.call f c c error info)))\n\n    nil))\n\n(defn get-wrapper [key f name]\n  (let [wrap (custom-wrapper key f)]\n    (when (and wrap f)\n      (assert-callable f))\n    (or wrap f)))\n\n(def obligatory {:shouldComponentUpdate nil\n                 :componentWillMount nil\n                 :componentWillUnmount nil})\n\n(def dash-to-camel (util/memoize-1 util/dash-to-camel))\n\n(defn camelify-map-keys [fun-map]\n  (reduce-kv (fn [m k v]\n               (assoc m (-> k dash-to-camel keyword) v))\n             {} fun-map))\n\n(defn add-obligatory [fun-map]\n  (merge obligatory fun-map))\n\n(defn wrap-funs [fmap]\n  (when (dev?)\n    (let [renders (select-keys fmap [:render :reagentRender :componentFunction])\n          render-fun (-> renders vals first)]\n      (assert (pos? (count renders)) \"Missing reagent-render\")\n      (assert (== 1 (count renders)) \"Too many render functions supplied\")\n      (assert-callable render-fun)))\n  (let [render-fun (or (:reagentRender fmap)\n                       (:componentFunction fmap))\n        legacy-render (nil? render-fun)\n        render-fun (or render-fun\n                       (:render fmap))\n        name (str (or (:displayName fmap)\n                      (util/fun-name render-fun)))\n        name (case name\n               \"\" (str (gensym \"reagent\"))\n               name)\n        fmap (reduce-kv (fn [m k v]\n                          (assoc m k (get-wrapper k v name)))\n                        {} fmap)]\n    (assoc fmap\n           :displayName name\n           :autobind false\n           :cljsLegacyRender legacy-render\n           :reagentRender render-fun\n           :render (:render static-fns))))\n\n(defn map-to-js [m]\n  (reduce-kv (fn [o k v]\n               (doto o\n                 (aset (name k) v)))\n             #js{} m))\n\n(defn cljsify [body]\n  (-> body\n      camelify-map-keys\n      add-obligatory\n      wrap-funs\n      map-to-js))\n\n(defn create-class [body]\n  {:pre [(map? body)]}\n  (->> body\n       cljsify\n       create-react-class))\n\n(defn fiber-component-path [fiber]\n  (let [name (some-> fiber\n                     ($ :type)\n                     ($ :displayName))\n        parent (some-> fiber\n                       ($ :return))\n        path (some-> parent\n                     fiber-component-path\n                     (str \" > \"))\n        res (str path name)]\n    (when-not (empty? res) res)))\n\n(defn component-path [c]\n  ;; Alternative branch for React 16\n  (if-let [fiber (some-> c ($ :_reactInternalFiber))]\n    (fiber-component-path fiber)\n    (let [elem (or (some-> (or (some-> c ($ :_reactInternalInstance))\n                               c)\n                           ($ :_currentElement)))\n          name (some-> elem\n                       ($ :type)\n                       ($ :displayName))\n          path (some-> elem\n                       ($ :_owner)\n                       component-path\n                       (str \" > \"))\n          res (str path name)]\n      (when-not (empty? res) res))))\n\n(defn comp-name []\n  (if (dev?)\n    (let [c *current-component*\n          n (or (component-path c)\n                (some-> c .-constructor util/fun-name))]\n      (if-not (empty? n)\n        (str \" (in \" n \")\")\n        \"\"))\n    \"\"))\n\n(defn fn-to-class [f]\n  (assert-callable f)\n  (warn-unless (not (and (react-class? f)\n                         (not (reagent-class? f))))\n               \"Using native React classes directly in Hiccup forms \"\n               \"is not supported. Use create-element or \"\n               \"adapt-react-class instead: \" (let [n (util/fun-name f)]\n                                               (if (empty? n) f n))\n               (comp-name))\n  (if (reagent-class? f)\n    (cache-react-class f f)\n    (let [spec (meta f)\n          withrender (assoc spec :reagent-render f)\n          res (create-class withrender)]\n      (cache-react-class f res))))\n\n(defn as-class [tag]\n  (if-some [cached-class (cached-react-class tag)]\n    cached-class\n    (fn-to-class tag)))\n\n(defn reactify-component [comp]\n  (if (react-class? comp)\n    comp\n    (as-class comp)))\n"]}