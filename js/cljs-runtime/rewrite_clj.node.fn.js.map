{"version":3,"file":"rewrite_clj.node.fn.js","sources":["rewrite_clj/node/fn.cljs"],"mappings":"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","names":["rewrite-clj.node.fn/fn-walk","rewrite-clj.node.protocols/sexprs","children","rewrite-clj.node.protocols/concat-strings","rewrite-clj.node.protocols/string","this","rewrite-clj.node.protocols/sum-lengths","body","_","cljs.core/re-matches","n","js/parseInt","rewrite-clj.node.fn/construct-fn","form","cljs.core/List","vararg","s","cljs.core/name","cljs.core.gensym.cljs$core$IFn$_invoke$arity$1","base","G__28423","vararg?","cljs.core/Symbol","sym","nm","cljs.core/deref","cljs.core.take.cljs$core$IFn$_invoke$arity$2","max-n","cljs.core/rest","syms","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","iter__4292__auto__","s__28396","cljs.core/LazySeq","temp__5457__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4290__auto__","size__4291__auto__","cljs.core/count","b__28398","cljs.core/chunk-buffer","i__28397","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__28395","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","i","cljs.core.range.cljs$core$IFn$_invoke$arity$0","rewrite-clj.node.fn/fn-node","rewrite-clj.node.fn/symbol->gensym","this__11972__auto__","k__11973__auto__","cljs.core._lookup.cljs$core$IFn$_invoke$arity$3","this__11974__auto__","k28413","else__11975__auto__","cljs.core/Keyword","cljs.core.get.cljs$core$IFn$_invoke$arity$3","__extmap","this__11986__auto__","writer__11987__auto__","opts__11988__auto__","pr-pair__11989__auto__","keyval__11990__auto__","cljs.core/pr-sequential-writer","cljs.core/pr-writer","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core/PersistentVector","G__28412","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__11970__auto__","__meta","this__11967__auto__","__hash","this__11976__auto__","this__11968__auto__","h__4030__auto__","fexpr__28429","coll__11969__auto__","cljs.core/hash-unordered-coll","this28414","other28415","cljs.core/PROTOCOL_SENTINEL","this__11981__auto__","k__11982__auto__","cljs.core/contains?","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","cljs.core/-with-meta","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core/not-empty","this__11979__auto__","k__11980__auto__","pred__28438","cljs.core/keyword-identical?","expr__28439","G__28441","G__28442","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","this__11984__auto__","this__11971__auto__","this__11977__auto__","entry__11978__auto__","cljs.core/vector?","cljs.core/-assoc","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","cljs.core/-conj","rewrite-clj.node.fn/FnNode","this__4208__auto__","writer__4209__auto__","cljs.core/-write","G__28418","rewrite-clj.node.fn/->FnNode","rewrite-clj.node.fn/map->FnNode","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","js/Error","rewrite-clj.node.fn/sym-index","cljs.core.subs.cljs$core$IFn$_invoke$arity$2","children'","cljs.core/vec","or__3922__auto__","p1__28394#","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","sym-seq","cljs.core/chunk-first","clojure.walk/prewalk","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","cljs.core/max","cljs.core.symbol.cljs$core$IFn$_invoke$arity$1"],"sourcesContent":["(ns ^:no-doc rewrite-clj.node.fn\n  (:require [rewrite-clj.node.protocols :as node]\n            [clojure.walk :as w]))\n\n;; ## Conversion\n\n(defn- construct-fn\n  \"Construct function form.\"\n  [syms vararg body]\n  (list\n    'fn*\n    (vec\n      (concat\n        syms\n        (if vararg\n          (list '& vararg))))\n    body))\n\n(defn- sym-index\n  \"Get index based on the substring following the parameter's `%`.\n   Zero means vararg.\"\n  [n]\n  (cond (= n \"&\") 0\n        (= n \"\") 1\n        (re-matches #\"\\d+\" n) (js/parseInt n)\n        :else (throw (js/Error. \"arg literal must be %, %& or %integer.\"))))\n\n;; TODO: No promises available\n(defn- symbol->gensym\n  \"If symbol starting with `%`, convert to respective gensym.\"\n  [sym-seq vararg? max-n sym]\n  (if (symbol? sym)\n    (let [nm (name sym)]\n      (if (= (.indexOf nm \"%\") 0)\n        (let [i (sym-index (subs nm 1))]\n;;           (if (and (= i 0) (not (realized? vararg?)))\n;;             (deliver vararg? true))\n          (swap! max-n max i)\n          (nth sym-seq i))))))\n\n;; TODO: No promises available\n(defn- fn-walk\n  \"Walk the form and create an expand function form.\"\n  [form]\n  (let [syms (for [i (range)\n                   :let [base (if (= i 0)\n                                \"rest__\"\n                                (str \"p\" i \"__\"))\n                         s (name (gensym base))]]\n               (symbol (str s \"#\")))\n        vararg? false ;(promise)\n        max-n (atom 0)\n        body (w/prewalk\n               #(or (symbol->gensym syms vararg? max-n %) %)\n               form)]\n    (construct-fn\n      (take @max-n (rest syms))\n      nil\n;;       (if (deref vararg? 0 nil)\n;;         (first syms))\n      body)))\n\n;; ## Node\n\n(defrecord FnNode [children]\n  node/Node\n  (tag [_] :fn)\n  (printable-only? [_]\n    false)\n  (sexpr [_]\n    (fn-walk (node/sexprs children)))\n  (length [_]\n    (+ 3 (node/sum-lengths children)))\n  (string [_]\n    (str \"#(\" (node/concat-strings children) \")\"))\n\n  node/InnerNode\n  (inner? [_]\n    true)\n  (children [_]\n    children)\n  (replace-children [this children']\n    (assoc this :children children'))\n\n  Object\n  (toString [this]\n    (node/string this)))\n\n;; TODO\n;(node/make-printable! FnNode)\n\n;; ## Constructor\n\n(defn fn-node\n  \"Create node representing an anonymous function.\"\n  [children]\n  (->FnNode children))\n"]}