{"version":3,"file":"rewrite_clj.zip.whitespace.js","sources":["rewrite_clj/zip/whitespace.cljs"],"mappings":"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","names":["var_args","G__28884","rewrite-clj.zip.whitespace/prepend-newline","js/Error","zloc","n","G__28876","rewrite-clj.zip.whitespace/append-space","and__3911__auto__","clojure.zip/insert-left","rewrite-clj.node/newlines","rewrite-clj.zip.whitespace/whitespace-or-comment?","rewrite_clj.zip.whitespace.prepend_space.cljs$core$IFn$_invoke$arity$2","rewrite-clj.zip.whitespace/skip-whitespace-left","clojure.zip/insert-right","rewrite-clj.zip.whitespace/whitespace?","rewrite-clj.zip.whitespace/skip","G__28857","rewrite-clj.zip.whitespace/skip-whitespace","f","p?","cljs.core/not","rewrite-clj.zip.whitespace/linebreak?","cljs.core.take_while.cljs$core$IFn$_invoke$arity$2","cljs.core/complement","clojure.zip/end?","rewrite_clj.zip.whitespace.skip_whitespace.cljs$core$IFn$_invoke$arity$2","clojure.zip/right","rewrite_clj.zip.whitespace.append_space.cljs$core$IFn$_invoke$arity$2","cljs.core/iterate","G__28851","clojure.zip/node","rewrite-clj.node/linebreak?","cljs.core/identity","rewrite-clj.node/spaces","rewrite-clj.zip.whitespace/comment?","G__28867","rewrite-clj.zip.whitespace/prepend-space","G__28853","rewrite-clj.node/whitespace-or-comment?","G__28852","rewrite-clj.node/comment?","cljs.core/first","rewrite_clj.zip.whitespace.append_newline.cljs$core$IFn$_invoke$arity$2","rewrite-clj.zip.whitespace/whitespace-not-linebreak?","rewrite_clj.zip.whitespace.prepend_newline.cljs$core$IFn$_invoke$arity$2","G__28887","rewrite-clj.zip.whitespace/append-newline","cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2","G__28846","rewrite-clj.node/whitespace?","clojure.zip/left"],"sourcesContent":["(ns rewrite-clj.zip.whitespace\n  (:require [rewrite-clj.node :as node]\n            [clojure.zip :as z]))\n\n;; ## Predicates\n\n(defn whitespace?\n  [zloc]\n  (some-> zloc z/node node/whitespace?))\n\n(defn linebreak?\n  [zloc]\n  (some-> zloc z/node node/linebreak?))\n\n(defn comment?\n  [zloc]\n  (some-> zloc z/node node/comment?))\n\n(defn whitespace-not-linebreak?\n  [zloc]\n  (and\n   (whitespace? zloc)\n   (not (linebreak? zloc))))\n\n(defn whitespace-or-comment?\n  [zloc]\n  (some-> zloc z/node node/whitespace-or-comment?))\n\n\n;; ## Movement\n\n(defn skip\n  \"Perform the given movement while the given predicate returns true.\"\n  [f p? zloc]\n  (->> (iterate f zloc)\n       (take-while identity)\n       (take-while (complement z/end?))\n       (drop-while p?)\n       (first)))\n\n(defn skip-whitespace\n  \"Perform the given movement (default: `z/right`) until a non-whitespace/\n   non-comment node is encountered.\"\n  ([zloc] (skip-whitespace z/right zloc))\n  ([f zloc] (skip f whitespace-or-comment? zloc)))\n\n(defn skip-whitespace-left\n  \"Move left until a non-whitespace/non-comment node is encountered.\"\n  [zloc]\n  (skip-whitespace z/left zloc))\n\n;; ## Insertion\n\n(defn prepend-space\n  \"Prepend a whitespace node representing the given number of spaces (default: 1).\"\n  ([zloc] (prepend-space zloc 1))\n  ([zloc n]\n   (z/insert-left zloc (node/spaces n))))\n\n(defn append-space\n  \"Append a whitespace node representing the given number of spaces (default: 1).\"\n  ([zloc] (append-space zloc 1))\n  ([zloc n]\n   (z/insert-right zloc (node/spaces n))))\n\n(defn prepend-newline\n  \"Prepend a newlines node representing the given number of newlines (default: 1).\"\n  ([zloc] (prepend-newline zloc 1))\n  ([zloc n]\n   (z/insert-left zloc (node/newlines n))))\n\n(defn append-newline\n  \"Append a newline node representing the given number of newlines (default: 1).\"\n  ([zloc] (append-newline zloc 1))\n  ([zloc n]\n   (z/insert-right zloc (node/newlines n))))\n"]}