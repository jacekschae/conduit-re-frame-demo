{"version":3,"file":"day8.re_frame_10x.utils.pretty_print_condensed.js","sources":["day8/re_frame_10x/utils/pretty_print_condensed.cljs"],"mappings":"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","names":["match","cljs.core/set?","coll","and__3911__auto__","enter-pred","form","cljs.core.partial.cljs$core$IFn$_invoke$arity$4","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","depth","max-depth","clojure.string.join.cljs$core$IFn$_invoke$arity$2","day8.re-frame-10x.utils.pretty-print-condensed/pretty-condensed","name","cljs.core/second","cljs.core/re-find","s","trunc-prefix","n","named","cljs.core.subs.cljs$core$IFn$_invoke$arity$3","cljs.core/count","cljs.core.symbol.cljs$core$IFn$_invoke$arity$2","G__29332","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","rep","clojure.string/replace","var_args","G__29434","js/Error","js/Math.floor","prefix","content-budget","ns-string","limit","cljs.core/list?","the-name","cljs.core/name","day8.re_frame_10x.utils.pretty_print_condensed.truncate_string.cljs$core$IFn$_invoke$arity$3","location","param","day8.re-frame-10x.utils.pretty-print-condensed/truncate-named","the-ns","c","string","G__29331","day8.re-frame-10x.utils.pretty-print-condensed/edges","end","ns-budget","cljs.core/even?","G__29336","cljs.core/fn?","or__3922__auto__","G__29438","ns-prefix-size","vec__29430","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","left","right","cljs.core.symbol.cljs$core$IFn$_invoke$arity$1","G__29329","G__29330","kw?","day8.re-frame-10x.utils.pretty-print-condensed/with-edges","cljs.core/map?","cljs.core/Keyword","day8.re_frame_10x.utils.pretty_print_condensed.truncate_segments.cljs$core$IFn$_invoke$arity$2","day8.re-frame-10x.utils.pretty-print-condensed/str->namespaced-sym","G__29416","G__29328","day8.re-frame-10x.utils.pretty-print-condensed/truncate-string","per-side-budget","cljs.core/seq?","day8.re-frame-10x.utils.pretty-print-condensed/truncate","cut-from","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","cljs.core/INamed","day8.re_frame_10x.utils.pretty_print_condensed.truncate_segments.cljs$core$IFn$_invoke$arity$4","cljs.core/vector?","value","cljs.core/namespace","G__29407","day8.re-frame-10x.utils.pretty-print-condensed/truncate-segments","day8.re_frame_10x.utils.pretty_print_condensed.pretty_condensed.cljs$core$IFn$_invoke$arity$4","cljs.core/coll?"],"sourcesContent":["(ns ^{:doc    \"Utilities for pretty-printing abbreviated Clojure forms\"\n      :author \"Matthew Huebert\"}\nday8.re-frame-10x.utils.pretty-print-condensed\n  (:require [clojure.string :as str]))\n\n\n(defn ^string truncate-string\n  \"Truncate a string to length `n`.\n\n  Removal occurs at `cut-from`, which may be :start, :end, or :middle.\n\n  Truncation is indicated by `\u2026` at start/end, or `...` at middle, for readability. \"\n  ([n string]\n   (n :end string))\n  ([n cut-from string]\n   (let [c (count string)]\n     (if (> c n)\n       (case cut-from\n         :start (str \"\u2026\" (subs string (- c (dec n)) c))\n         :end (str (subs string 0 (dec n)) \"\u2026\")\n         :middle (case n\n                   1 \"\u2026\"\n                   2 (truncate-string n :start string)\n                   3 (str (subs string 0 1) \"\u2026\" (subs string (dec c) c))\n                   (let [content-budget  (- n 2)\n                         per-side-budget (-> content-budget\n                                             (/ 2)\n                                             (js/Math.floor))]\n                     ;; 100 - 9 = 91 / 2 = 45\n                     ;; subs string 0\n                     (str (subs string 0 (cond-> per-side-budget\n                                                 (even? content-budget)\n                                                 (dec)))\n                          \"...\"\n                          (subs string (- c per-side-budget) c)))))\n       string))))\n\n(comment\n  (assert (= (truncate-string 5 :start \"123456789\") \"\u20266789\"))\n  (assert (= (truncate-string 5 :end \"123456789\") \"1234\u2026\"))\n\n  ;; special case use of \u2026 for short :middle-truncated strings\n  (assert (= (truncate-string 1 :middle \"123456789\") \"\u2026\"))\n  (assert (= (truncate-string 2 :middle \"123456789\") \"\u20269\"))\n  (assert (= (truncate-string 3 :middle \"123456789\") \"1\u20269\"))\n\n  (assert (= (truncate-string 4 :middle \"123456789\") \"...9\"))\n  (assert (= (truncate-string 5 :middle \"123456789\") \"1...9\"))\n  (assert (= (truncate-string 6 :middle \"123456789\") \"1...89\"))\n  (assert (= (truncate-string 7 :middle \"123456789\") \"12...89\"))\n  (assert (= (truncate-string 8 :middle \"123456789\") \"12...789\")))\n\n(defn ^string truncate-segments\n  ([s limit] (truncate-segments s limit #\"^[^.]+\\.\" \"\u2026\"))\n  ([s limit match trunc-prefix]\n   (if (<= (count s) limit)\n     s\n     (let [rep (str/replace s match trunc-prefix)]\n       (if (= rep s)\n         trunc-prefix\n         (recur (str/replace s match trunc-prefix)\n                limit\n                match\n                trunc-prefix))))))\n\n\n(comment\n  (assert (= (truncate-segments \"a.bcd\" 1) \"\u2026\"))\n  (assert (= (truncate-segments \"a.bcd\" 2) \"\u2026\"))\n  (assert (= (truncate-segments \"a.bcd\" 3) \"\u2026\"))\n  (assert (= (truncate-segments \"a.bcd\" 4) \"\u2026bcd\"))\n  (assert (= (truncate-segments \"a.bcd\" 5) \"a.bcd\"))\n  (assert (= (truncate-segments \"a.bcd\" 6) \"a.bcd\"))\n\n\n  (assert (= (truncate-segments \"a.b.c\" 1) \"\u2026\"))\n  (assert (= (truncate-segments \"a.b.c\" 2) \"\u2026c\"))\n  (assert (= (truncate-segments \"a.b.c\" 3) \"\u2026c\"))\n  (assert (= (truncate-segments \"a.b.c\" 4) \"\u2026b.c\"))\n  (assert (= (truncate-segments \"a.b.c\" 5) \"a.b.c\"))\n  (assert (= (truncate-segments \"a.b.c\" 6) \"a.b.c\")))\n\n(defn ^string truncate-named\n  \"Truncates `named`, which must satisfy INamed protocol, to within `n`\n   characters, cutting from beginning. Adds a `\u2026` prefix to indicate where\n   cutting has occurred.\"\n  [n named]\n  (let [the-ns         (namespace named)\n        the-name       (name named)\n        kw?            (keyword? named)\n        ns-prefix-size (if kw? 3 2)]\n    (if (or (> (count the-name) (if the-ns (- n ns-prefix-size) n))\n            (nil? the-ns))\n      (let [prefix (cond-> (if kw? \":\" \"\")\n                           the-ns (str \"\u2026/\"))]\n        (str prefix\n             (truncate-string (- n (count prefix)) :start the-name)))\n      (let [end       (str \"/\" the-name)\n            prefix    (if kw? \":\" \"\")\n            ns-budget (- n (count end) (count prefix))\n            ns-string (truncate-segments the-ns ns-budget)]\n        (str prefix\n             ns-string\n             end)))))\n\n\n(assert (= (truncate-named 12 :city/saskatoon)\n\n           \":\u2026/saskatoon\"))\n\n(comment\n\n  (assert (= (truncate-named 1 :saskatoon) \":\u2026\"))\n  (assert (= (truncate-named 2 :saskatoon) \":\u2026\"))\n  (assert (= (truncate-named 3 :saskatoon) \":\u2026n\"))\n  (assert (= (truncate-named 9 :saskatoon) \":\u2026skatoon\"))\n  (assert (= (truncate-named 10 :saskatoon) \":saskatoon\"))\n\n\n  (assert (= (truncate-named 1 :city/saskatoon) \":\u2026/\u2026\"))\n  (assert (= (truncate-named 2 :city/saskatoon) \":\u2026/\u2026\"))\n  (assert (= (truncate-named 3 :city/saskatoon) \":\u2026/\u2026\"))\n  (assert (= (truncate-named 4 :city/saskatoon) \":\u2026/\u2026\"))\n  (assert (= (truncate-named 5 :city/saskatoon) \":\u2026/\u2026n\"))\n  (assert (= (truncate-named 11 :city/saskatoon) \":\u2026/\u2026skatoon\"))\n  (assert (= (truncate-named 12 :city/saskatoon) \":\u2026/saskatoon\"))\n  (assert (= (truncate-named 13 :city/saskatoon) \":\u2026/saskatoon\"))\n  (assert (= (truncate-named 14 :city/saskatoon) \":\u2026/saskatoon\"))\n  (assert (= (truncate-named 15 :city/saskatoon) \":city/saskatoon\"))\n  (assert (= (truncate-named 16 :city/saskatoon) \":city/saskatoon\"))\n\n  (assert (= (truncate-named 8 'saskatoon) \"\u2026skatoon\"))\n  (assert (= (truncate-named 9 'saskatoon) \"saskatoon\"))\n  (assert (= (truncate-named 10 'saskatoon) \"saskatoon\"))\n\n  (assert (= (truncate-named 1 'city/saskatoon) \"\u2026/\u2026\"))\n  (assert (= (truncate-named 2 'city/saskatoon) \"\u2026/\u2026\"))\n  (assert (= (truncate-named 3 'city/saskatoon) \"\u2026/\u2026\"))\n  (assert (= (truncate-named 4 'city/saskatoon) \"\u2026/\u2026n\"))\n  (assert (= (truncate-named 10 'city/saskatoon) \"\u2026/\u2026skatoon\"))\n  (assert (= (truncate-named 11 'city/saskatoon) \"\u2026/saskatoon\"))\n  (assert (= (truncate-named 12 'city/saskatoon) \"\u2026/saskatoon\"))\n  (assert (= (truncate-named 13 'city/saskatoon) \"\u2026/saskatoon\"))\n  (assert (= (truncate-named 14 'city/saskatoon) \"city/saskatoon\"))\n  (assert (= (truncate-named 15 'city/saskatoon) \"city/saskatoon\")))\n\n(defn ^string truncate [n location param]\n  (if (satisfies? INamed param)\n    (truncate-named n param)\n    (truncate-string n location (str param))))\n\n(defn str->namespaced-sym [s]\n  (if (string? s)\n    (let [name (second (re-find #\"\\.([^.]+)$\" s))]\n      (if name (symbol (subs s 0 (- (count s) (count name) 1))\n                       name)\n               (symbol s)))\n    s))\n\n(defn edges\n  \"Return left and right edges of a collection (eg. brackets plus prefixes), defaults to [< >].\"\n  [coll]\n  (cond (map? coll) [\\{ \\}]\n        (vector? coll) [\\[ \\]]\n        (set? coll) [\"#{\" \\}]\n        (or (list? coll)\n            (seq? coll)) [\"(\" \")\"]\n        :else [\"<\" \">\"]))\n\n(defn with-edges\n  \"Wrap `value` with edges of `coll`\"\n  [coll value]\n  (let [[left right] (edges coll)]\n    (str left value right)))\n\n(defn pretty-condensed\n  \"Render form in abbreviated form, showing content only for keywords/strings/symbols and entering collections to a depth of 1.\"\n  ([form] (pretty-condensed 0 coll? 1 form))\n  ([depth enter-pred max-depth form]\n   (cond\n     (satisfies? INamed form) (truncate-named 16 form)\n     (string? form) (truncate-string 16 :middle form)\n     (fn? form) (or (some-> (.-name form)\n                            (str/replace #\"(^.*\\$)(.*)\" \"$2\"))\n                    \"\u0192\")\n     (number? form) (str form)\n     (and (enter-pred form)\n          (< depth max-depth)) (with-edges form\n                                           (str/join \", \" (mapv (partial pretty-condensed (inc depth) enter-pred max-depth) form)))\n     :else (with-edges form \"\u2026\"))))\n"]}