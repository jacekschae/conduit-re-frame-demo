{"version":3,"file":"day8.re_frame_10x.view.traces.js","sources":["day8/re_frame_10x/view/traces.cljs"],"mappings":"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","names":["debug?","cljs.core/reset!","input-error","cljs.core/deref","cljs.core/contains?","categories","item","cljs.core.map.cljs$core$IFn$_invoke$arity$2","day8.re-frame-10x.utils.pretty-print-condensed/pretty-condensed","params","mranderson047.reagent.v0v8v0_alpha2.reagent.core.atom.cljs$core$IFn$_invoke$arity$1","filter-items","G__29463","mranderson047.re-frame.v0v10v2.re-frame.core/subscribe","cljs.core.get.cljs$core$IFn$_invoke$arity$2","tags","clojure.string.join.cljs$core$IFn$_invoke$arity$2","op-name","cljs.core/vector?","operation","id","p__29464","map__29465","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","op-type","duration","cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$2","index","trace","and__3911__auto__","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","G__29486","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/count","visible-traces","filter-type","trace-detail-expansions","G__29479","day8.re-frame-10x.view.traces/add-filter","cljs.core/name","tag-str","cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2","p1__29473#","p1__29474#","p1__29475#","p1__29476#","toggle-category-fn","G__29485","mranderson047.re-frame.v0v10v2.re-frame.core/dispatch","current-traces","G__29483","day8.re-frame-10x.view.components/search-input","save-query","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","cljs.core/seq","G__29468","ev","cljs.core.prn_str.cljs$core$IFn$_invoke$arity$variadic","traces-to-filter","cljs.core.doall.cljs$core$IFn$_invoke$arity$1","cljs.core/List","filter-input","G__29467","G__29490","traces","G__29482","day8.re-frame-10x.view.traces/render-traces","end","G__29481","js/isNaN","js/parseFloat","beginning","G__29480","day8.re-frame-10x.utils.re-com/checkbox","show-row?","day8.re_frame_10x.utils.pretty_print_condensed.truncate_string.cljs$core$IFn$_invoke$arity$3","show-epoch-traces?","G__29484","cljs.core/second","day8.re-frame-10x.view.components/autoscroll-list","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","cljs.core.get_in.cljs$core$IFn$_invoke$arity$3","G__29494","cljs.core/Keyword","G__29462","query","G__29492","_","day8.re-frame-10x.view.traces/render","cljs.core.subs.cljs$core$IFn$_invoke$arity$3","temp__5457__auto__","vec__29469","seq__29470","first__29471","cljs.core/first","cljs.core/next","or__3922__auto__","clojure.string/includes?","clojure.string/lower-case","day8.re-frame-10x.utils.pretty-print-condensed/truncate","day8.re-frame-10x.utils.pretty-print-condensed/str->namespaced-sym","G__29488","G__29491","G__29487","G__29489","G__29478","js/console","cljs.core/every-pred","day8.re-frame-10x.view.traces/query->fn","G__29493","G__29477"],"sourcesContent":["(ns day8.re-frame-10x.view.traces\n  (:require [day8.re-frame-10x.view.components :as components]\n            [day8.re-frame-10x.utils.pretty-print-condensed :as pp]\n            [clojure.string :as str]\n            [mranderson047.reagent.v0v8v0-alpha2.reagent.core :as r]\n            [mranderson047.re-frame.v0v10v2.re-frame.core :as rf]\n            [day8.re-frame-10x.utils.re-com :as rc]))\n\n(defn query->fn [query]\n  (if (= :contains (:filter-type query))\n    (fn [trace]\n      (str/includes? (str/lower-case (str (:operation trace) \" \" (:op-type trace)))\n                     (:query query)))\n    (fn [trace]\n      (< (:query query) (:duration trace)))))\n\n(defn add-filter [filter-items filter-input filter-type]\n  (rf/dispatch [:traces/add-filter filter-input filter-type]))\n\n(defn render-traces [visible-traces filter-items filter-input trace-detail-expansions]\n  (let [debug? @(rf/subscribe [:settings/debug?])]\n    (doall\n      (->>\n        visible-traces\n        (map-indexed (fn [index {:keys [op-type id operation tags duration] :as trace}]\n                       (let [show-row? (get-in @trace-detail-expansions [:overrides id]\n                                               (:show-all? @trace-detail-expansions))\n                             op-name   (if (vector? operation)\n                                         (second operation)\n                                         operation)\n                             #_#__ (js/console.log (devtools/header-api-call tags))]\n                         (list [:tr {:key      id\n                                     :on-click #(rf/dispatch [:traces/toggle-trace id])\n                                     :class    (str/join \" \" [\"trace--trace\"\n                                                              (case op-type\n                                                                :sub/create \"trace--sub-create\"\n                                                                :sub/run \"trace--sub-run\"\n                                                                :sub/dispose \"trace--sub-run\"\n                                                                :event \"trace--event\"\n                                                                :render \"trace--render\"\n                                                                :re-frame.router/fsm-trigger \"trace--fsm-trigger\"\n                                                                nil)])}\n                                [:td.trace--toggle\n                                 [:button.expansion-button (if show-row? \"\u25bc\" \"\u25b6\")]]\n                                [:td.trace--op\n                                 [:span.op-string {:on-click (fn [ev]\n                                                               (add-filter filter-items (name op-type) :contains)\n                                                               (.stopPropagation ev))}\n                                  (str op-type)]]\n                                [:td.trace--op-string\n                                 [:span.op-string {:on-click (fn [ev]\n                                                               (add-filter filter-items (name op-name) :contains)\n                                                               (.stopPropagation ev))}\n                                  (pp/truncate 20 :middle (pp/str->namespaced-sym op-name)) \" \"\n                                  [:span\n                                   {:style {:opacity 0.5\n                                            :display \"inline-block\"}}\n                                   (when-let [[_ & params] (or (get tags :query-v)\n                                                               (get tags :event))]\n                                     (->> (map pp/pretty-condensed params)\n                                          (str/join \", \")\n                                          (pp/truncate-string :middle 40)))]]]\n                                (if debug?\n                                  [:td.trace--meta\n                                   (:reaction (:tags trace)) \"/\" id]\n                                  [:td.trace--meta\n\n                                   (.toFixed duration 1) \" ms\"])]\n                               (when show-row?\n                                 [:tr.trace--details {:key       (str id \"-details\")\n                                                      :tab-index 0}\n                                  [:td]\n                                  [:td.trace--details-tags {:col-span 2\n                                                            :on-click #(.log js/console trace)}\n                                   [:div.trace--details-tags-text\n                                    (let [tag-str (prn-str tags)]\n                                      (str (subs tag-str 0 400)\n                                           (when (< 400 (count tag-str))\n                                             \" ...\")))]]\n                                  [:td.trace--meta.trace--details-icon\n                                   {:on-click #(.log js/console tags)}]])))))))))\n\n(defn render []\n  (let [filter-input            (r/atom \"\")\n        filter-items            (rf/subscribe [:traces/filter-items])\n        filter-type             (r/atom :contains)\n        input-error             (r/atom false)\n        categories              (rf/subscribe [:traces/categories])\n        trace-detail-expansions (rf/subscribe [:traces/expansions])\n        beginning               (rf/subscribe [:epochs/beginning-trace-id])\n        end                     (rf/subscribe [:epochs/ending-trace-id])\n        traces                  (rf/subscribe [:traces/all-visible-traces])\n        current-traces          (rf/subscribe [:traces/current-event-visible-traces])\n        show-epoch-traces?      (rf/subscribe [:trace-panel/show-epoch-traces?])]\n    (fn []\n      (let [toggle-category-fn #(rf/dispatch [:traces/toggle-categories %])\n            traces-to-filter   (if @show-epoch-traces?\n                                 @current-traces\n                                 @traces)\n            visible-traces     (cond->> traces-to-filter\n                                        ;; Remove cached subscriptions. Could add this back in as a setting later\n                                        ;; but it's pretty low signal/noise 99% of the time.\n                                        true (remove (fn [trace] (and (= :sub/create (:op-type trace))\n                                                                      (get-in trace [:tags :cached?]))))\n                                        (seq @categories) (filter (fn [trace] (when (contains? @categories (:op-type trace)) trace)))\n                                        (seq @filter-items) (filter (apply every-pred (map query->fn @filter-items)))\n                                        true (sort-by :id))\n            save-query         (fn [_]\n                                 (if (and (= @filter-type :slower-than)\n                                          (js/isNaN (js/parseFloat @filter-input)))\n                                   (reset! input-error true)\n                                   (do\n                                     (reset! input-error false)\n                                     (add-filter filter-items @filter-input @filter-type))))]\n\n        [:div.tab-contents\n         [:div.filter\n          [:div.filter-control\n           [:ul.filter-categories \"show: \"\n            [:li.filter-category {:class    (when (contains? @categories :event) \"active\")\n                                  :on-click #(rf/dispatch [:traces/toggle-categories #{:event}])}\n             \"events\"]\n            [:li.filter-category {:class    (when (contains? @categories :sub/run) \"active\")\n                                  :on-click #(rf/dispatch [:traces/toggle-categories #{:sub/run :sub/create :sub/dispose}])}\n             \"subscriptions\"]\n            [:li.filter-category {:class    (when (contains? @categories :render) \"active\")\n                                  :on-click #(rf/dispatch [:traces/toggle-categories #{:render}])}\n             \"reagent\"]\n            [:li.filter-category {:class    (when (contains? @categories :re-frame.router/fsm-trigger) \"active\")\n                                  :on-click #(rf/dispatch [:traces/toggle-categories #{:re-frame.router/fsm-trigger :componentWillUnmount}])}\n             \"internals\"]]\n           [rc/checkbox\n            :model show-epoch-traces?\n            :on-change #(rf/dispatch [:trace-panel/update-show-epoch-traces? %])\n            :label \"Only show traces for this epoch?\"]\n           [:div.filter-fields\n            [:select {:value     @filter-type\n                      :on-change #(reset! filter-type (keyword (.. % -target -value)))}\n             [:option {:value \"contains\"} \"contains\"]\n             [:option {:value \"slower-than\"} \"slower than\"]]\n            [:div.filter-control-input {:style {:margin-left 10}}\n             [components/search-input {:on-save   save-query\n                                       :on-change #(reset! filter-input (.. % -target -value))}]\n             (if @input-error\n               [:div.input-error {:style {:color \"red\" :margin-top 5}}\n                \"Please enter a valid number.\"])]]]\n          [:ul.filter-items\n           (map (fn [item]\n                  ^{:key (:id item)}\n                  [:li.filter-item\n                   [:button.button\n                    {:style    {:margin 0}\n                     :on-click #(rf/dispatch [:traces/remove-filter (:id item)])}\n                    (:filter-type item) \": \" [:span.filter-item-string (:query item)]]])\n                @filter-items)]]\n         [components/autoscroll-list {:class \"panel-content-scrollable\" :scroll? true}\n          [:table\n           [:thead>tr\n            [:th {:style {:padding 0}}\n             [:button.text-button\n              {:style    {:cursor \"pointer\"}\n               :on-click #(rf/dispatch [:traces/toggle-all-expansions])}\n              (if (:show-all? @trace-detail-expansions) \"-\" \"+\")]]\n            [:th \"operations\"]\n            [:th\n             (str (count visible-traces) \" traces\")\n             [:span \"(\" [:button.text-button {:on-click #(rf/dispatch [:epochs/reset])} \"clear\"] \")\"]]\n            [:th {:style {:text-align \"right\"}} \"meta\"]]\n           [:tbody (render-traces visible-traces filter-items filter-input trace-detail-expansions)]]]]))))\n"]}