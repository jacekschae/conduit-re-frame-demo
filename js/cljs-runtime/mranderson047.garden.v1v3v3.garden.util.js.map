{"version":3,"file":"mranderson047.garden.v1v3v3.garden.util.js","sources":["mranderson047/garden/v1v3v3/garden/util.cljc"],"mappings":"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","names":["p","mranderson047.garden.v1v3v3.garden.util/to-str","xs","mranderson047.garden.v1v3v3.garden.util/space-join","x","v-original-seqs","cljs.core/vec","seqs","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/first","s","x__4006__auto__","y__4007__auto__","a","x__4009__auto__","y__4010__auto__","b","n","mranderson047.garden.v1v3v3.garden.util/hash-map?","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","goog.string/format","fmt","args","ys","iter__4292__auto__","s__25172","cljs.core/LazySeq","temp__5457__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4290__auto__","size__4291__auto__","cljs.core/count","b__25180","cljs.core/chunk-buffer","i__25179","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__25171","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","cljs.core.map.cljs$core$IFn$_invoke$arity$2","v-seqs","this","mranderson047.garden.v1v3v3.garden.types/CSSAtRule","step","mranderson047.garden.v1v3v3.garden.util/clip","m","more","and__3911__auto__","mranderson047.garden.v1v3v3.garden.util/at-rule?","increment","var_args","args__4502__auto__","len__4499__auto__","i__4500__auto__","argseq__4503__auto__","cljs.core/IndexedSeq","mranderson047.garden.v1v3v3.garden.util/int->string","p__25153","vec__25154","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","seq25151","G__25152","cljs.core/next","self__4486__auto__","mranderson047.garden.v1v3v3.garden.util/natural?","radix","or__3922__auto__","cljs.core/Keyword","mranderson047.garden.v1v3v3.garden.util/at-import?","cljs.core/name","mranderson047.garden.v1v3v3.garden.util/as-str","seq25138","self__4487__auto__","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","i","rst","mranderson047.garden.v1v3v3.garden.util/at-keyframes?","mranderson047.garden.v1v3v3.garden.util/prefix","cljs.core/map?","cljs.core/record?","cljs.core/last","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/str","cljs.core/PROTOCOL_SENTINEL","goog.object/set","mranderson047.garden.v1v3v3.garden.util/ToString","G__25126","G__25127","G__25128","G__25129","G__25130","G__25131","mranderson047.garden.v1v3v3.garden.util/rule?","cljs.core/vector?","mranderson047.garden.v1v3v3.garden.util/average","seq25204","G__25205","G__25206","mranderson047.garden.v1v3v3.garden.util/at-media?","top","mranderson047.garden.v1v3v3.garden.util/format","seq25115","G__25116","vec__25201","clojure.string.join.cljs$core$IFn$_invoke$arity$2","mranderson047.garden.v1v3v3.garden.util/between?","cljs.core.apply.cljs$core$IFn$_invoke$arity$4","cljs.core/+","mranderson047.garden.v1v3v3.garden.util/declaration?","mranderson047.garden.v1v3v3.garden.util/comma-join","bottom","mranderson047.garden.v1v3v3.garden.util/string->int","p__25144","vec__25145","seq25142","G__25143","mranderson047.garden.v1v3v3.garden.util/wrap-quotes","x__4211__auto__","m__4212__auto__","mranderson047/garden.v1v3v3.garden.util.to-str","goog/typeOf","cljs.core/missing-protocol","cljs.core/integer?","mranderson047.garden.v1v3v3.garden.util/vendor-prefix","temp__5455__auto__","cljs.core/sequential?","cljs.core/chunk-first","js/parseInt","mranderson047.garden.v1v3v3.garden.util/cartesian-product","seq25214","cljs.core/every?"],"sourcesContent":["(ns mranderson047.garden.v1v3v3.garden.util\n  \"Utility functions used by Garden.\"\n  (:require\n   [clojure.string :as str]\n   [mranderson047.garden.v1v3v3.garden.types :as t]\n   #?@(:cljs\n       [[goog.string]\n        [goog.string.format]]))\n  #?(:clj\n     (:refer-clojure :exclude [format]))\n  #?(:clj\n     (:import mranderson047.garden.v1v3v3.garden.types.CSSAtRule)))\n\n;; ---------------------------------------------------------------------\n;; String utilities\n\n#?(:cljs\n   (defn format\n     \"Formats a string using goog.string.format.\"\n     [fmt & args]\n     (apply goog.string/format fmt args)))\n\n;; To avoid the pain of #?cljs :refer.\n#?(:clj\n   (def format #'clojure.core/format))\n\n(defprotocol ToString\n  (^String to-str [this] \"Convert a value into a string.\"))\n\n(extend-protocol ToString\n  #?(:clj clojure.lang.Keyword)\n  #?(:cljs Keyword)\n  (to-str [this] (name this))\n\n  #?(:clj Object)\n  #?(:cljs default)\n  (to-str [this] (str this))\n\n  nil (to-str [this] \"\"))\n\n(defn ^String as-str\n  \"Convert a variable number of values into strings.\"\n  [& args]\n  (apply str (map to-str args)))\n\n(defn string->int\n  \"Convert a string to an integer with optional base.\"\n  [s & [radix]]\n  (let [radix (or radix 10)]\n    #?(:clj\n       (Integer/parseInt ^String s ^Long radix))\n    #?(:cljs\n       (js/parseInt s radix))))\n\n(defn int->string\n  \"Convert an integer to a string with optional base.\"\n  [i & [radix]]\n  (let [radix (or radix 10)]\n    #?(:clj\n       (Integer/toString ^Long i ^Long radix))\n    #?(:cljs\n       (.toString i radix))))\n\n(defn space-join\n  \"Return a space separated list of values.\"\n  [xs]\n  (str/join \" \" (map to-str xs)))\n\n(defn comma-join\n  \"Return a comma separated list of values. Subsequences are joined with\n   spaces.\"\n  [xs]\n  (let [ys (for [x xs]\n             (if (sequential? x)\n               (space-join x)\n               (to-str x)))]\n    (str/join \", \" ys)))\n\n(defn wrap-quotes\n  \"Wrap a string with double quotes.\"\n  [s]\n  (str \\\" s \\\"))\n\n;; ---------------------------------------------------------------------\n;; Predicates\n\n(defn hash-map?\n  \"True if `(map? x)` and `x` does not satisfy `clojure.lang.IRecord`.\"\n  [x]\n  (and (map? x) (not (record? x))))\n\n(def\n  ^{:doc \"Alias to `vector?`.\"}\n  rule? vector?)\n\n(def\n  ^{:doc \"Alias to `hash-map?`.\"}\n  declaration? hash-map?)\n\n(defn at-rule?\n  [x]\n  (instance? #?(:clj CSSAtRule) #?(:cljs t/CSSAtRule) x))\n\n(defn at-media?\n  \"True if `x` is a CSS `@media` rule.\"\n  [x]\n  (and (at-rule? x) (= (:identifier x) :media)))\n\n(defn at-keyframes?\n  \"True if `x` is a CSS `@keyframes` rule.\"\n  [x]\n  (and (at-rule? x) (= (:identifier x) :keyframes)))\n\n(defn at-import?\n  \"True if `x` is a CSS `@import` rule.\"\n  [x]\n  (and (at-rule? x) (= (:identifier x) :import)))\n\n(defn prefix\n  \"Attach a CSS style prefix to s.\"\n  [p s]\n  (let [p (to-str p)]\n    (if (= \\- (last p))\n      (str p s)\n      (str p \\- s))))\n\n(defn vendor-prefix\n  \"Attach a CSS vendor prefix to s.\"\n  [p s]\n  (let [p (to-str p)]\n    (if (= \\- (first p))\n      (prefix p s)\n      (prefix (str \\- p) s))))\n\n;; ---------------------------------------------------------------------\n;; Math utilities\n\n(defn natural?\n  \"True if n is a natural number.\"\n  [n]\n  (and (integer? n) (pos? n)))\n\n(defn between?\n  \"True if n is a number between a and b.\"\n  [n a b]\n  (let [bottom (min a b)\n        top (max a b)]\n    (and (>= n bottom) (<= n top))))\n\n(defn clip\n  \"Return a number such that n is no less than a and no more than b.\"\n  [a b n]\n  (let [[a b] (if (<= a b) [a b] [b a])]\n    (max a (min b n))))\n\n(defn average\n  \"Return the average of two or more numbers.\"\n  [n m & more]\n  (/ (apply + n m more) (+ 2.0 (count more))))\n\n;; Taken from clojure.math.combinatorics.\n(defn cartesian-product\n  \"All the ways to take one item from each sequence.\"\n  [& seqs]\n  (let [v-original-seqs (vec seqs)\n\tstep\n\t(fn step [v-seqs]\n\t  (let [increment\n\t\t(fn [v-seqs]\n\t\t  (loop [i (dec (count v-seqs)), v-seqs v-seqs]\n\t\t    (if (= i -1) nil\n\t\t\t(if-let [rst (next (v-seqs i))]\n\t\t\t  (assoc v-seqs i rst)\n\t\t\t  (recur (dec i) (assoc v-seqs i (v-original-seqs i)))))))]\n\t    (when v-seqs\n              (cons (map first v-seqs)\n                    (lazy-seq (step (increment v-seqs)))))))]\n    (when (every? seq seqs)\n      (lazy-seq (step v-original-seqs)))))\n"]}