{"version":3,"file":"mranderson047.garden.v1v3v3.garden.compression.js","sources":["mranderson047/garden/v1v3v3/garden/compression.cljc"],"mappings":";;AAkCG;;;;0DAAA,kEAAAa,5HAAOD;AAAP,AAAA,IAAAE,aAAAD;UAAA,AAAAE,4CAAAD,WAAA,IAAA,jEAGIL;SAHJ,AAAAM,4CAAAD,WAAA,IAAA,hEAGQT;AAHR,AAIE;kBAAKC;AACH,IAAAH,qBAAiB,AAACC,kBAAQC,GAAGC,9CAD/B;AACE,AAAA,oBAAAH;AAAA,AAAA,YAAAA,RAAWD;AAAX,AAAA,kDAAA,wDAAA,8DAAA,lEACQO,4DACEP,2DACD,AAACsC,gBAAMtC;;AAHhB;;;;;AAMJ,AAAA;;;;;;2DAAA,mEAAAuB,9HAAOM;AAAP,AAAA,IAAAL,qBAAA;AAAA,AAAA,IAAAC,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAAD,wBAAA,CAAA,UAAAE;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,EAAA,CAAA,MAAA,AAAAH,4BAAA,AAAA,KAAAI,qBAAA,AAAAJ,yBAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAAK,8FAAAF;;;2GAKKrB,3GALL,AAAA,AAAA,AAAAuB,gGAAA;AAME,IAAMrB,KAAG,AAACC,4CAAIC,wDAASJ,7GANzB;AAME,AACE;kBAAKF;AACH,sBAAA,fAAC8B,PADH;kBACED;AAAA,AAAO,QAAAA,iDAAAA,oDAAAA,LAAG7B,gCAAAA;;CAAGI;;;;;AARnB,AAAA,AAAAqB,mFAAA;;AAAA;AAAA,AAAA,AAAAA,6EAAA,WAAAC;AAAA,AAAA,IAAAC,qBAAA;AAAA,AAAA,OAAAA,wDAAA,AAAAC,cAAAF;;;AAWA,AAXA;;;AAcEhC,sEACA,gJAAA,mFAAA,0DAAA,8BAAA,mFAAA,4DAAA,oBAAA,mFAAA,0DAAA,kBAAA,mFAAA,4DAAA,oBAAA,mFAAA,2DAAA,iBAAA,mFAAA,uDAAA,gBAAA,mFAAA,uDAAA,gBAAA,mFAAA,8DAAA,aAAA,mFAAA,wDAAA,cAAA,mFAAA,qEAAA,eAAA,mFAAA,mDAAA,v1DAACC;AAkBH;;;qEAAA,rEAAMoC,kJAEHC;AAFH,AAGE,IAAOf,KAAGe;SAAV,LAAqBC;;AACnB,IAAAvB,qBAAkC,CAAChB,oGAAAA,wGAAAA,NAAqBuB,oFAAAA,pTAD1D;AACE,AAAA,oBAAAP;AAAA,IAAAC,aAAAD;IAAAC,iBAAA,EAAA,EAAA,EAAA,CAAAA,cAAA,QAAA,EAAA,EAAA,CAAA,AAAAA,iDAAA,WAAA,CAAAC,gCAAA,AAAAD,+BAAA,KAAA,OAAA,QAAA,AAAAE,8CAAAC,mBAAAH,YAAAA;UAAA,AAAAI,4CAAAJ,eAAA,jEAAiBR;YAAjB,AAAAY,4CAAAJ,eAAA,nEAAqBf;WAArB,AAAAmB,4CAAAJ,eAAA,lEAA2BK;AAA3B,AACE,eAAO,AAACE,6CAAKD,GAAGD;eACT,6CAAKiB,gDAAG,iBAAAhC,WAAME;8DAmqBY,AAAAF,1DAnqBlBA,eAAA,EAAA,CAAAA,oBAAAkC,iCAAA;AAAA,AAAA,QAAAlC;KAAA;AACUL;;;KADV;AAAA;;;KAAA;AAAA;;;KAAA;AAAA;;;KAAA;AAAA;;;KAAA;AAAA;;;KAAA;AAAA;;;KAAA;AAAA;;;KAAA;AAAA;;;KAAA;AAAA;;;;AAWEA;;;;;;;;AACjBqC","names":["mranderson047.garden.v1v3v3.garden.compression/stylesheet-tokenizer","mranderson047.garden.v1v3v3.garden.compression.tokenizer.cljs$core$IFn$_invoke$arity$variadic","chunk","temp__5457__auto__","cljs.core/re-find","re","s","G__24840","tags+regexes","tag","fs","cljs.core.map.cljs$core$IFn$_invoke$arity$2","mranderson047.garden.v1v3v3.garden.compression/token-fn","p__24745","vec__24747","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","temp__5455__auto__","map__24833","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","size","s1","cljs.core.subs.cljs$core$IFn$_invoke$arity$2","var_args","args__4502__auto__","len__4499__auto__","i__4500__auto__","argseq__4503__auto__","cljs.core/IndexedSeq","mranderson047.garden.v1v3v3.garden.compression/tokenizer","seq24793","self__4487__auto__","cljs.core/seq","p1__24787#","cljs.core/some","mranderson047.garden.v1v3v3.garden.compression/compress-stylesheet","stylesheet","s2","cljs.core/count","cljs.core/Keyword"],"sourcesContent":["(ns mranderson047.garden.v1v3v3.garden.compression\n  \"Stylesheet compression utilities.\"\n  #?(:clj\n     (:import (java.io StringReader StringWriter)\n               (com.yahoo.platform.yui.compressor CssCompressor))))\n\n;; ---------------------------------------------------------------------\n;; Clojure\n\n;; Clojure stylesheet compression leverages the YUI Compressor as it\n;; provides a performant and excellent solution to CSS compression.\n\n#?(:clj\n   (defn compress-stylesheet\n     \"Compress a stylesheet with the YUI CSSCompressor. Set\n  line-break-position to -1 for no line breaks, 0 for a line break\n  after each rule, and n > 0 for a line break after at most n\n  columns. Defaults to no -1\"\n     ([stylesheet]\n      (compress-stylesheet stylesheet -1))\n     ([^String stylesheet line-break-position]\n      (with-open [reader (StringReader. stylesheet)\n                  writer (StringWriter.)]\n        (doto (CssCompressor. reader)\n          (.compress writer line-break-position))\n        (str writer)))))\n\n;; ---------------------------------------------------------------------\n;; ClojureScript\n\n;; ClojureScript stylesheet compression uses a simple tokenizer and\n;; loop/recur to construct a new string of minified CSS.\n\n#?(:cljs\n   (defn- token-fn\n     \"Return a function which when given a string will return a map\n  containing the chunk of text matched by re, it's size, and tag.\"\n     [[tag re]]\n     (fn [s]\n       (when-let [chunk (re-find re s)]\n         {:tag tag\n          :chunk chunk\n          :size (count chunk)}))))\n\n#?(:cljs\n   (defn- tokenizer\n     \"Given an arbitrary number of [tag regex] pairs, return a function\n  which when given a string s will return the first matching token of s.\n  Token precedence is determined by the order of the pairs. The first\n  and last pairs have the highest and lowest precedence respectively.\"\n     [& tags+regexes]\n     (let [fs (map token-fn tags+regexes)]\n       (fn [s]\n         (some #(% s) fs)))))\n\n#?(:cljs\n   (def\n     ^{:private true\n       :doc \"Tokenizer used during stylesheet compression.\"}\n     stylesheet-tokenizer\n     (tokenizer\n      ;; String literals\n      [:string #\"^\\\"(?:\\\\.|[^\\\"])*\\\"\"]\n      ;; Delimiters\n      [:r-brace #\"^\\s*\\{\\s*\"]\n      [:l-brace #\"^;?\\s*}\"]\n      [:r-paren #\"^\\s*\\(\\s*\"]\n      [:l-paren #\"^\\s*\\)\"]\n      [:comma #\"^,\\s*\"]\n      [:colon #\"^:\\s*\"]\n      [:semicolon #\"^;\"]\n      ;; White space\n      [:space+ #\"^ +\"]\n      [:white-space+ #\"^\\s+\"]\n      ;; Everything else\n      [:any #\"^.\"])))\n\n#?(:cljs\n   (defn compress-stylesheet\n     \"Compress a string of CSS using a basic compressor.\"\n     [stylesheet]\n     (loop [s1 stylesheet s2 \"\"]\n       (if-let [{:keys [tag chunk size]} (stylesheet-tokenizer s1)]\n         (recur (subs s1 size)\n                (str s2 (case tag\n                          :string chunk\n                          :r-brace \"{\"\n                          :l-brace \"}\"\n                          :r-paren \"(\"\n                          :l-paren \")\"\n                          :comma \",\"\n                          :semi-comma \";\"\n                          :colon \":\"\n                          :space+ \" \"\n                          :white-space+ \"\"\n                          chunk)))\n         s2))))\n"]}