{"version":3,"file":"mranderson047.re_frame.v0v10v2.re_frame.registrar.js","sources":["mranderson047/re_frame/v0v10v2/re_frame/registrar.cljc"],"mappings":";;;;AASA,0DAAA,iFAAA,yDAAA,2DAAA,0DAAA,zTAAKe;AAKL,AAAKb,4EAAmB,6CAAA,7CAACuB;AAGzB,AAAA,gEAAA,wEAAAR,xIAAMO;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,4FAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,4FAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,4FAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAV,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,AAAA,8FAAA,9FAAMU,yGAEFrB;AACD,mDAAA,AAAAH,5CAACC,4DAAKC,2EAAkBC,9IAH3B;;;yGAKIA,KAAKG,9GALT,AAAA,8FAAA,9FAAMkB;AAOC,OAACvB,yLAAIK,hMAPZ,mDAMO,4CAAA,AAAAN,5CAACC,4DAAKC,2EAAkBC;;;AAN/B,AAAA,8FAAA,9FAAMqB,yGASFrB,KAAKG,GAAGe;AACT,IAAMjB,UAAQ,AAACC,4FAAYF,KAAKG,/GAVnC;AAUG,AACE,GAAMU;AACJ,oBAAM,iBAAAI,oBAAKC,zDADb;AACQ,AAAA,oBAAAD;AAAe,mBAAA,XAAMhB;;AAArBgB;;;AAAN,AACE,6FAAA,yGAAA,6EAAA,nRAACb,sNAA+B,6CAAKJ,4CAAkCG;;AADzE;;AADF;;AAGAF;;;AAdL,AAAA,wFAAA,xFAAMoB;;AAiBN,qEAAA,rEAAMF,AAjBN,kJAkBGnB,KAAKG,GAAGI;AACT,GAAMM,HAFR;AAEE,AACE,oBAAM,oGAAA,pGAACW,4FAAYxB,KAAKG;AACtB,6FAAA,uGAAA,qFAAA,zRAACC,4NAAsC,6CAAKJ,+BAAqBG,xSADnE;;AAAA;;AADF;;AAGA,gJAAA,hJAACE,mDAAMN,0EAAkBO,sGAAUN,KAAKG,WAAII;;AAC5CA;;AAGF,AAAA,mEAAA,2EAAAO,9IAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC;;;KAAA;AAAA,OAAAA,+FAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,+FAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAL,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,AAAA,iGAAA,jGAAMK;AAAN,AAEG,uGAAA,hGAACO,sBAAOxB;;;AAFX,AAAA,iGAAA,jGAAMiB,4GAIFhB;AACD,oBAAQ,CAACY,wFAAAA,8FAAAA,RAAMZ,0EAAAA,7QALlB;AAKG;AAAA,AAAA,MAAA,KAAAW,MAAA;;;AACA,OAACc,mDAAM1B,0EAAkBW,iBAAOV;;;AANnC,AAAA,iGAAA,jGAAMgB,4GAQFhB,KAAKG;AART,AASG,oBAAQ,CAACS,wFAAAA,8FAAAA,RAAMZ,0EAAAA;AAAf;AAAA,AAAA,MAAA,KAAAW,MAAA;;;AACA,oBAAI,AAACT,4FAAYF,KAAKG;AACpB,+JAAA,xJAACK,0DAAMT,0EAAkBU,uGAAWT,aAAMU,mEAAOP;;AACjD,oGAAA,uGAAA,qFAAA,zRAACC,4NAAsC,6CAAKJ,8BAAoB,iDAAA,JAAKG;;;;AAZ1E,AAAA,2FAAA,3FAAMa;;AAAN","names":["cljs.core/deref","cljs.core.get.cljs$core$IFn$_invoke$arity$2","mranderson047.re-frame.v0v10v2.re-frame.registrar/kind->id->handler","kind","handler","mranderson047.re_frame.v0v10v2.re_frame.registrar.get_handler.cljs$core$IFn$_invoke$arity$2","id","mranderson047.re_frame.v0v10v2.re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc-in","handler-fn","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic","cljs.core/update-in","cljs.core/dissoc","js/Error","mranderson047.re-frame.v0v10v2.re-frame.registrar/kinds","mranderson047.re-frame.v0v10v2.re-frame.interop/debug-enabled?","var_args","G__27090","mranderson047.re-frame.v0v10v2.re-frame.registrar/clear-handlers","and__3911__auto__","required?","mranderson047.re-frame.v0v10v2.re-frame.registrar/register-handler","G__27064","mranderson047.re-frame.v0v10v2.re-frame.registrar/get-handler","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","cljs.core/reset!","mranderson047.re_frame.v0v10v2.re_frame.registrar.get_handler.cljs$core$IFn$_invoke$arity$3","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3"],"sourcesContent":["(ns mranderson047.re-frame.v0v10v2.re-frame.registrar\n  \"In many places, mranderson047.re-frame.v0v10v2.re-frame asks you to associate an `id` (keyword)\n  with a `handler` (function).  This namespace contains the\n  central registry of such associations.\"\n  (:require  [mranderson047.re-frame.v0v10v2.re-frame.interop :refer [debug-enabled?]]\n             [mranderson047.re-frame.v0v10v2.re-frame.loggers :refer [console]]))\n\n\n;; kinds of handlers\n(def kinds #{:event :fx :cofx :sub})\n\n;; This atom contains a register of all handlers.\n;; Contains a two layer map, keyed first by `kind` (of handler), and then `id` of handler.\n;; Leaf nodes are handlers.\n(def kind->id->handler  (atom {}))\n\n\n(defn get-handler\n\n  ([kind]\n   (get @kind->id->handler kind))\n\n  ([kind id]\n   (-> (get @kind->id->handler kind)\n       (get id)))\n\n  ([kind id required?]\n   (let [handler (get-handler kind id)]\n     (when debug-enabled?                          ;; This is in a separate `when` so Closure DCE can run ...\n       (when (and required? (nil? handler))        ;; ...otherwise you'd need to type-hint the `and` with a ^boolean for DCE.\n         (console :error \"re-frame: no \" (str kind) \" handler registered for: \" id)))\n     handler)))\n\n\n(defn register-handler\n  [kind id handler-fn]\n  (when debug-enabled?                                       ;; This is in a separate when so Closure DCE can run\n    (when (get-handler kind id false)\n      (console :warn \"re-frame: overwriting\" (str kind) \"handler for:\" id)))   ;; allow it, but warn. Happens on figwheel reloads.\n  (swap! kind->id->handler assoc-in [kind id] handler-fn)\n  handler-fn)    ;; note: returns the just registered handler\n\n\n(defn clear-handlers\n  ([]            ;; clear all kinds\n   (reset! kind->id->handler {}))\n\n  ([kind]        ;; clear all handlers for this kind\n   (assert (kinds kind))\n   (swap! kind->id->handler dissoc kind))\n\n  ([kind id]     ;; clear a single handler for a kind\n   (assert (kinds kind))\n   (if (get-handler kind id)\n     (swap! kind->id->handler update-in [kind] dissoc id)\n     (console :warn \"re-frame: can't clear\" (str kind) \"handler for\" (str id \". Handler not found.\")))))\n"]}