{"version":3,"file":"rewrite_clj.node.forms.js","sources":["rewrite_clj/node/forms.cljs"],"mappings":"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","names":["_","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","this","children'","cljs.core/first","es","G__28199","rewrite-clj.node.protocols/string","cljs.core/next","children","rewrite-clj.node.protocols/sum-lengths","rewrite-clj.node.protocols/sexprs","rewrite-clj.node.protocols/concat-strings","this__11972__auto__","k__11973__auto__","cljs.core._lookup.cljs$core$IFn$_invoke$arity$3","this__11974__auto__","k28191","else__11975__auto__","cljs.core/Keyword","cljs.core.get.cljs$core$IFn$_invoke$arity$3","__extmap","this__11986__auto__","writer__11987__auto__","opts__11988__auto__","pr-pair__11989__auto__","keyval__11990__auto__","cljs.core/pr-sequential-writer","cljs.core/pr-writer","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core/PersistentVector","G__28190","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__11970__auto__","__meta","this__11967__auto__","__hash","this__11976__auto__","cljs.core/count","this__11968__auto__","h__4030__auto__","fexpr__28201","coll__11969__auto__","cljs.core/hash-unordered-coll","this28192","other28193","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/PROTOCOL_SENTINEL","this__11981__auto__","k__11982__auto__","cljs.core/contains?","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","cljs.core/-with-meta","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core/not-empty","this__11979__auto__","k__11980__auto__","pred__28210","cljs.core/keyword-identical?","expr__28211","G__28214","G__28215","this__11984__auto__","cljs.core/seq","this__11971__auto__","this__11977__auto__","entry__11978__auto__","cljs.core/vector?","cljs.core/-assoc","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","cljs.core/-conj","rewrite-clj.node.forms/FormsNode","this__4208__auto__","cljs.core/List","writer__4209__auto__","cljs.core/-write","G__28196","rewrite-clj.node.forms/->FormsNode","rewrite-clj.node.forms/map->FormsNode","cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$2","rewrite-clj.node.forms/forms-node"],"sourcesContent":["(ns rewrite-clj.node.forms\n  (:require [rewrite-clj.node.protocols :as node]))\n\n;; ## Node\n\n(defrecord FormsNode [children]\n  node/Node\n  (tag [_]\n    :forms)\n  (printable-only? [_]\n    false)\n  (sexpr [_]\n    (let [es (node/sexprs children)]\n      (if (next es)\n        (list* 'do es)\n        (first es))))\n  (length [_]\n    (node/sum-lengths children))\n  (string [_]\n    (node/concat-strings children))\n\n  node/InnerNode\n  (inner? [_]\n    true)\n  (children [_]\n    children)\n  (replace-children [this children']\n    (assoc this :children children'))\n\n  Object\n  (toString [this]\n    (node/string this)))\n\n;; TODO: Macro fun !\n;(node/make-printable! FormsNode)\n\n;; ## Constructor\n\n(defn forms-node\n  \"Create top-level node wrapping multiple children\n   (equals an implicit `do` on the top-level).\"\n  [children]\n  (->FormsNode children))\n"]}