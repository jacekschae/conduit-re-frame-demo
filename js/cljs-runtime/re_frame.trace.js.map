{"version":3,"file":"re_frame.trace.js","sources":["re_frame/trace.cljc"],"mappings":"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","names":["goog.functions/debounce","f","interval","re-frame.trace/debounce-time","e38201","e38206","G__38202","cljs.core/deref","G__38207","cb","re-frame.trace/traces","re-frame.trace/debounce","re-frame.trace/trace-cbs","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","re-frame.trace/schedule-debounce","tags","cljs.core/reset!","re-frame.trace/next-delivery","now","re-frame.interop/now","e","key","re-frame.trace/trace-enabled?","re-frame.trace/next-id","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","re-frame.trace/id","cljs.core/inc","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","re-frame.trace/reset-tracing!","re-frame.trace/remove-trace-cb","operation","re-frame.trace/register-trace-cb","re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic","or__3922__auto__","child-of","re-frame.trace/*current-trace*","k","re-frame.trace/is-trace-enabled?","op-type","goog/define","seq__38194","cljs.core/seq","chunk__38195","count__38196","i__38197","vec__38198","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","temp__5457__auto__","cljs.core/chunked-seq?","c__4319__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__38203","cljs.core/first","cljs.core/next","p__38191","map__38192","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","re-frame.trace/start-trace","re-frame.trace/run-tracing-callbacks!","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","cljs.core/dissoc"],"sourcesContent":["(ns re-frame.trace\n  \"Tracing for re-frame.\n  Alpha quality, subject to change/break at any time.\"\n  #?(:cljs (:require-macros [net.cgrand.macrovich :as macros]\n                            [re-frame.trace :refer [finish-trace with-trace merge-trace!]]))\n  (:require [re-frame.interop :as interop]\n            [re-frame.loggers :refer [console]]\n            #?(:clj [net.cgrand.macrovich :as macros])\n            #?(:cljs [goog.functions])))\n\n(def id (atom 0))\n(def ^:dynamic *current-trace* nil)\n\n(defn reset-tracing! []\n  (reset! id 0))\n\n#?(:cljs (goog-define trace-enabled? false)\n   :clj  (def ^boolean trace-enabled? false))\n\n(defn ^boolean is-trace-enabled?\n  \"See https://groups.google.com/d/msg/clojurescript/jk43kmYiMhA/IHglVr_TPdgJ for more details\"\n  []\n  trace-enabled?)\n\n(def trace-cbs (atom {}))\n(defonce traces (atom []))\n(defonce next-delivery (atom 0))\n\n(defn register-trace-cb\n  \"Registers a tracing callback function which will receive a collection of one or more traces.\n  Will replace an existing callback function if it shares the same key.\"\n  [key f]\n  (if trace-enabled?\n    (swap! trace-cbs assoc key f)\n    (console :warn \"Tracing is not enabled. Please set {\\\"re_frame.trace.trace_enabled_QMARK_\\\" true} in :closure-defines. See: https://github.com/Day8/re-frame-trace#installation.\")))\n\n(defn remove-trace-cb [key]\n  (swap! trace-cbs dissoc key)\n  nil)\n\n(defn next-id [] (swap! id inc))\n\n(defn start-trace [{:keys [operation op-type tags child-of]}]\n  {:id        (next-id)\n   :operation operation\n   :op-type   op-type\n   :tags      tags\n   :child-of  (or child-of (:id *current-trace*))\n   :start     (interop/now)})\n\n;; On debouncing\n;;\n;; We debounce delivering traces to registered cbs so that\n;; we can deliver them in batches. This aids us in efficiency\n;; but also importantly lets us avoid slowing down the host\n;; application by running any trace code in the critical path.\n;;\n;; We add a lightweight check on top of goog.functions/debounce\n;; to avoid constant setting and cancelling of timeouts. This\n;; means that we will deliver traces between 10-50 ms from the\n;; last trace being created, which still achieves our goals.\n\n(def debounce-time 50)\n\n(defn debounce [f interval]\n  #?(:cljs (goog.functions/debounce f interval)\n     :clj  (f)))\n\n(def schedule-debounce\n  (debounce\n    (fn tracing-cb-debounced []\n      (doseq [[k cb] @trace-cbs]\n        (try (cb @traces)\n             #?(:clj (catch Exception e\n                       (console :error \"Error thrown from trace cb\" k \"while storing\" @traces e)))\n             #?(:cljs (catch :default e\n                        (console :error \"Error thrown from trace cb\" k \"while storing\" @traces e)))))\n      (reset! traces []))\n    debounce-time))\n\n(defn run-tracing-callbacks! [now]\n  ;; Optimised debounce, we only re-debounce\n  ;; if we are close to delivery time\n  ;; to avoid constant setting and cancelling\n  ;; timeouts.\n\n  ;; If we are within 10 ms of next delivery\n  (when (< (- @next-delivery 10) now)\n    (schedule-debounce)\n    ;; The next-delivery time is not perfectly accurate\n    ;; as scheduling the debounce takes some time, but\n    ;; it's good enough for our purposes here.\n    (reset! next-delivery (+ now debounce-time))))\n\n(macros/deftime\n  (defmacro finish-trace [trace]\n     `(when (is-trace-enabled?)\n        (let [end#      (interop/now)\n              duration# (- end# (:start ~trace))]\n          (swap! traces conj (assoc ~trace\n                               :duration duration#\n                               :end (interop/now)))\n          (run-tracing-callbacks! end#))))\n\n (defmacro with-trace\n     \"Create a trace inside the scope of the with-trace macro\n\n          Common keys for trace-opts\n          :op-type - what kind of operation is this? e.g. :sub/create, :render.\n          :operation - identifier for the operation, for an subscription it would be the subscription keyword\n          tags - a map of arbitrary kv pairs\"\n     [{:keys [operation op-type tags child-of] :as trace-opts} & body]\n     `(if (is-trace-enabled?)\n        (binding [*current-trace* (start-trace ~trace-opts)]\n          (try ~@body\n               (finally (finish-trace *current-trace*))))\n        (do ~@body)))\n\n  (defmacro merge-trace! [m]\n     ;; Overwrite keys in tags, and all top level keys.\n     `(when (is-trace-enabled?)\n        (let [new-trace# (-> (update *current-trace* :tags merge (:tags ~m))\n                             (merge (dissoc ~m :tags)))]\n          (set! *current-trace* new-trace#))\n        nil)))\n"]}