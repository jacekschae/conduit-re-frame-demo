{"version":3,"file":"debux.common.macro_specs.js","sources":["debux/common/macro_specs.cljc"],"mappings":"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","names":["cljs.core.sequence.cljs$core$IFn$_invoke$arity$1","cljs.core/seq","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core/List","debux.common.macro-specs/name-unformer","name","cljs.spec.alpha/def-impl","cljs.spec.alpha/and-spec-impl","cljs.core/simple-symbol?","cljs.spec.alpha.spec_impl.cljs$core$IFn$_invoke$arity$5","cljs.core/identity","cljs.spec.alpha/cat-impl","cljs.spec.alpha/maybe-impl","cljs.core/string?","cljs.spec.alpha/rep-impl","cljs.core/any?","debux.common.macro-specs/arg-list-unformer","arg","cljs.core/vec","cljs.core/vector?","cljs.spec.alpha/alt-impl","cljs.core/map?","cljs.spec.alpha/rep+impl","cljs.spec.alpha.spec_impl.cljs$core$IFn$_invoke$arity$4"],"sourcesContent":["(ns debux.common.macro-specs\n  \"clojure.core macro specs which are minified, simplified and modified.\"\n  (:require #?(:clj [clojure.spec.alpha :as s]\n               :cljs [cljs.spec.alpha :as s])\n    #?(:clj\n                    [clojure.future :refer :all])))\n\n(declare skip o-skip skip-outer indent)\n; skip => full skip\n; o-skip => outermost skip\n\n\n;;; def\n(defn name-unformer [name]\n  `(skip ~name))\n\n(s/def ::name\n  (s/and\n    simple-symbol?\n    (s/conformer identity name-unformer)))\n\n(s/def ::def-args\n  (s/cat :name ::name\n         :docstring (s/? string?)\n         :body (s/* any?)))\n\n\n;;; defn, defn-, fn\n(defn arg-list-unformer [arg]\n  `(skip ~(vec arg)))\n\n(s/def ::arg-list\n  (s/and\n    vector?\n    (s/conformer identity arg-list-unformer)\n    (s/cat :args (s/* any?))))\n\n(s/def ::args+body\n  (s/cat :args ::arg-list\n         :body (s/alt :prepost+body (s/cat :prepost map?\n                                           :body (s/+ any?))\n                      :body (s/* any?))))\n\n(s/def ::defn-args\n  (s/cat :name ::name\n         :docstring (s/? string?)\n         :meta (s/? map?)\n         :bs (s/alt :arity-1 ::args+body\n                    :arity-n (s/cat :bodies (s/+ (s/spec ::args+body))\n                                    :attr (s/? map?)))))\n\n(s/def ::fn-args\n  (s/cat :name (s/? ::name)\n         :bs (s/alt :arity-1 ::args+body\n                    :arity-n (s/cat :bodies (s/+ (s/spec ::args+body))))))\n\n(comment\n\n  (def f1\n    '(defn add1\n       \"add1 docstring\"\n       {:added \"1.0\"}\n       [x y]\n       (+ x y)))\n\n  (def f2\n    '(defn add2\n       \"add2 docstring\"\n       {:added \"1.0\"}\n       ([] 0)\n       ([x] x)\n       ([x y] (+ x y))\n       ([x y & zs] (apply + x y zs))))\n\n  (s/conform ::defn-args (next f1))\n  ; => {:name add1, :docstring \"add1 docstring\", :meta {:added \"1.0\"},\n  ;     :bs [:arity-1 {:args {:args [x y]},\n  ;                    :body [:body [(+ x y)]]}]}\n  (s/explain ::defn-args (next f1))\n\n  (s/conform ::defn-args (next f2))\n  ; => {:name add2, :docstring \"add2 docstring\", :meta {:added \"1.0\"},\n  ;     :bs [:arity-n {:bodies [{:args {}, :body [:body [0]]}\n  ;                             {:args {:args [x]}, :body [:body [x]]}\n  ;                             {:args {:args [x y]}, :body [:body [(+ x y)]]}\n  ;                             {:args {:args [x y & zs]}, :body [:body [(apply + x y zs)]]}]}]}\n  (s/explain ::defn-args (next f2))\n\n\n  (def f3\n    '(fn add1 [x y]\n       (+ x y)))\n\n  (def f4\n    '(fn add2\n       ([] 0)\n       ([x] x)\n       ([x y] (+ x y))\n       ([x y & zs] (apply + x y zs))))\n\n  (def f5 '#(+ % %2))\n\n  (s/conform ::fn-args (next f3))\n  ; => {:name add1,\n  ;     :bs [:arity-1 {:args {:args [x y]},\n  ;                    :body [:body [(+ x y)]]}]}\n  (s/explain ::fn-args (next f3))\n\n  (s/conform ::fn-args (next f4))\n  ; => {:name add2,\n  ;     :bs [:arity-n {:bodies [{:args {}, :body [:body [0]]}\n  ;                             {:args {:args [x]}, :body [:body [x]]}\n  ;                             {:args {:args [x y]}, :body [:body [(+ x y)]]}\n  ;                             {:args {:args [x y & zs]}, :body [:body [(apply + x y zs)]]}]}]}\n  (s/explain ::fn-args (next f4))\n\n  (s/conform ::fn-args (next f5))\n  ; => {:bs [:arity-1 {:args {:args [p1__30164# p2__30165#]},\n  ;                    :body [:body [(+ p1__30164# p2__\n  (s/explain ::fn-args (next f5))\n\n  )                                                         ; end of comment\n\n"]}