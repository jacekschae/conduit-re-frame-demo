{"version":3,"file":"rewrite_clj.zip.editz.js","sources":["rewrite_clj/zip/editz.cljs"],"mappings":"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","names":["e'","e","str-fn","rewrite-clj.zip.editz/edit-multi-line","rewrite-clj.zip.editz/edit-token","clojure.zip/replace","zloc","n","rewrite-clj.zip.editz/suffix","clojure.zip/node","var_args","args__4502__auto__","len__4499__auto__","i__4500__auto__","argseq__4503__auto__","cljs.core/IndexedSeq","rewrite-clj.zip.editz/edit","seq28951","G__28952","cljs.core/first","cljs.core/next","G__28953","self__4486__auto__","G__28949","f","rewrite-clj.zip.utils/remove-and-move-right","G__28984","cljs.core/Keyword","js/Error","rewrite-clj.zip.base/tag","s","loc","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","clojure.zip/insert-right","children","clojure.zip/branch?","G__28980","cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2","rewrite-clj.node/whitespace?","args","p1__28950#","clojure.zip.edit.cljs$core$IFn$_invoke$arity$variadic","rewrite-clj.zip.editz/edit-node","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","cljs.core/empty?","lines","or__3922__auto__","rewrite_clj.zip.whitespace.skip_whitespace.cljs$core$IFn$_invoke$arity$1","node","p1__28983#","cljs.core/last","cljs.core/butlast","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","rewrite-clj.zip.base/sexpr","cljs.core/reverse","G__28947","rewrite-clj.node/coerce","value","rewrite-clj.zip.editz/replace","cljs.core/name","cljs.core.keyword.cljs$core$IFn$_invoke$arity$2","cljs.core/namespace","G__28971","rewrite-clj.node/sexpr","rewrite-clj.zip.editz/prefix","rewrite-clj.zip.removez/remove","rewrite-clj.node/token-node","p1__28979#","cljs.core.update_in.cljs$core$IFn$_invoke$arity$3","cljs.core/seq","p1__28978#","rewrite-clj.zip.editz/splice","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","line-fn","cljs.core/vec","G__28972","cljs.core/Symbol","cljs.core.symbol.cljs$core$IFn$_invoke$arity$2","temp__5455__auto__","clojure.zip/children"],"sourcesContent":["(ns rewrite-clj.zip.editz\n  (:refer-clojure :exclude [replace])\n  (:require [rewrite-clj.zip.base :as base]\n            [rewrite-clj.zip.move :as m]\n            [rewrite-clj.zip.removez :as r]\n            [rewrite-clj.zip.utils :as u]\n            [rewrite-clj.zip.whitespace :as ws]\n            [rewrite-clj.node :as n]\n            [clojure.zip :as z]))\n\n;; ## In-Place Modification\n\n(defn replace\n  \"Replace the node at the given location with one representing\n   the given value. (The value will be coerced to a node if\n   possible.)\"\n  [zloc value]\n  (z/replace zloc (n/coerce value)))\n\n(defn- edit-node\n  \"Create s-expression from node, apply the function and create\n   node from the result.\"\n  [node f]\n  (-> (n/sexpr node)\n      (f)\n      (n/coerce)))\n\n(defn edit\n  \"Apply the given function to the s-expression at the given\n   location, using its result to replace the node there. (The\n   result will be coerced to a node if possible.)\"\n  [zloc f & args]\n  (z/edit zloc edit-node #(apply f % args)))\n\n;; ## Splice\n\n\n\n(defn splice\n  \"Splice the given node, i.e. merge its children into the current one\n   (akin to Clojure's `unquote-splicing` macro: `~@...`).\n   - if the node is not one that can have children, no modification will\n     be performed.\n   - if the node has no or only whitespace children, it will be removed.\n   - otherwise, splicing will be performed, moving the zipper to the first\n     non-whitespace child afterwards.\n   \"\n  [zloc]\n  (if (z/branch? zloc)\n    (if-let [children (->> (z/children zloc)\n                           (drop-while n/whitespace?)\n                           (reverse)\n                           (drop-while n/whitespace?)\n                           (seq))]\n      (let [loc (->> (reduce z/insert-right zloc children)\n                     (u/remove-and-move-right))]\n        (or (ws/skip-whitespace loc) loc))\n      (r/remove zloc))\n    zloc))\n\n;; ## Prefix/Suffix\n\n(defn- edit-token\n  [zloc str-fn]\n  (let [e (base/sexpr zloc)\n        e' (cond (string? e) (str-fn e)\n                 (keyword? e) (keyword (namespace e) (str-fn (name e)))\n                 (symbol? e) (symbol (namespace e) (str-fn (name e))))]\n    (z/replace zloc (n/token-node e'))))\n\n(defn- edit-multi-line\n  [zloc line-fn]\n  (let [n (-> (z/node zloc)\n              (update-in [:lines] (comp line-fn vec)))]\n    (z/replace zloc n)))\n\n(defn prefix\n  [zloc s]\n  (case (base/tag zloc)\n    :token      (edit-token zloc #(str s %))\n    :multi-line (->> (fn [lines]\n                       (if (empty? lines)\n                         [s]\n                         (update-in lines [0] #(str s %))))\n                     (edit-multi-line zloc ))))\n\n(defn suffix\n  [zloc s]\n  (case (base/tag zloc)\n    :token      (edit-token zloc #(str % s))\n    :multi-line (->> (fn [lines]\n                       (if (empty? lines)\n                         [s]\n                         (concat (butlast lines) (str (last lines) s))))\n                     (edit-multi-line zloc))))\n"]}