{"version":3,"file":"day8.re_frame_10x.view.fx.js","sources":["day8/re_frame_10x/view/fx.cljs"],"mappings":";;;;;;;;yhCAoBuCA,zhCAZvC,sCAAA,mFAAA,gFAAA,mFAAA,0EAAA,mFAAA,iGAAA,2CAAA,mEAAA,OAAA,4EAAA,4CAAA,mFAAA,wEAAA,2CAAA,2IAAA,mFAAA,2DAAA,2CAAA,4EAAA,71CAAKe;AAqBL,0CAAA,1CAAMd,4FAAeM,MAAMI;0aAItBL,6gBAGgBC,v7BAPrB,AAAA,+HAAA,wDAAA,gBAAA,6DAAA,mFAAA,wHAAA,wDAAA,4CAAA,uDAAA,yDAAA,6DAAA,mFAAA,mFAAA,+EAAA,wIAAA,iGAAA,pmCACGM,88BAOEC,gDAAyBH,wFAAMJ;;AAGpC,mCAAA,nCAAMF;AAAN,AACE,kBAAA,AAAAG,dAAML,8BAAa,iBAAAM,WAAA,mFAAA;AAAA,AAAA,oLAAAA,6EAAAA,zPAACC,uFAAAA,iGAAAA;;y5BAKLT,kDAAwB,2DAAA,mFAAA,qDAAA,nMAACC,+CAAOC,utBAEhCC,jtDAPf,AAAA,+HAAA,wDAAA,cAAA,wFAAA,6DAAA,mFAAA,2HAAA,8RAAA,2HAAA,yRAAA,2HAAA,ySAAA,wHAAA,qDAAA,rjDAGQQ,ujCAGOX,uDAA6B,2DAAA,mFAAA,qDAAA,nMAACC,+CAAOC,n5BAFrCF,oDAA0B,2DAAA,mFAAA,qDAAA,nMAACC,+CAAOC,zgBAH9CU","names":["day8.re-frame-10x.common-styles/white-background-color","day8.re-frame-10x.view.fx/event-section","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","event-trace","day8.re-frame-10x.utils.re-com/gap-f","day8.re-frame-10x.view.fx/render","day8.re-frame-10x.utils.re-com/h-box","title","cljs.core/deref","G__30417","mranderson047.re-frame.v0v10v2.re-frame.core/subscribe","data","day8.re-frame-10x.common-styles/gs-19s","day8.re-frame-10x.utils.re-com/v-box","day8.re-frame-10x.view.components/simple-render","day8.re-frame-10x.view.fx/fx-styles"],"sourcesContent":["(ns day8.re-frame-10x.view.fx\n  (:require [day8.re-frame-10x.utils.re-com :as rc]\n            [mranderson047.re-frame.v0v10v2.re-frame.core :as rf]\n            [day8.re-frame-10x.common-styles :as common]\n            [day8.re-frame-10x.view.components :as components]\n            [zprint.core :as zp]\n            [clojure.string :as str]))\n\n(def fx-styles\n  [:#--re-frame-10x--\n   [:.code-panel\n    #_{:padding-bottom common/gs-31}] ;; Leaving the empty def here for now\n   ;; We rely on highlight JS for our background now.\n   #_[:.code-listing\n    {:background-color common/white-background-color\n     :padding          \"5px\"\n     :margin-right     \"19px\"}]\n   [:.code-listing--highlighted\n    {:font-weight      \"bold\"\n     :background-color \"rgba(100, 100, 255, 0.08)\"}]\n   [:.code-fragment {:background-color common/white-background-color}\n    [:&:hover {:background-color \"rgba(100, 100, 255, 0.08)\"}]]])\n\n;; Terminology:\n;; Form: a single Clojure form (may have nested children)\n;; Result: the result of execution of a single form\n;; Fragment: the combination of a form and result\n;; Listing: a block of traced Clojure code, e.g. an event handler function\n\n(defn event-section [title data]\n  [rc/v-box\n   :class \"event-section\"\n   :children\n   [[rc/h-box\n     :class \"event-section--header app-db-path--header\"\n     :align :center\n     :children [[:h2 title]]]\n    [components/simple-render data [title] \"event-section--data app-db-path--pod-border\"]]])\n\n\n(defn render []\n  (let [event-trace @(rf/subscribe [:epochs/current-event-trace])]\n    [rc/v-box\n     :class \"event-panel\"\n     :gap common/gs-19s\n     :children [[event-section \"Coeffects\" (get-in event-trace [:tags :coeffects])]\n                [event-section \"Effects\" (get-in event-trace [:tags :effects])]\n                [event-section \"Interceptors\" (get-in event-trace [:tags :interceptors])]\n                [rc/gap-f :size \"0px\"]]]))\n"]}