{"version":3,"file":"rewrite_clj.node.comment.js","sources":["rewrite_clj/node/comment.cljs"],"mappings":"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","names":["_","rewrite-clj.node.comment/->CommentNode","s","rewrite-clj.node.comment/comment-node","G__28198","node","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","rewrite-clj.node.protocols/tag","rewrite-clj.node.comment/comment?","this","cljs.core/count","this__11972__auto__","k__11973__auto__","cljs.core._lookup.cljs$core$IFn$_invoke$arity$3","this__11974__auto__","k28187","else__11975__auto__","cljs.core/Keyword","cljs.core.get.cljs$core$IFn$_invoke$arity$3","__extmap","this__11986__auto__","writer__11987__auto__","opts__11988__auto__","pr-pair__11989__auto__","keyval__11990__auto__","cljs.core/pr-sequential-writer","cljs.core/pr-writer","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core/PersistentVector","G__28186","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__11970__auto__","__meta","this__11967__auto__","__hash","this__11976__auto__","this__11968__auto__","h__4030__auto__","fexpr__28200","coll__11969__auto__","cljs.core/hash-unordered-coll","this28188","other28189","cljs.core/PROTOCOL_SENTINEL","this__11981__auto__","k__11982__auto__","cljs.core/contains?","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","cljs.core/-with-meta","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core/not-empty","this__11979__auto__","k__11980__auto__","pred__28202","cljs.core/keyword-identical?","expr__28203","G__28205","G__28206","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","this__11984__auto__","cljs.core/seq","this__11971__auto__","this__11977__auto__","entry__11978__auto__","cljs.core/vector?","cljs.core/-assoc","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","cljs.core/-conj","rewrite-clj.node.comment/CommentNode","this__4208__auto__","cljs.core/List","writer__4209__auto__","cljs.core/-write","G__28195","rewrite-clj.node.comment/map->CommentNode","js/Error","rewrite-clj.node.protocols/string"],"sourcesContent":["(ns rewrite-clj.node.comment\n  (:require [rewrite-clj.node.protocols :as node]))\n\n;; ## Node\n\n(defrecord CommentNode [s]\n  node/Node\n  (tag [_] :comment)\n  (printable-only? [_] true)\n  (sexpr [_]\n    (throw (js/Error. \"Unsupported operation\")))\n  (length [_]\n    (+ 1 (count s)))\n  (string [_]\n    (str \";\" s))\n\n  Object\n  (toString [this]\n    (node/string this)))\n\n;;(node/make-printable! CommentNode)\n\n;; ## Constructor\n\n(defn comment-node\n  \"Create node representing an EDN comment.\"\n  [s]\n  (->CommentNode s))\n\n(defn comment?\n  \"Check whether a node represents a comment.\"\n  [node]\n  (= (node/tag node) :comment))\n\n\n\n"]}