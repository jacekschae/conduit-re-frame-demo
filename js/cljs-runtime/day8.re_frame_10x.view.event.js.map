{"version":3,"file":"day8.re_frame_10x.view.event.js","sources":["day8/re_frame_10x/view/event.cljs"],"mappings":"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","names":["event","G__30472","mranderson047.re-frame.v0v10v2.re-frame.core/dispatch","open?-path","cljs.core/not","open?","frag","day8.re-frame-10x.view.event/event-expression","day8.re-frame-10x.view.event/event-fragments","code-execution","before","cljs.core.subs.cljs$core$IFn$_invoke$arity$3","form-str","start-index","G__30541","mranderson047.re-frame.v0v10v2.re-frame.core/subscribe","cljs.core/deref","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","G__30471","code-open?","G__30572","G__30470","code-execution-id","line","day8.re-frame-10x.utils.re-com/h-box","code-traces","G__30652","day8.re-frame-10x.common-styles/gs-12","matched-form","result","day8.re-frame-10x.common-styles/navbar-text-color","index","cljs.core/count","pre-match","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","highlighted-form","day8.re-frame-10x.view.event/code-header","id","day8.re-frame-10x.view.event/code-border","day8.re-frame-10x.utils.re-com/p","day8.re-frame-10x.utils.re-com/gap-f","length","search-str","start","epoch-id","node","scroll-pos","cljs.core/List","cljs.core/first","day8.re-frame-10x.view.event/find-bounds","G__30542","day8.re-frame-10x.utils.re-com/hyperlink-href","this","iter__4292__auto__","s__30574","cljs.core/LazySeq","temp__5457__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4290__auto__","size__4291__auto__","b__30576","cljs.core/chunk-buffer","i__30575","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__30573","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","fragments","mranderson047.garden.v1v3v3.garden.units/px-","day8.re-frame-10x.common-styles/expansion-button-horizontal-padding","G__30527","day8.re-frame-10x.utils.re-com/box","day8.re-frame-10x.utils.re-com/v-box","day8.re-frame-10x.view.event/render","end-index","zprint.core/zprint-str","mranderson047.reagent.v0v8v0-alpha2.reagent.core/dom-node","day8.re-frame-10x.view.event/no-event-instructions","day8.re-frame-10x.common-styles/white-background-border-color","code-exec-id","day8.re-frame-10x.view.components/simple-render","G__30498","day8.re-frame-10x.view.components/highlight","G__30586","G__30595","day8.re-frame-10x.common-styles/gs-19s","highlight","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","cljs.core/fn?","day8.re-frame-10x.view.event/code-block","day8.re-frame-10x.common-styles/gs-19","G__30585","G__30592","after","day8.re-frame-10x.common-styles/navbar-tint-lighter","cljs.core.doall.cljs$core$IFn$_invoke$arity$1","vec__30537","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","G__30540","re","cljs.core.subs.cljs$core$IFn$_invoke$arity$2","day8.re-frame-10x.view.event/event-code","day8.re-frame-10x.common-styles/white-background-color","day8.re-frame-10x.view.event/event-styles","G__30589","G__30598","G__30658","cljs.core/chunk-first","cljs.core/re-pattern","goog/string.regExpEscape","clojure.string.index_of.cljs$core$IFn$_invoke$arity$2","mranderson047.reagent.v0v8v0-alpha2.reagent.core/create-class","G__30653"],"sourcesContent":["(ns day8.re-frame-10x.view.event\n  (:require [day8.re-frame-10x.utils.re-com :as rc]\n            [day8.re-frame-10x.view.components :as components]\n            [day8.re-frame-10x.common-styles :as common]\n            [mranderson047.garden.v1v3v3.garden.units :as units]\n            [mranderson047.reagent.v0v8v0-alpha2.reagent.core :as reagent]\n            [mranderson047.re-frame.v0v10v2.re-frame.core :as rf]\n            [zprint.core :as zp]\n            [goog.string]\n            [clojure.string :as str])\n  (:require-macros [day8.re-frame-10x.utils.macros :refer [with-cljs-devtools-prefs]]\n                   [day8.re-frame-10x.utils.re-com :refer [handler-fn]]))\n\n(def code-border (str \"1px solid \" common/white-background-border-color))\n\n\n(def event-styles\n  [:#--re-frame-10x--\n   [:.event-panel\n    {:padding \"19px 19px 0px 0px\"}]\n   [:.bold {:font-weight \"bold\"}]\n   [:.event-section]\n   [:.event-section--header\n    {:background-color common/navbar-tint-lighter\n     :color            common/navbar-text-color\n     :height           common/gs-19\n     :font-size        \"14px\"\n     :padding          [[0 common/gs-12]]\n     }]\n   [:.event-section--data\n    {:background-color \"rgba(100, 255, 100, 0.08)\"\n     :padding-left     (units/px- common/gs-12 common/expansion-button-horizontal-padding)\n     :overflow-x       \"auto\"}]\n   ])\n\n\n;; Terminology:\n;; Form: a single Clojure form (may have nested children)\n;; Result: the result of execution of a single form\n;; Fragment: the combination of a form and result\n;; Listing: a block of traced Clojure code, e.g. an event handler function\n\n\n(defn no-event-instructions\n  []\n  [rc/v-box\n   :children [[rc/p {:style {:font-style \"italic\"}} \"Code trace is not currently available for this event\"]\n              [:br]\n              [rc/hyperlink-href\n               :label  \"Instructions for enabling Event Code Tracing\"\n               :attr   {:rel \"noopener noreferrer\"}\n               :target \"_blank\"\n               :href   \"https://github.com/Day8/re-frame-10x/blob/master/docs/HyperlinkedInformation/EventCodeTracing.md\"]]])\n\n\n(defn code-header\n  [code-execution-id line]\n  ;(println \">>>>>> code-header:\" (:id line))\n  (let [open?-path [@(rf/subscribe [:epochs/current-epoch-id]) code-execution-id (:id line)]\n        open?      (get-in @(rf/subscribe [:code/code-open?]) open?-path)]\n    [rc/h-box\n     :style {:border   code-border\n             :overflow \"hidden\"\n             :padding  \"1px 6px\"}\n     :children [[rc/box\n                 :width  \"17px\"\n                 :height \"17px\"\n                 :class  \"noselect\"\n                 :style  {:cursor \"pointer\"\n                          :color  \"#b0b2b4\"}\n                 :attr   {:on-click (handler-fn (rf/dispatch [:code/set-code-visibility open?-path (not open?)]))}\n                 :child  [rc/box\n                          :margin \"auto\"\n                          :child  [:span.arrow (if open? \"\u25bc\" \"\u25b6\")]]]\n                [:pre\n                 {:style {:margin-left \"2px\"\n                          :margin-top  \"2px\"}}\n                 (str (:form line))]]]))\n\n\n(defn code-block\n  [code-execution-id line]\n  ;(println \">>>>>> code-block:\" (:id line))\n  [rc/box\n   :style {:background-color \"rgba(100, 255, 100, 0.08)\"\n           :border           code-border\n           :margin-top       \"-1px\"\n           :overflow-x       \"auto\"\n           :overflow-y       \"hidden\"\n           :padding          \"0px 3px\"}\n   :child [components/simple-render (:result line) [@(rf/subscribe [:epochs/current-epoch-id]) code-execution-id (:id line)]]])\n\n(defn find-bounds\n  \"Try and find the bounds of the form we are searching for. Uses some heuristics to\n  try and avoid matching partial forms, e.g. 'default-|weeks| for the form 'weeks.\"\n  [form-str search-str]\n  (let [re         (re-pattern (str \"(\\\\s|\\\\(|\\\\[|\\\\{)\" \"(\" (goog.string.regExpEscape search-str) \")\"))\n        result     (.exec re form-str)]\n    (if (some? result)\n      (let [index        (.-index result)\n            pre-match    (aget result 1)\n            matched-form (aget result 2)\n            index        (+ index (count pre-match))]\n        [index (+ index (count matched-form))])\n      ;; If the regex fails, fall back to string index just in case.\n      (let [start  (str/index-of form-str search-str)\n            length (if (and (some? search-str) (some? start))\n                     (count (pr-str search-str))\n                     0)]\n        [start (+ start length)]))))\n\n(defn event-expression\n  []\n  (let [scroll-pos (rf/subscribe [:code/scroll-pos])]\n    (reagent/create-class\n      {:component-did-update\n       (fn event-expression-component-did-update [this]\n         (let [node (reagent/dom-node this)]\n           (set! (.-scrollTop node) (:top @scroll-pos))\n           (set! (.-scrollLeft node) (:left @scroll-pos))))\n\n       :display-name\n       \"event-expression\"\n\n       :reagent-render\n       (fn\n         []\n         (let [highlighted-form @(rf/subscribe [:code/highlighted-form])\n               form-str         @(rf/subscribe [:code/current-zprint-form])\n               [start-index end-index] (find-bounds form-str (zp/zprint-str highlighted-form))\n               before           (subs form-str 0 start-index)\n               highlight        (subs form-str start-index end-index)\n               after            (subs form-str end-index)]\n           ;(println \">> event-expression:\" (pr-str (subs (pr-str highlighted-form) 0 30)))\n           ; DC: We get lots of React errors if we don't force a creation of a new element when the highlight changes. Not really sure why...\n           ^{:key (pr-str highlighted-form)}\n           [rc/box\n            :style {:max-height       (str (* 10 17) \"px\")  ;; Add scrollbar after 10 lines\n                    :overflow         \"auto\"\n                    :border           \"1px solid #e3e9ed\"\n                    :background-color common/white-background-color}\n            :attr {:on-scroll (handler-fn (rf/dispatch [:code/save-scroll-pos (-> event .-target .-scrollTop) (-> event .-target .-scrollLeft)]))}\n            :child (if (some? highlighted-form)\n                     [components/highlight {:language \"clojure\"}\n                      (list ^{:key \"before\"} before\n                            ^{:key \"hl\"} [:span.code-listing--highlighted highlight]\n                            ^{:key \"after\"} after)]\n                     [components/highlight {:language \"clojure\"}\n                      form-str])]))})))\n\n\n(defn event-fragments\n  [fragments code-exec-id]\n  ;(println \">> event-fragments - count:\" (count fragments))\n  (let [code-open? @(rf/subscribe [:code/code-open?])]\n    [rc/v-box\n     :size     \"1\"\n     :style    {:overflow-y \"auto\"}\n     :children (doall\n                 (for [frag fragments]\n                   (let [id (:id frag)]\n                     ^{:key id}\n                     [rc/v-box\n                      :class    \"code-fragment\"\n                      :style    {:margin-left (str (* 9 (dec (:indent-level frag))) \"px\")\n                                 :margin-top  (when (pos? id) \"-1px\")}\n                      :attr     {:on-mouse-enter (handler-fn #_(println \"OVER:\" (:id frag)) (rf/dispatch [:code/hover-form (:form frag)]))\n                                 :on-mouse-leave (handler-fn #_(println \" OUT:\" (:id frag)) (rf/dispatch [:code/exit-hover-form (:form frag)]))}\n                      :children [[code-header code-exec-id frag]\n                                 (when (get-in code-open? [@(rf/subscribe [:epochs/current-epoch-id]) code-exec-id id])\n                                   [code-block code-exec-id frag id])]])))]))\n\n\n(defn event-code\n  []\n  (let [code-traces      @(rf/subscribe [:code/current-code])\n        code-execution   (first code-traces) ;; Ignore multiple code executions for now\n        highlighted-form (rf/subscribe [:code/highlighted-form])\n        #_#_debug?           @(rf/subscribe [:settings/debug?])]\n    ;(println \"EVENT-CODE\")\n    (if-not code-execution\n      [no-event-instructions]\n      [rc/v-box\n       :size \"1 1 auto\"\n       :class \"code-panel\"\n       :children [#_(when debug? [:pre \"Hover \" (pr-str @highlighted-form) \"\\n\"])\n                  [event-expression]\n                  [rc/gap-f :size common/gs-19s]\n                  [event-fragments (->> (:code code-execution)\n                                        (remove (fn [line] (fn? (:result line)))))\n                   (:id code-execution)]]])))\n\n\n(defn render []\n  (let [epoch-id @(rf/subscribe [:epochs/current-match-state])]\n    ;; Create a new id on each panel because Reagent can throw an exception if\n    ;; the data provided in successive renders is sufficiently different.\n    ^{:key epoch-id}\n    [rc/v-box\n     :size     \"1\"\n     :class    \"event-panel\"\n     ;:style    {:margin-right common/gs-19s}\n     :gap      common/gs-19s\n     :children [[event-code]\n                [rc/gap-f :size \"0px\"]]]))\n"]}