{"version":3,"file":"rewrite_clj.node.stringz.js","sources":["rewrite_clj/node/stringz.cljs"],"mappings":"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","names":["rewrite-clj.node.stringz/wrap-string","lines","rewrite-clj.node.stringz/join-lines","rewrite-clj.node.stringz/->StringNode","this__11972__auto__","k__11973__auto__","cljs.core._lookup.cljs$core$IFn$_invoke$arity$3","this__11974__auto__","k28296","else__11975__auto__","G__28304","cljs.core/Keyword","cljs.core.get.cljs$core$IFn$_invoke$arity$3","__extmap","this__11986__auto__","writer__11987__auto__","opts__11988__auto__","pr-pair__11989__auto__","keyval__11990__auto__","cljs.core/pr-sequential-writer","cljs.core/pr-writer","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core/PersistentVector","G__28295","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__11970__auto__","__meta","this__11967__auto__","__hash","this__11976__auto__","cljs.core/count","this__11968__auto__","h__4030__auto__","fexpr__28307","coll__11969__auto__","cljs.core/hash-unordered-coll","this28297","other28298","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/PROTOCOL_SENTINEL","this__11981__auto__","k__11982__auto__","cljs.core/contains?","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","cljs.core/-with-meta","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core/not-empty","this__11979__auto__","k__11980__auto__","pred__28308","cljs.core/keyword-identical?","expr__28309","G__28311","G__28312","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","this__11984__auto__","cljs.core/seq","this__11971__auto__","this__11977__auto__","entry__11978__auto__","cljs.core/vector?","cljs.core/-assoc","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","cljs.core/-conj","rewrite-clj.node.stringz/StringNode","this__4208__auto__","cljs.core/List","writer__4209__auto__","cljs.core/-write","G__28299","rewrite-clj.node.stringz/map->StringNode","_","clojure.string.join.cljs$core$IFn$_invoke$arity$2","rewrite-clj.node.stringz/string-node","cljs.core.reduce.cljs$core$IFn$_invoke$arity$2","cljs.core/+","cljs.core.map.cljs$core$IFn$_invoke$arity$2","this","rewrite-clj.node.protocols/string","v","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","cljs.tools.reader/read-string","cljs.core/next"],"sourcesContent":["(ns rewrite-clj.node.stringz\n  (:require [rewrite-clj.node.protocols :as node]\n            [cljs.tools.reader :as r]\n            [clojure.string :as s]))\n\n;; ## Node\n\n(defn- wrap-string\n  [v]\n  (str \"\\\"\" v \"\\\"\"))\n\n(defn- join-lines\n  [lines]\n  (s/join \"\\n\" lines))\n\n(defrecord StringNode [lines]\n  node/Node\n  (tag [_]\n    (if (next lines)\n      :multi-line\n      :token))\n  (printable-only? [_]\n    false)\n  (sexpr [_]\n    (join-lines\n      (map\n        (comp r/read-string wrap-string)\n        lines)))\n  (length [_]\n    (+ 2 (reduce + (map count lines))))\n  (string [_]\n    (wrap-string (join-lines lines)))\n\n  Object\n  (toString [this]\n    (node/string this)))\n\n;(node/make-printable! StringNode)\n\n;; ## Constructors\n\n(defn string-node\n  \"Create node representing a string value.\n   Takes either a seq of strings or a single one.\"\n  [lines]\n  (if (string? lines)\n    (->StringNode [lines])\n    (->StringNode lines)))\n"]}