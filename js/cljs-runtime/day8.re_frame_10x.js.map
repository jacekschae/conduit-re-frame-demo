{"version":3,"file":"day8.re_frame_10x.js","sources":["day8/re_frame_10x.cljs"],"mappings":"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","names":["re-frame.trace/is-trace-enabled?","*current-trace*31619","re-frame.trace/*current-trace*","re-frame.trace/start-trace","end__29595__auto__","re-frame.interop/now","duration__29596__auto__","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","re-frame.trace/traces","cljs.core/conj","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","re-frame.trace/run-tracing-callbacks!","cljs.core.map.cljs$core$IFn$_invoke$arity$2","re-frame.interop/reagent-id","G__31600","G__31601","G__31602","G__31603","G__31604","G__31605","G__31606","G__31607","G__31608","G__31609","G__31610","G__31611","goog.object/get","cljs-ratom","day8.re-frame-10x/real-next-tick","reagent.impl.batching/next-tick","panel","new-trace__29597__auto__","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","cljs.core.update.cljs$core$IFn$_invoke$arity$4","cljs.core/merge","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","day8.re-frame-10x/monkey-patch-reagent","handle-keys","e","js/window.addEventListener","handle-mousemove","day8.re-frame-10x/factory-reset!","handle-window-resize","cljs.core/reset!","dragging?","reagent.impl.batching/queue-render","reagent.impl.component/rat-opts","position","mranderson047.reagent.v0v8v0_alpha2.reagent.core.atom.cljs$core$IFn$_invoke$arity$1","day8.re-frame-10x/do-after-render-trace-scheduled?","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","reagent.ratom/run-in-reaction","reagent.impl.component/do-render","c","rat","cljs.core/deref","path","G__31596","parent","day8.re-frame-10x/real-custom-wrapper","reagent.impl.component/custom-wrapper","key","f","G__31594","or__3922__auto__","combo-key?","day8.re-frame-10x/inject-devtools!","day8.re-frame-10x/comp-name","reagent.impl.component/static-fns","day8.re-frame-10x/static-fns","day8.re-frame-10x/ease-transition","left","showing?","panel-width%","js/window.focus","new-panel","*current-trace*31617","x","js/window.removeEventListener","handle-mouse-up","G__31616","cljs.core/Keyword","js/document","G__31647","mranderson047.re-frame.v0v10v2.re-frame.core/dispatch","*current-trace*31599","selected-tab","G__31642","mranderson047.re-frame.v0v10v2.re-frame.core/subscribe","day8.re-frame-10x/fiber-component-path","fiber","cljs.core/empty?","res","day8.re-frame-10x/init-tracing!","transition","day8.re-frame-10x/panel-div","day8.re-frame-10x.styles/inject-trace-styles","n","day8.re-frame-10x/component-path","G__31643","G__31641","window-width","new-window-width","_","reagent.impl.batching/mark-rendered","name","entering-input?","cljs.core/contains?","tag-name","id","js/window.innerWidth","G__31598","reagent.impl.util/fun-name","draggable-area","day8.re-frame-10x.db/init-db","day8.re-frame-10x/debug?","day8.re-frame-10x/devtools-outer","opts","G__31640","mranderson047.reagent.v0v8v0_alpha2.reagent.core.render.cljs$core$IFn$_invoke$arity$2","G__31595","*current-trace*31621","*current-trace*31623","day8.re-frame-10x/init-db!","G__31644","pin-to-bottom?","temp__5455__auto__","G__31597","day8.re-frame-10x/resizer-style","reagent.impl.util/*non-reactive*","*current-trace*31620","*current-trace*31622","G__31618","day8.re-frame-10x.view.container/devtools-inner","reagent.impl.batching/render-queue","and__3911__auto__","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/last","clojure.string.split.cljs$core$IFn$_invoke$arity$2","goog/define","day8.re-frame-10x/real-schedule","reagent.impl.batching/schedule","reagent.impl.component/component-path","mranderson047.reagent.v0v8v0-alpha2.reagent.core/create-class","y"],"sourcesContent":["(ns day8.re-frame-10x\n  (:require [day8.re-frame-10x.styles :as styles]\n            [day8.re-frame-10x.view.container :as container]\n            [day8.re-frame-10x.subs]\n            [day8.re-frame-10x.events]\n            [day8.re-frame-10x.db :as trace.db]\n            [re-frame.trace :as trace :include-macros true]\n            [clojure.string :as str]\n            [reagent.interop :refer-macros [$ $!]]\n            [reagent.impl.util :as util]\n            [reagent.impl.component :as component]\n            [reagent.impl.batching :as batch]\n            [reagent.ratom :as ratom]\n            [goog.object :as gob]\n            [re-frame.interop :as interop]\n            [mranderson047.re-frame.v0v10v2.re-frame.core :as rf]\n            [mranderson047.reagent.v0v8v0-alpha2.reagent.core :as r]))\n\n(goog-define debug? false)\n\n;; from https://github.com/reagent-project/reagent/blob/3fd0f1b1d8f43dbf169d136f0f905030d7e093bd/src/reagent/impl/component.cljs#L274\n(defn fiber-component-path [fiber]\n  (let [name   (some-> fiber\n                       ($ :type)\n                       ($ :displayName))\n        parent (some-> fiber\n                       ($ :return))\n        path   (some-> parent\n                       fiber-component-path\n                       (str \" > \"))\n        res    (str path name)]\n    (when-not (empty? res) res)))\n\n(defn component-path [c]\n  ;; Alternative branch for React 16\n  (if-let [fiber (some-> c ($ :_reactInternalFiber))]\n    (fiber-component-path fiber)\n    (component/component-path c)))\n\n(defn comp-name [c]\n  (let [n (or (component-path c)\n              (some-> c .-constructor util/fun-name))]\n    (if-not (empty? n)\n      n\n      \"\")))\n\n(def static-fns\n  {:render\n   (fn mp-render []                                         ;; Monkeypatched render\n     (this-as c\n       (trace/with-trace {:op-type   :render\n                          :tags      {:component-path (component-path c)}\n                          :operation (last (str/split (component-path c) #\" > \"))}\n                         (if util/*non-reactive*\n                           (reagent.impl.component/do-render c)\n                           (let [rat        ($ c :cljsRatom)\n                                 _          (batch/mark-rendered c)\n                                 res        (if (nil? rat)\n                                              (ratom/run-in-reaction #(reagent.impl.component/do-render c) c \"cljsRatom\"\n                                                                     batch/queue-render reagent.impl.component/rat-opts)\n                                              (._run rat false))\n                                 cljs-ratom ($ c :cljsRatom)] ;; actually a reaction\n                             (trace/merge-trace!\n                               {:tags {:reaction      (interop/reagent-id cljs-ratom)\n                                       :input-signals (when cljs-ratom\n                                                        (map interop/reagent-id (gob/get cljs-ratom \"watching\" :none)))}})\n                             res)))))})\n\n\n(defonce real-custom-wrapper reagent.impl.component/custom-wrapper)\n(defonce real-next-tick reagent.impl.batching/next-tick)\n(defonce real-schedule reagent.impl.batching/schedule)\n(defonce do-after-render-trace-scheduled? (atom false))\n\n(defn monkey-patch-reagent []\n  (let [#_#_real-renderer reagent.impl.component/do-render\n        ]\n\n\n    #_(set! reagent.impl.component/do-render\n            (fn [c]\n              (let [name (comp-name c)]\n                (js/console.log c)\n                (trace/with-trace {:op-type   :render\n                                   :tags      {:component-path (component-path c)}\n                                   :operation (last (str/split name #\" > \"))}\n                                  (real-renderer c)))))\n\n    (set! reagent.impl.component/static-fns static-fns)\n\n    (set! reagent.impl.component/custom-wrapper\n          (fn [key f]\n            (case key\n              :componentWillUnmount\n              (fn [] (this-as c\n                       (trace/with-trace {:op-type   key\n                                          :operation (last (str/split (comp-name c) #\" > \"))\n                                          :tags      {:component-path (component-path c)\n                                                      :reaction       (interop/reagent-id ($ c :cljsRatom))}})\n                       (.call (real-custom-wrapper key f) c c)))\n\n              (real-custom-wrapper key f))))\n\n    (set! reagent.impl.batching/next-tick\n          (fn [f]\n            ;; Schedule a trace to be emitted after a render if there is nothing else scheduled after that render.\n            ;; This signals the end of the epoch.\n\n            #_(swap! do-after-render-trace-scheduled?\n                     (fn [scheduled?]\n                       (js/console.log \"Setting up scheduled after\" scheduled?)\n                       (if scheduled?\n                         scheduled?\n                         (do (reagent.impl.batching/do-after-render ;; a do-after-flush would probably be a better spot to put this if it existed.\n                               (fn []\n                                 (js/console.log \"Do after render\" reagent.impl.batching/render-queue)\n                                 (reset! do-after-render-trace-scheduled? false)\n                                 (when (false? (.-scheduled? reagent.impl.batching/render-queue))\n                                   (trace/with-trace {:op-type :reagent/quiescent}))))\n                             true))))\n            (real-next-tick (fn []\n                              (trace/with-trace {:op-type :raf}\n                                                (f)\n                                                (trace/with-trace {:op-type :raf-end})\n                                                (when (false? (.-scheduled? reagent.impl.batching/render-queue))\n                                                  (trace/with-trace {:op-type :reagent/quiescent}))\n\n                                                )))))\n\n    #_(set! reagent.impl.batching/schedule\n            (fn []\n              (reagent.impl.batching/do-after-render\n                (fn []\n                  (when @do-after-render-trace-scheduled?\n                    (trace/with-trace {:op-type :do-after-render})\n                    (reset! do-after-render-trace-scheduled? false))))\n              (real-schedule)))))\n\n\n(defn init-tracing!\n  \"Sets up any initial state that needs to be there for tracing. Does not enable tracing.\"\n  []\n  (monkey-patch-reagent))\n\n\n(defn resizer-style [draggable-area]\n  {:position \"absolute\" :z-index 2 :opacity 0\n   :left     (str (- (/ draggable-area 2)) \"px\") :width \"10px\" :height \"100%\" :top \"0px\" :cursor \"col-resize\"})\n\n(def ease-transition \"left 0.2s ease-out, top 0.2s ease-out, width 0.2s ease-out, height 0.2s ease-out\")\n\n(defn devtools-outer [opts]\n  ;; Add clear button\n  ;; Filter out different trace types\n  (let [position             (r/atom :right)\n        panel-width%         (rf/subscribe [:settings/panel-width%])\n        showing?             (rf/subscribe [:settings/show-panel?])\n        dragging?            (r/atom false)\n        pin-to-bottom?       (r/atom true)\n        selected-tab         (rf/subscribe [:settings/selected-tab])\n        window-width         (r/atom js/window.innerWidth)\n        handle-window-resize (fn [e]\n                               ;; N.B. I don't think this should be a perf bottleneck.\n                               (reset! window-width js/window.innerWidth))\n        handle-keys          (fn [e]\n                               (let [combo-key?      (or (.-ctrlKey e) (.-metaKey e) (.-altKey e))\n                                     tag-name        (.-tagName (.-target e))\n                                     key             (.-key e)\n                                     entering-input? (contains? #{\"INPUT\" \"SELECT\" \"TEXTAREA\"} tag-name)]\n                                 (when (and (not entering-input?) combo-key?)\n                                   (cond\n                                     (and (= key \"h\") (.-ctrlKey e))\n                                     (do (rf/dispatch [:settings/user-toggle-panel])\n                                         (.preventDefault e))))))\n        handle-mousemove     (fn [e]\n                               (when @dragging?\n                                 (let [x                (.-clientX e)\n                                       y                (.-clientY e)\n                                       new-window-width js/window.innerWidth]\n                                   (.preventDefault e)\n                                   (rf/dispatch [:settings/panel-width% (/ (- new-window-width x) new-window-width)])\n                                   (reset! window-width new-window-width))))\n        handle-mouse-up      (fn [e] (reset! dragging? false))]\n    (r/create-class\n      {:component-did-mount    (fn []\n                                 (js/window.addEventListener \"keydown\" handle-keys)\n                                 (js/window.addEventListener \"mousemove\" handle-mousemove)\n                                 (js/window.addEventListener \"mouseup\" handle-mouse-up)\n                                 (js/window.addEventListener \"resize\" handle-window-resize))\n       :component-will-unmount (fn []\n                                 (js/window.removeEventListener \"keydown\" handle-keys)\n                                 (js/window.removeEventListener \"mousemove\" handle-mousemove)\n                                 (js/window.removeEventListener \"mouseup\" handle-mouse-up)\n                                 (js/window.removeEventListener \"resize\" handle-window-resize))\n       :display-name           \"devtools outer\"\n       :reagent-render         (fn []\n                                 (let [draggable-area 10\n                                       left           (if @showing? (str (* 100 (- 1 @panel-width%)) \"%\")\n                                                                    (str @window-width \"px\"))\n                                       transition     (if @dragging?\n                                                        \"\"\n                                                        ease-transition)]\n                                   [:div.panel-wrapper\n                                    {:style {:position \"fixed\" :width \"0px\" :height \"0px\" :top \"0px\" :left \"0px\" :z-index 99999999}}\n                                    [:div.panel\n                                     {:style {:position   \"fixed\" :z-index 1 :box-shadow \"rgba(0, 0, 0, 0.3) 0px 0px 4px\" :background \"white\"\n                                              :display    \"flex\"\n                                              :left       left :top \"0px\" :width (str (* 100 @panel-width%) \"%\") :height \"100%\"\n                                              :transition transition}}\n                                     [:div.panel-resizer (when @showing? {:style         (resizer-style draggable-area)\n                                                                          :on-mouse-down #(reset! dragging? true)})]\n                                     [container/devtools-inner opts]]]))})))\n\n\n(defn panel-div []\n  (let [id    \"--re-frame-10x--\"\n        panel (.getElementById js/document id)]\n    (if panel\n      panel\n      (let [new-panel (.createElement js/document \"div\")]\n        (.setAttribute new-panel \"id\" id)\n        (.appendChild (.-body js/document) new-panel)\n        (js/window.focus new-panel)\n        new-panel))))\n\n(defn inject-devtools! []\n  (styles/inject-trace-styles js/document)\n  (r/render [devtools-outer {:panel-type :inline\n                             :debug?     debug?}] (panel-div)))\n\n(defn init-db! []\n  (trace.db/init-db debug?))\n\n(defn ^:export factory-reset! []\n  (rf/dispatch [:settings/factory-reset]))\n"]}