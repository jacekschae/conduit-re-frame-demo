{"version":3,"file":"day8.re_frame_10x.subs.js","sources":["day8/re_frame_10x/subs.cljs"],"mappings":"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","names":["ignore-unchanged-l2?","cljs.spec.alpha/map-spec-impl","G__30973","cljs.core/map?","cljs.core/contains?","day8.re-frame-10x.subs/sub-sort-val","order-x","order-y","sub","total-time","day8.re-frame-10x.metamorphic/elapsed-time","start","end","G__30767","G__30768","G__30769","G__30770","mranderson047.re-frame.v0v10v2.re-frame.core/reg-sub","event-dofx-time","cljs.core.get.cljs$core$IFn$_invoke$arity$3","counts","epochs","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","state","cljs.spec.alpha/def-impl","cljs.core/any?","cljs.core/first","match","day8.re-frame-10x.subs/string!","match-state","G__31233","G__31234","G__31235","G__31236","G__30799","G__30800","G__30801","G__30802","G__30803","G__30804","G__30577","G__30578","G__30579","G__30580","G__30783","G__30784","G__30785","G__30786","G__30490","G__30491","G__30492","G__30493","code","settings","cljs.core/count","traces","form","_","G__31021","G__31022","G__31023","G__31024","render-time","G__31205","G__31206","G__31207","G__31208","G__30611","G__30612","G__30613","G__30614","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","frame-pairs","frame-number","subs","day8.re-frame-10x.subs/accumulate-sub-value","G__30691","G__30692","G__30975","cljs.core/Keyword","sub-type","munged-ns","filtered-views","cljs.core/key","me","G__30980","t","cljs.core.get.cljs$core$IFn$_invoke$arity$2","app-db-settings","G__31064","G__31065","G__31066","G__31067","G__31068","G__31069","day8.re-frame-10x.subs/accumulate-sub-value-memoized","vec__30879","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","cljs.core.partition.cljs$core$IFn$_invoke$arity$2","af-start-end","subs-time","cljs.core.transduce.cljs$core$IFn$_invoke$arity$3","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2","cljs.core/vals","cljs.core/frequencies","G__30759","G__30760","G__30761","G__30762","event-run-time","G__31199","G__31200","G__30707","G__30708","cljs.core/last","G__30454","G__30455","G__30456","G__30457","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","trace","G__30699","G__30700","G__30701","G__30702","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core/val","G__30607","G__30608","db","total","x","y","G__30683","G__30684","G__30685","G__30686","expansions","path","G__30831","G__30832","G__30833","G__30834","G__30791","G__30792","G__30793","G__30794","G__30603","G__30604","cljs.core/constantly","cljs.core/munge","G__30865","G__30866","G__30867","G__30868","G__30869","G__30870","sub-info","subscription","snapshot","sub-state","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","cljs.core.filter.cljs$core$IFn$_invoke$arity$1","day8.re-frame-10x.metamorphic/subscription?","epoch-traces","day8.re-frame-10x.metamorphic/id-between-xf","cljs.core.into.cljs$core$IFn$_invoke$arity$3","af-traces","G__30840","G__30841","G__30842","G__30843","p__30717","vec__30718","match-ids","p__30871","p__30872","vec__30873","vec__30876","current-id","p__31084","vec__31085","all-subs","G__30735","G__30736","G__30737","G__30738","event-handler-time","order","G__30775","G__30776","G__30777","G__30778","start-of-render","end-of-epoch","G__30955","G__30956","G__30957","G__30958","i","G__30599","G__30600","subx","G__30900","G__30901","G__30902","G__30903","p__30654","vec__30655","day8.re-frame-10x.subs/filter-ignored-views","p1__30839#","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","or__3922__auto__","day8.re-frame-10x.metamorphic/request-animation-frame?","day8.re-frame-10x.subs/+nil","current","cljs.core.subs.cljs$core$IFn$_invoke$arity$3","clojure.string.last_index_of.cljs$core$IFn$_invoke$arity$2","cljs.core/memoize","G__31263","G__31264","G__31265","G__31266","G__30751","G__30752","G__30753","G__30754","ids","day8.re-frame-10x.utils.utils/last-in-vec","G__30587","G__30588","G__31171","G__31172","G__31173","G__31174","G__30924","G__30925","G__31078","G__31079","G__31080","G__31081","G__31082","G__31083","var_args","G__30860","args-arr__4514__auto__","len__4499__auto__","i__4500__auto__","argseq__4515__auto__","cljs.core/IndexedSeq","seq30857","G__30858","cljs.core/next","G__30859","self__4486__auto__","day8.re-frame-10x.utils.utils/id-between-xf","beginning","ending","G__30815","G__30816","G__30817","G__30818","G__30819","G__30820","day8.re-frame-10x.metamorphic/render?","and__3911__auto__","G__30931","G__30932","G__30933","G__30934","G__30446","G__30447","G__30448","G__30449","G__30422","G__30423","G__30424","G__30425","G__30743","G__30744","G__30745","G__30746","frame-traces","p__30988","p__30989","vec__30990","vec__30993","day8.re-frame-10x.subs/prepare-pod-info","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","cljs.core/+","more","G__30519","G__30520","G__30521","G__30522","G__30551","G__30552","G__30553","G__30554","G__30671","G__30672","G__30673","G__30674","G__30675","G__30676","p__30805","vec__30806","cljs.core.map.cljs$core$IFn$_invoke$arity$1","p__30564","vec__30565","cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic","p1__30528#","epoch","exp","G__31047","G__31048","G__31049","G__31050","G__31051","G__31052","day8.re-frame-10x.metamorphic/unchanged-l2-subscription?","cljs.core/empty?","G__30888","G__30889","G__30890","G__30891","G__30593","G__30594","start-of-epoch","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","remove-fn","G__30543","G__30544","G__30545","G__30546","G__30473","G__30474","G__30475","G__30476","G__30438","G__30439","G__30440","G__30441","trace-root","cljs.core/compare","G__30630","G__30631","G__30632","G__30633","G__30634","G__30635","G__30636","G__30637","cljs.spec.alpha/nilable-impl","cljs.core/pos-int?","G__31161","G__31162","G__31163","G__31164","G__31034","G__31035","G__31036","G__31037","root","G__31152","G__31153","G__31154","G__31155","p__30821","vec__30822","G__31187","G__31188","G__31189","G__31190","day8.re-frame-10x.metamorphic/request-animation-frame-end?","zprint.core/zprint-str","G__30963","G__30964","G__30965","G__30966","G__31115","G__31116","G__31117","G__31118","G__30711","G__30712","G__30713","G__30714","G__30715","G__30716","temp__5461__auto__","cljs.core.remove.cljs$core$IFn$_invoke$arity$1","G__31242","G__31243","G__31244","G__31245","day8.re-frame-10x.subs/sub-op-type->type","G__30430","G__30431","G__30432","G__30433","G__30848","G__30849","G__30850","G__30851","G__30481","G__30482","G__30483","G__30484","G__30560","G__30561","G__30562","G__30563","day8.re-frame-10x.metamorphic/matched-event","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","G__31217","G__31218","G__31219","G__31220","day8.re-frame-10x.subs/sub-type-value","cljs.core.keep_indexed.cljs$core$IFn$_invoke$arity$2","js/Math.pow","cljs.core/rest","G__30727","G__30728","G__30729","G__30730","map__30892","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","event-time","cljs.spec.alpha.every_impl.cljs$core$IFn$_invoke$arity$4","G__30972","cljs.core/coll?","cljs.core.sort_by.cljs$core$IFn$_invoke$arity$3","G__30912","G__30913","G__30914","G__30915","G__30974","G__31253","G__31254","G__31255","G__31256","G__30462","G__30463","G__30464","G__30465","G__31104","G__31105","G__31106","G__31107","temp__5455__auto__","cljs.spec.alpha/and-spec-impl","p1__30971#","cljs.core/string?","G__30507","G__30508","G__30945","G__30946","G__30947","G__30948","G__31137","G__31138","G__31139","G__31140","p__30639","vec__30640","G__30622","G__30623","G__30624","G__30625","G__30529","G__30530","G__30531","G__30532","remaining-interceptors","G__31124","G__31125","G__31126","G__31127","G__30659","G__30660","G__30661","G__30662","G__30663","G__30664","cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$2","cljs.core/vec","G__30499","G__30500","G__30501","G__30502","G__30695","G__30696","G__30418","G__30419","cljs.core/set","G__30511","G__30512","G__30513","G__30514"],"sourcesContent":["(ns day8.re-frame-10x.subs\n  (:require [mranderson047.re-frame.v0v10v2.re-frame.core :as rf]\n            [day8.re-frame-10x.metamorphic :as metam]\n            [day8.re-frame-10x.utils.utils :as utils]\n            [clojure.string :as str]\n            [cljs.spec.alpha :as s]\n            [zprint.core :as zp]))\n\n(rf/reg-sub\n  :settings/root\n  (fn [db _]\n    (get db :settings)))\n\n(rf/reg-sub\n  :settings/panel-width%\n  :<- [:settings/root]\n  (fn [settings _]\n    (get settings :panel-width%)))\n\n(rf/reg-sub\n  :settings/show-panel?\n  :<- [:settings/root]\n  (fn [settings _]\n    (get settings :show-panel?)))\n\n(rf/reg-sub\n  :settings/selected-tab\n  :<- [:settings/root]\n  (fn [settings _]\n    (if (:showing-settings? settings)\n      :settings\n      (get settings :selected-tab))))\n\n(rf/reg-sub\n  :settings/paused?\n  :<- [:settings/root]\n  (fn [settings _]\n    (:paused? settings)))\n\n(rf/reg-sub\n  :settings/number-of-retained-epochs\n  :<- [:settings/root]\n  (fn [settings]\n    (:number-of-epochs settings)))\n\n(rf/reg-sub\n  :settings/ignored-events\n  :<- [:settings/root]\n  (fn [settings]\n    (sort-by :sort (vals (:ignored-events settings)))))\n\n(rf/reg-sub\n  :settings/filtered-view-trace\n  :<- [:settings/root]\n  (fn [settings]\n    (sort-by :sort (vals (:filtered-view-trace settings)))))\n\n(rf/reg-sub\n  :settings/low-level-trace\n  ;; TODO: filter from traces panel\n  ;; TODO: eventually drop these low level traces after computing the state we need from them.\n  :<- [:settings/root]\n  (fn [settings]\n    (:low-level-trace settings)))\n\n(rf/reg-sub\n  :settings/debug?\n  :<- [:settings/root]\n  (fn [settings]\n    (:debug? settings)))\n\n(rf/reg-sub\n  :settings/app-db-follows-events?\n  :<- [:settings/root]\n  (fn [settings]\n    (:app-db-follows-events? settings)))\n\n;; App DB\n\n(rf/reg-sub\n  :app-db/root\n  (fn [db _]\n    (get db :app-db)))\n\n(rf/reg-sub\n  :app-db/current-epoch-app-db-after\n  :<- [:epochs/current-event-trace]\n  (fn [trace _]\n    (get-in trace [:tags :app-db-after])))\n\n(rf/reg-sub\n  :app-db/current-epoch-app-db-before\n  :<- [:epochs/current-event-trace]\n  (fn [trace _]\n    (get-in trace [:tags :app-db-before])))\n\n(rf/reg-sub\n  :app-db/paths\n  :<- [:app-db/root]\n  (fn [app-db-settings _]\n    (map #(assoc (val %) :id (key %))\n         (get app-db-settings :paths))))\n\n(rf/reg-sub\n  :app-db/search-string\n  :<- [:app-db/root]\n  (fn [app-db-settings _]\n    (get app-db-settings :search-string)))\n\n(rf/reg-sub\n  :app-db/expansions\n  :<- [:app-db/root]\n  (fn [app-db-settings _]\n    (get app-db-settings :json-ml-expansions)))\n\n(rf/reg-sub\n  :app-db/node-expanded?\n  :<- [:app-db/expansions]\n  (fn [expansions [_ path]]\n    (contains? expansions path)))\n\n(rf/reg-sub\n  :app-db/reagent-id\n  :<- [:app-db/root]\n  (fn [root _]\n    (:reagent-id root)))\n\n;;\n\n(rf/reg-sub\n  :traces/trace-root\n  (fn [db _]\n    (:traces db)))\n\n(rf/reg-sub\n  :trace-panel/root\n  (fn [db _]\n    (:trace-panel db)))\n\n(rf/reg-sub\n  :traces/filter-items\n  (fn [db _]\n    (get-in db [:traces :filter-items])))\n\n(rf/reg-sub\n  :traces/expansions\n  (fn [db _]\n    (get-in db [:traces :expansions])))\n\n(rf/reg-sub\n  :traces/categories\n  (fn [db _]\n    (get-in db [:traces :categories])))\n\n(rf/reg-sub\n  :traces/all-traces\n  :<- [:traces/trace-root]\n  (fn [traces _]\n    (:all-traces traces)))\n\n(rf/reg-sub\n  :traces/number-of-traces\n  :<- [:traces/all-traces]\n  (fn [traces _]\n    (count traces)))\n\n(rf/reg-sub\n  :traces/current-event-traces\n  :<- [:traces/all-traces]\n  :<- [:epochs/beginning-trace-id]\n  :<- [:epochs/ending-trace-id]\n  (fn [[traces beginning ending] _]\n    (into [] (utils/id-between-xf beginning ending) traces)))\n\n(defn filter-ignored-views [[traces filtered-views] _]\n  (let [munged-ns (->> filtered-views\n                       (map (comp munge :ns-str))\n                       (set))]\n    (into []\n          ;; Filter out view namespaces we don't care about.\n          (remove\n            (fn [trace] (and (metam/render? trace)\n                             (contains? munged-ns (subs (:operation trace) 0 (str/last-index-of (:operation trace) \".\"))))))\n          traces)))\n\n(rf/reg-sub\n  :traces/current-event-visible-traces\n  :<- [:traces/current-event-traces]\n  :<- [:settings/filtered-view-trace]\n  filter-ignored-views)\n\n(rf/reg-sub\n  :traces/all-visible-traces\n  :<- [:traces/all-traces]\n  :<- [:settings/filtered-view-trace]\n  filter-ignored-views)\n\n(rf/reg-sub\n  :trace-panel/show-epoch-traces?\n  :<- [:trace-panel/root]\n  (fn [trace-root]\n    (:show-epoch-traces? trace-root)))\n\n;;\n\n(rf/reg-sub\n  :global/unloading?\n  (fn [db _]\n    (get-in db [:global :unloading?])))\n\n;;\n\n(rf/reg-sub\n  :snapshot/snapshot-root\n  (fn [db _]\n    (:snapshot db)))\n\n(rf/reg-sub\n  :snapshot/snapshot-ready?\n  :<- [:snapshot/snapshot-root]\n  (fn [snapshot _]\n    (contains? snapshot :current-snapshot)))\n\n;;\n\n(rf/reg-sub\n  :epochs/epoch-root\n  (fn [db _]\n    (:epochs db)))\n\n(rf/reg-sub\n  :epochs/current-match-state\n  :<- [:epochs/epoch-root]\n  :<- [:epochs/match-ids]\n  (fn [[epochs match-ids] _]\n    (let [current-id (:current-epoch-id epochs)\n          match      (cond\n                       (nil? current-id) (last (:matches epochs))\n                       (< current-id (first match-ids)) (first (:matches epochs))\n                       ;; This case seems impossible, but can happen if the user filters out\n                       ;; an event that they are 'on'.\n                       (> current-id (last match-ids)) (last (:matches epochs))\n                       :else (get (:matches-by-id epochs) current-id))]\n      match)))\n\n(rf/reg-sub\n  :epochs/current-match\n  :<- [:epochs/current-match-state]\n  (fn [match-state _]\n    (:match-info match-state)))\n\n(rf/reg-sub\n  :epochs/current-event-trace\n  :<- [:epochs/current-match]\n  (fn [match _]\n    (metam/matched-event match)))\n\n(rf/reg-sub\n  :epochs/current-event\n  :<- [:epochs/current-event-trace]\n  (fn [trace _]\n    (get-in trace [:tags :event])))\n\n(rf/reg-sub\n  :epochs/number-of-matches\n  :<- [:epochs/epoch-root]\n  (fn [epochs _]\n    (count (get epochs :matches))))\n\n(rf/reg-sub\n  :epochs/current-event-index\n  :<- [:epochs/epoch-root]\n  (fn [epochs _]\n    (:current-epoch-index epochs)))\n\n(rf/reg-sub\n  :epochs/current-epoch-id\n  :<- [:epochs/epoch-root]\n  (fn [epochs _]\n    (:current-epoch-id epochs)))\n\n(rf/reg-sub\n  :epochs/match-ids\n  :<- [:epochs/epoch-root]\n  (fn [epochs]\n    (:match-ids epochs)))\n\n(rf/reg-sub\n  :epochs/beginning-trace-id\n  :<- [:epochs/current-match]\n  (fn [match]\n    (:id (first match))))\n\n(rf/reg-sub\n  :epochs/ending-trace-id\n  :<- [:epochs/current-match]\n  (fn [match]\n    (:id (last match))))\n\n(rf/reg-sub\n  :epochs/older-epochs-available?\n  :<- [:epochs/current-epoch-id]\n  :<- [:epochs/match-ids]\n  (fn [[current ids]]\n    (and (< 1 (count ids))\n         (or (nil? current)\n             (> current (nth ids 0))))))\n\n(rf/reg-sub\n  :epochs/newer-epochs-available?\n  :<- [:epochs/current-epoch-id]\n  :<- [:epochs/match-ids]\n  (fn [[current ids]]\n    (and (< 1 (count ids))\n         (some? current)\n         (< current (utils/last-in-vec ids)))))\n\n;;\n\n(rf/reg-sub\n  :timing/total-epoch-time\n  :<- [:traces/current-event-traces]\n  (fn [traces]\n    (let [start-of-epoch (nth traces 0)\n          end-of-epoch   (utils/last-in-vec traces)]\n      (metam/elapsed-time start-of-epoch end-of-epoch))))\n\n(rf/reg-sub\n  :timing/animation-frame-traces\n  :<- [:traces/current-event-traces]\n  (fn [traces]\n    (filter #(or (metam/request-animation-frame? %)\n                 (metam/request-animation-frame-end? %))\n            traces)))\n\n(rf/reg-sub\n  :timing/animation-frame-count\n  :<- [:timing/animation-frame-traces]\n  (fn [frame-traces]\n    (count (filter metam/request-animation-frame? frame-traces))))\n\n(defn ^number +nil\n  \"Returns the sum of nums. (+) returns nil (not 0 like in cljs.core).\"\n  ([] nil)\n  ([x] x)\n  ([x y] (cljs.core/+ x y))\n  ([x y & more]\n   (reduce + (cljs.core/+ x y) more)))\n\n(rf/reg-sub\n  :timing/animation-frame-time\n  :<- [:timing/animation-frame-traces]\n  :<- [:traces/current-event-traces]\n  (fn [[af-start-end epoch-traces] [_ frame-number]]\n    (let [frame-pairs (partition 2 af-start-end)\n          [start end] (nth frame-pairs (dec frame-number))\n          af-traces   (into [] (metam/id-between-xf (:id start) (:id end)) epoch-traces)\n          total-time  (metam/elapsed-time start end)\n          ;; TODO: these times double count renders/subs that happened as a child of another\n          ;; need to fix either here, at ingestion point, or most preferably in re-frame at tracing point.\n          subs-time   (transduce (comp\n                                   (filter metam/subscription?)\n                                   (map :duration))\n                                 +nil af-traces)\n          render-time (transduce (comp\n                                   (filter metam/render?)\n                                   (map :duration))\n                                 +nil af-traces)]\n      {:timing/animation-frame-total  total-time\n       :timing/animation-frame-subs   subs-time\n       :timing/animation-frame-render render-time\n       ;; TODO: handle rounding weirdness here, make sure it is never below 0.\n       :timing/animation-frame-misc   (- total-time subs-time render-time)})))\n\n(rf/reg-sub\n  :timing/event-processing-time\n  :<- [:epochs/current-match-state]\n  (fn [match]\n    (let [{:re-frame/keys [event-time event-handler-time event-dofx-time event-run-time]} (get match :timing)\n          ;; The scope of tracing is:\n          ;; event-run-time\n          ;;   event-time\n          ;;     event-handler-time\n          ;;     event-dofx-time\n          ;;     <other stuff>\n          ;;   <other stuff>\n          remaining-interceptors (- event-time event-handler-time event-dofx-time)]\n      {:timing/event-total        event-run-time\n       :timing/event-handler      event-handler-time\n       :timing/event-effects      event-dofx-time\n       :timing/event-interceptors remaining-interceptors\n       ;; TODO: look at splitting out interceptors from misc, there was a suspiciously high amount of time\n       ;; in misc on some events, so that needs to be investigated.\n       ; :timing/event-misc (- event-run-time event-time)\n       :timing/event-misc         (- event-run-time event-handler-time event-dofx-time)})))\n\n(rf/reg-sub\n  :timing/render-time\n  :<- [:traces/current-event-traces]\n  (fn [traces]\n    (let [start-of-render (first (filter metam/request-animation-frame? traces))\n          end-of-epoch    (utils/last-in-vec traces)]\n      (metam/elapsed-time start-of-render end-of-epoch))))\n\n(rf/reg-sub\n  :timing/data-available?\n  :<- [:traces/current-event-traces]\n  (fn [traces]\n    (not (empty? traces))))\n\n;;\n\n(rf/reg-sub\n  :subs/root\n  (fn [db _]\n    (:subs db)))\n\n(rf/reg-sub\n  :subs/all-sub-traces\n  :<- [:traces/current-event-traces]\n  (fn [traces]\n    (filter metam/subscription? traces)))\n\n(rf/reg-sub\n  :subs/subscription-info\n  :<- [:epochs/epoch-root]\n  (fn [epoch]\n    (:subscription-info epoch)))\n\n(rf/reg-sub\n  :subs/sub-state\n  :<- [:epochs/epoch-root]\n  (fn [epochs]\n    (:sub-state epochs)))\n\n(rf/reg-sub\n  :subs/current-epoch-sub-state\n  :<- [:epochs/current-match-state]\n  (fn [match-state]\n    (:sub-state match-state)))\n\n(def string! (s/and string? #(not (empty? %))))\n\n(s/def :sub/id string!)\n(s/def :sub/reagent-id string!)\n(s/def :sub/run-types #{:sub/create :sub/dispose :sub/run :sub/not-run})\n(s/def :sub/order (s/nilable (s/coll-of :sub/run-types)))\n(s/def :sub/layer (s/nilable pos-int?))\n(s/def :sub/path-data any?)\n(s/def :sub/path string!)\n(s/def :sub/value any?)\n(s/def :sub/previous-value any?)\n(s/def :subs/view-panel-sub\n  (s/keys :req-un [:sub/id :sub/reagent-id :sub/order :sub/layer :sub/path-data :sub/path]\n          :opt-un [:sub/value :sub/previous-value]))\n(s/def :subs/view-subs (s/coll-of :subs/view-panel-sub))\n\n(defn sub-type-value\n  [sub-type]\n  (case sub-type\n    :sub/create 5\n    :sub/run 4\n    :sub/dispose 3\n    :sub/not-run 2\n    1))\n\n(defn accumulate-sub-value\n  \"Calculate a sorting value for a series of subscription trace types.\"\n  ;; A reader might reasonably ask, \"Why are we going to all this work here?\"\n  ;; We calculate a custom value rather than just comparing two order vectors,\n  ;; because the default compare logic for comparing vectors is to sort shorter\n  ;; vectors above longer ones, whereas we want all CRR, CR, C orders to be\n  ;; sorted adjacent to each other, in that order.\n  ;;\n  ;; The first sub type in the order is worth (n * 10^3),\n  ;; then the next one (if it exists), is worth (n * 10^2), and so-on.\n  [order]\n  (loop [exp   3\n         total 0\n         order order]\n    (if-let [sub-type (first order)]\n      (recur (dec exp) (+ total (* (sub-type-value sub-type) (js/Math.pow 10 exp))) (rest order))\n      total)))\n\n(def accumulate-sub-value-memoized\n  (memoize accumulate-sub-value))\n\n(defn sub-sort-val [order-x order-y]\n  ;; Note x and y are reversed here so that the \"highest\" sub orders get sorted first.\n  (compare (accumulate-sub-value-memoized order-y)\n           (accumulate-sub-value-memoized order-x)))\n\n(defn sub-op-type->type [t]\n  (case (:op-type t)\n    :sub/create :created\n    :sub/run :re-run\n    :sub/dispose :destroyed\n\n    :not-run))\n\n(defn prepare-pod-info\n  \"Returns sub info prepared for rendering in pods\"\n  [[sub-info sub-state] [subscription]]\n  (let [remove-fn (if (= subscription :subs/intra-epoch-subs)\n                    (fn [me] (nil? (:order (val me))))\n                    (constantly false))\n        subx      (->> sub-state\n                       (remove remove-fn)\n                       (map (fn [me] (let [state        (val me)\n                                           subscription (:subscription state)\n                                           sub          {:id         (key me)\n                                                         :reagent-id (key me)\n                                                         :layer      (get-in sub-info [(first subscription) :layer])\n                                                         :path-data  subscription\n                                                         :path       (pr-str subscription)\n                                                         :order      (or (:order state) [:sub/not-run])\n                                                         :sub/traits (:sub/traits state)}\n                                           sub          (if (contains? state :value)\n                                                          (assoc sub :value (:value state))\n                                                          sub)\n                                           sub          (if (contains? state :previous-value)\n                                                          (assoc sub :previous-value (:previous-value state))\n                                                          sub)]\n                                       sub)))\n                       (sort-by :order sub-sort-val)        ;; Also sort by subscription-id\n                       #_(sort-by :path))]\n    subx))\n\n\n(rf/reg-sub\n  :subs/pre-epoch-state\n  :<- [:subs/current-epoch-sub-state]\n  (fn [sub-state]\n    (:pre-epoch-state sub-state)))\n\n(rf/reg-sub\n  :subs/reaction-state\n  :<- [:subs/current-epoch-sub-state]\n  (fn [sub-state]\n    (:reaction-state sub-state)))\n\n(rf/reg-sub\n  :subs/intra-epoch-subs\n  :<- [:subs/subscription-info]\n  :<- [:subs/pre-epoch-state]\n  prepare-pod-info)\n\n(rf/reg-sub\n  :subs/all-subs\n  :<- [:subs/subscription-info]\n  :<- [:subs/reaction-state]\n  prepare-pod-info)\n\n(rf/reg-sub\n  :subs/visible-subs\n  :<- [:subs/all-subs]\n  :<- [:subs/ignore-unchanged-l2-subs?]\n  (fn [[all-subs ignore-unchanged-l2?]]\n    (if ignore-unchanged-l2?\n      (remove metam/unchanged-l2-subscription? all-subs)\n      all-subs)))\n\n(rf/reg-sub\n  :subs/sub-counts\n  :<- [:subs/visible-subs]\n  (fn [subs _]\n    (->> subs\n         (mapcat :order)\n         (frequencies))))\n\n(rf/reg-sub\n  :subs/created-count\n  :<- [:subs/sub-counts]\n  (fn [counts]\n    (get counts :sub/create 0)))\n\n(rf/reg-sub\n  :subs/re-run-count\n  :<- [:subs/sub-counts]\n  (fn [counts]\n    (get counts :sub/run 0)))\n\n(rf/reg-sub\n  :subs/destroyed-count\n  :<- [:subs/sub-counts]\n  (fn [counts]\n    (get counts :sub/dispose 0)))\n\n(rf/reg-sub\n  :subs/not-run-count\n  :<- [:subs/sub-counts]\n  (fn [counts]\n    (get counts :sub/not-run 0)))\n\n(rf/reg-sub\n  :subs/unchanged-l2-subs-count\n  :<- [:subs/all-subs]\n  (fn [subs]\n    (count (filter metam/unchanged-l2-subscription? subs))))\n\n(rf/reg-sub\n  :subs/ignore-unchanged-l2-subs?\n  :<- [:subs/root]\n  (fn [subs _]\n    (:ignore-unchanged-subs? subs true)))\n\n(rf/reg-sub\n  :subs/sub-expansions\n  :<- [:subs/root]\n  (fn [subs _]\n    (:expansions subs)))\n\n\n;;\n\n(rf/reg-sub\n  :code/root\n  (fn [db _]\n    (:code db)))\n\n(rf/reg-sub\n  :code/current-code\n  :<- [:traces/current-event-traces]\n  (fn [traces _]\n    (keep-indexed (fn [i trace]\n                    (when-some [code (get-in trace [:tags :code])]\n                      {:id    i\n                       :title (pr-str (:op-type trace))\n                       :code  (->> code (map-indexed (fn [i code] (assoc code :id i))) vec) ;; Add index\n                       :form  (get-in trace [:tags :form])}))\n                  traces)))\n\n(rf/reg-sub\n  :code/current-form\n  :<- [:code/current-code]\n  (fn [code _]\n    (:form (first code))))\n\n(rf/reg-sub\n  :code/current-zprint-form\n  :<- [:code/current-form]\n  (fn [form _]\n    (zp/zprint-str form)))\n\n(rf/reg-sub\n  :code/code-open?\n  :<- [:code/root]\n  (fn [code _]\n    (:code-open? code)))\n\n(rf/reg-sub\n  :code/highlighted-form\n  :<- [:code/root]\n  (fn [code _]\n    (:highlighted-form code)))\n\n(rf/reg-sub\n  :code/scroll-pos\n  :<- [:code/root]\n  (fn [code _]\n    (:scroll-pos code)))\n"]}