{"version":3,"file":"rewrite_clj.node.seq.js","sources":["rewrite_clj/node/seq.cljs"],"mappings":";;;AAKA,gCAAA,hCAAMY,wEAAUX;AAAhB,AAAmB,QAAA,mDAAA,HAASA;;AAC5B,iCAAA,jCAAMmB,0EAAWnB;AAAjB,AAAoB,QAAA,mDAAA,HAASA;;AAC7B,gCAAA,hCAAMD,wEAAUC;AAAhB,AAAmB,QAAA,oDAAA,HAAUA;;AAC7B,gCAAA,hCAAMqB,wEAAUrB;AAAhB,AAAmB,QAAA,mDAAA,HAASA;;AAI5B,AAAA,AAAA,AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,AAAA,AAAA,AAAA,kDAAA,lDAAWiG;;AAAX,AAAA,YAAA,RA0BaxF;AACT,OAACD,kCAAYC,zCA3BjB;;;AAAA,AAAA,AAAA,2EAAA,WAAAiB,oBAAAC,1GAAWsE;;AAAX,AAAA,IAAAvE,0BAAA;AAAA,AAAA,OAAAE,gDAAAF,wBAAAC,iBAAA;;;AAAA,AAAA,AAAA,2EAAA,WAAAE,oBAAAC,OAAAC,jHAAWkE;;AAAX,AAAA,IAAApE,0BAAA;AAAA,AAAA,IAAAf,WAAAgB;8DA2uB0C,AAAAhB,1DA3uB1CA,eAAA,EAAA,CAAAA,oBAAAkB,iCAAA;AAAA,AAAA,QAAAlB;KAAA;AAAAmB;;;KAAA;AAAA5B;;;KAAA;AAAAC;;;KAAA;AAAAO;;;KAAA;AAAAV;;;;AAAA,OAAA+B,4CAAAC,gBAAAL,OAAAC;;;;;AAAA,AAAA,AAAA,uFAAA,WAAAK,oBAAAC,sBAAAC,5IAAW2D;;AAAX,AAAA,IAAA7D,0BAAA;AAAA,AAAA,IAAAG,yBAAA;kBAAAC;AAAA,AAAA,OAAAC,+BAAAJ,sBAAAK,oBAAA,GAAA,IAAA,GAAAJ,oBAAAE;;;AAAA,AAAA,OAAAC,+BAAAJ,sBAAAE,uBAAA,iCAAA,KAAA,IAAAD,oBAAA,AAAAK,+CAAA,mFAAA,KAAAC,2BAAA,KAAA,EAAA,IAAA,AAAAA,sCAAA,CAAA,oDAAAX,YAAA,OAAA,KAAAW,2BAAA,KAAA,EAAA,IAAA,AAAAA,sCAAA,CAAA,2DAAAvC,gBAAA,OAAA,KAAAuC,2BAAA,KAAA,EAAA,IAAA,AAAAA,sCAAA,CAAA,mEAAAtC,oBAAA,OAAA,KAAAsC,2BAAA,KAAA,EAAA,IAAA,AAAAA,sCAAA,CAAA,yDAAA/B,eAAA,OAAA,KAAA+B,2BAAA,KAAA,EAAA,IAAA,AAAAA,sCAAA,CAAA,6DAAAzC,iBAAA,eAAAgC;;;AAAA,AAAA,AAAA,+EAAA,WAAAU,1FAAWoD;;AAAX,AAAA,IAAApD,eAAA;AAAA,AAAA,YAAAC,qBAAA,IAAAD,aAAA,EAAA,mFAAA,oDAAA,2DAAA,mEAAA,yDAAA,qEAAA,kBAAAV,iBAAA,AAAAY,oBAAAZ,iBAAA,AAAAa;;;AAAA,AAAA,AAAA,uEAAA,WAAAC,lFAAWgD;;AAAX,AAAA,IAAAhD,0BAAA;AAAA,AAAAC;;;AAAA,AAAA,AAAA,6EAAA,WAAAC,xFAAW8C;;AAAX,AAAA,IAAA9C,0BAAA;AAAA,AAAA,yCAAAlB,WAAA5B,eAAAC,mBAAAO,cAAAV,gBAAA+C,cAAAf,gBAAAiB,tIAAW6C;;;AAAX,AAAA,AAAA,2EAAA,WAAA5C,tFAAW4C;;AAAX,AAAA,IAAA5C,0BAAA;AAAA,AAAA,QAAA,IAAA,AAAAC,gBAAAnB;;;AAAA,AAAA,AAAA,uEAAA,WAAAoB,lFAAW0C;;AAAX,AAAA,IAAA1C,0BAAA;AAAA,AAAA,IAAAC,kBAAAJ;AAAA,AAAA,GAAA,EAAA,CAAAI,mBAAA;AAAAA;;AAAA,IAAAA,sBAAA,iBAAAC,eAAA;kBAAAC;AAAA,AAAA,QAAA,YAAA,AAAAC,8BAAAD;;;AAAA,AAAA,OAAAD,aAAAF;;AAAA,AAAA,AAAAH,gBAAAI;;AAAAA;;;;AAAA,AAAA,AAAA,yEAAA,WAAAI,UAAAC,9FAAWoC;;AAAX,AAAA,IAAArC,gBAAA;AAAA,AAAA,SAAA,EAAA,CAAAC,cAAA,YAAA,CAAA,AAAAD,8BAAA,AAAAC,6BAAA,AAAAC,6CAAA,AAAAF,kBAAA,AAAAC,qBAAA,AAAAC,6CAAA,AAAAF,sBAAA,AAAAC,yBAAA,AAAAC,6CAAA,AAAAF,0BAAA,AAAAC,6BAAA,AAAAC,6CAAA,AAAAF,qBAAA,AAAAC,wBAAA,AAAAC,6CAAA,AAAAF,uBAAA,AAAAC,0BAAA,AAAAC,6CAAA,AAAAF,uBAAA,AAAAC;;;AAAA,AAAA,AAAA,0EAAAE,1EAAWkC;;AAAX,AAAA,AAAA,qFAAA,rFAAWA,gGAMHxF;;AANR,AAAA,gBAAA,ZAMQA;AANR,AAOIwB;;;kHACgB7B,lHARpB,AAAA,AAAA,uGAAA,vGAAW6F;;IAQS7F,JARpB,AAAA,YAAA;AAAA,AAAA;;;kGASUK,lGATV,AAAA,AAAA,uFAAA,vFAAWwF;;IASDxF,JATV,AAAA,gBAAA;AAUI,IAAAO,WAAQ,AAACC,kCAAYd,jDAVzB;AAUI,AAAA,kGAAAa,oCAAAA,9HAACH,8CAAAA,wDAAAA;;;AAVL,AAAA,AAAA,wFAAA,xFAAWoF,mGAWA7F;;AAXX,AAAA,YAAA,RAWWA;AACP,QAAGE,qBAAY,AAACC,uCAAiBJ,pEAZrC;;;mGAaWM,nGAbX,AAAA,AAAA,wFAAA,xFAAWwF;;IAaAxF,JAbX,AAAA,gBAAA;AAAA,AAcI,IAAAgG,WAAK,AAACC,0CAAoBvG;QACrBE,+CAAAA,yDAAAA,hHADL,AAAA,oGAAAoG,qCAAAA;;;AAdJ,AAAA,AAAA,wEAAA,WAAAzC,oBAAAC,vGAAWgC;;AAAX,AAAA,IAAAjC,0BAAA;AAAA,AAAA,GAAA,AAAAE,0BAAA,iFAAA,kEAAA,8DAAA,gEAAA,wEAAA,wEAAAD;AAAA,OAAAE,+CAAA,AAAAC,qBAAA,AAAAC,6CAAA,mCAAAL,yBAAAd,eAAAe;;AAAA,yCAAAhC,WAAA5B,eAAAC,mBAAAO,cAAAV,gBAAA+C,cAAA,AAAAoB,oBAAA,AAAAH,+CAAAhC,gBAAA8B,mBAAA,5NAAWgC;;;;AAAX,AAAA,AAAA,+EAAAlC,/EAAWkC;;AAAX,AAAA,AAAA,mGAAA,nGAAWA,8GAkBA7F;;AAlBX,AAAA,YAAA,RAkBWA;AAlBX,AAAA;;;0GAoBaA,1GApBb,AAAA,AAAA,+FAAA,/FAAW6F;;IAoBE7F,JApBb,AAAA,YAAA;AAqBID,AArBJ;;;kHAsBqBM,MAAKgB,xHAtB1B,AAAA,AAAA,uGAAA,vGAAWwE;;IAsBUxF,JAtBrB,AAAA,gBAAA;AAAA,AAuBI,+DAAA,xDAAC6E,8CAAM7E,uEAAegB;;;AAvB1B,AAAA,AAAA,+EAAA,WAAA8C,oBAAAC,iBAAA3B,/HAAWoD;;AAAX,AAAA,IAAA1B,0BAAA;AAAA,AAAA,IAAAE,cAAAC;IAAAC,cAAAH;AAAA,AAAA,oBAAA,iBAAAI,WAAA;IAAAC,WAAAF;AAAA,AAAA,QAAAF,4CAAAA,0CAAAG,SAAAC,YAAAJ,sBAAAG,SAAAC;;AAAA,yCAAAhC,SAAAxC,eAAAC,mBAAAO,cAAAV,gBAAA+C,cAAAf,gBAAA,pIAAW8D;;AAAX,oBAAA,iBAAAnB,WAAA;IAAAC,WAAAJ;AAAA,AAAA,QAAAF,4CAAAA,0CAAAK,SAAAC,YAAAN,sBAAAK,SAAAC;;AAAA,yCAAA9C,WAAAY,SAAAvC,mBAAAO,cAAAV,gBAAA+C,cAAAf,gBAAA,hIAAW8D;;AAAX,oBAAA,iBAAAjB,WAAA;IAAAC,WAAAN;AAAA,AAAA,QAAAF,4CAAAA,0CAAAO,SAAAC,YAAAR,sBAAAO,SAAAC;;AAAA,yCAAAhD,WAAA5B,eAAAwC,SAAAhC,cAAAV,gBAAA+C,cAAAf,gBAAA,5HAAW8D;;AAAX,oBAAA,iBAAAf,WAAA;IAAAC,WAAAR;AAAA,AAAA,QAAAF,4CAAAA,0CAAAS,SAAAC,YAAAV,sBAAAS,SAAAC;;AAAA,yCAAAlD,WAAA5B,eAAAC,mBAAAuC,SAAA1C,gBAAA+C,cAAAf,gBAAA,jIAAW8D;;AAAX,oBAAA,iBAAAb,WAAA;IAAAC,WAAAV;AAAA,AAAA,QAAAF,4CAAAA,0CAAAW,SAAAC,YAAAZ,sBAAAW,SAAAC;;AAAA,yCAAApD,WAAA5B,eAAAC,mBAAAO,cAAAgC,SAAAK,cAAAf,gBAAA,/HAAW8D;;AAAX,yCAAAhE,WAAA5B,eAAAC,mBAAAO,cAAAV,gBAAA+C,cAAA,AAAAoC,8CAAAnD,gBAAAqC,iBAAA3B,UAAA,/MAAWoD;;;;;;;;AAAX,AAAA,AAAA,yEAAA,WAAAV,pFAAWU;;AAAX,AAAA,IAAAV,0BAAA;AAAA,AAAA,OAAAC,cAAA,AAAA7C,+CAAA,mFAAA,KAAAC,2BAAA,KAAA,EAAA,IAAA,AAAAA,sCAAA,CAAA,oDAAAX,YAAA,OAAA,KAAAW,2BAAA,KAAA,EAAA,IAAA,AAAAA,sCAAA,CAAA,2DAAAvC,gBAAA,OAAA,KAAAuC,2BAAA,KAAA,EAAA,IAAA,AAAAA,sCAAA,CAAA,mEAAAtC,oBAAA,OAAA,KAAAsC,2BAAA,KAAA,EAAA,IAAA,AAAAA,sCAAA,CAAA,yDAAA/B,eAAA,OAAA,KAAA+B,2BAAA,KAAA,EAAA,IAAA,AAAAA,sCAAA,CAAA,6DAAAzC,iBAAA,eAAAgC;;;AAAA,AAAA,AAAA,gFAAA,WAAAsD,oBAAA5C,/GAAWoD;;AAAX,AAAA,IAAAR,0BAAA;AAAA,AAAA,yCAAAxD,WAAA5B,eAAAC,mBAAAO,cAAAV,gBAAA0C,SAAAV,gBAAAiB,jIAAW6C;;;AAAX,AAAA,AAAA,6EAAA,WAAAP,oBAAAC,5GAAWM;;AAAX,AAAA,IAAAP,0BAAA;AAAA,AAAA,GAAA,AAAAE,wBAAAD;AAAA,OAAAE,iBAAAH,wBAAA,AAAAI,6CAAAH,qBAAA,KAAA,AAAAG,6CAAAH,qBAAA;;AAAA,OAAAI,+CAAAC,gBAAAN,wBAAAC;;;;AAAA,AAAA,AAAAM,wCAAA;AAAA,AAAA,0FAAA,sDAAA,+DAAA,uEAAA,4DAAA;;;AAAA,AAAA,AAAAA,8CAAA;;AAAA,AAAA,AAAAA,mDAAA,WAAAC;AAAA,AAAA,YAAAC,eAAA,KAAA,+BAAA,KAAA,IAAA;;;AAAA,AAAA,AAAAF,sDAAA,WAAAC,mBAAAE;AAAA,AAAA,OAAAC,iBAAAD,qBAAA;;;AAAA;;;wGAGoBvF,pBAFAR,hDADpB,pCAAWJ,gFAASgC,YAEA3B,mBAEAH;iEADAU,pBAFAR,7CADpB,AAAA,YAAA4F,qEAAA,KAAA,KAAA,lDAAoBhE,YAEA3B,mBAEAH;;;AAJpB;;;uCAAA,+CAAAmG,tFAAWE;AAAX,AAAA,YAAAP,6BAAA,AAAA,kFAAAK,UAAA,AAAA,yFAAAA,UAAA,AAAA,iGAAAA,UAAA,AAAA,uFAAAA,UAAA,AAAA,2FAAAA,UAAA,KAAA,AAAAhC,oBAAA,AAAAiC,sDAAAD,SAAA,sGAAA,2DAAA,mEAAA,yDAAA,oEAAA;;;AAkCA,AAlCAL;;;iCAkCA,jCAAMvF,0EAEHP;AAFH,AAGE,yCAAA,mFAAA,IAAA,WAAAwG,pIAAC1G,sFAAgBkB;AAAjB,AAA8B,oEAAAwF,7DAACrF,8CAAMsF;GAAQzG;;AAE/C;;;mCAAA,nCAAMqB,8EAEHrB;AACD,yCAAA,uFAAA,zHAACF,2FAAmBU,kCAAWC,cAAIT,lJAHrC;;AAKA;;;wEAEGA,xCAFH,hCAAMY;AAGJ,yCAAA,gFAAA,lHAACd,oFAAgBF,kCAAWG,cAAIC,3IAHlC;;AAKA;;;gCAAA,hCAAMe,wEAEHf;AAFH,AAGE,yCAAA,iFAAA,IAAA,WAAAiB,lIAACnB,qFAAeoB;AAAhB,AAA4B,wEAAAD,jEAACE,8CAAMC;GAAYpB","names":["rewrite-clj.node.seq/wrap-set","s","rewrite-clj.node.seq/->SeqNode","cljs.core/set","children","_","wrap-fn","wrap-length","rewrite-clj.node.protocols/sum-lengths","rewrite-clj.node.protocols/string","this","rewrite-clj.node.seq/list-node","rewrite-clj.node.seq/wrap-vec","cljs.core/vec","seq-fn","G__28455","rewrite-clj.node.seq/set-node","G__28457","rewrite-clj.node.protocols/sexprs","rewrite-clj.node.seq/map-node","rewrite-clj.node.seq/wrap-list","p1__28499#","rewrite-clj.node.seq/wrap-map","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","rewrite-clj.node.seq/vector-node","children'","this__11972__auto__","k__11973__auto__","cljs.core._lookup.cljs$core$IFn$_invoke$arity$3","this__11974__auto__","k28451","else__11975__auto__","cljs.core/Keyword","tag","cljs.core.get.cljs$core$IFn$_invoke$arity$3","__extmap","this__11986__auto__","writer__11987__auto__","opts__11988__auto__","pr-pair__11989__auto__","keyval__11990__auto__","cljs.core/pr-sequential-writer","cljs.core/pr-writer","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core/PersistentVector","G__28450","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__11970__auto__","__meta","this__11967__auto__","__hash","this__11976__auto__","cljs.core/count","this__11968__auto__","h__4030__auto__","fexpr__28456","coll__11969__auto__","cljs.core/hash-unordered-coll","this28452","other28453","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/PROTOCOL_SENTINEL","this__11981__auto__","k__11982__auto__","cljs.core/contains?","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","cljs.core/-with-meta","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core/not-empty","this__11979__auto__","k__11980__auto__","pred__28459","cljs.core/keyword-identical?","expr__28460","G__28462","G__28463","G__28464","G__28465","G__28466","G__28467","G__28468","G__28469","G__28470","G__28471","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","this__11984__auto__","cljs.core/seq","this__11971__auto__","this__11977__auto__","entry__11978__auto__","cljs.core/vector?","cljs.core/-assoc","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","cljs.core/-conj","rewrite-clj.node.seq/SeqNode","this__4208__auto__","cljs.core/List","writer__4209__auto__","cljs.core/-write","G__28454","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic","rewrite-clj.node.seq/map->SeqNode","G__28458","rewrite-clj.node.protocols/concat-strings","p1__28497#","cljs.core/list"],"sourcesContent":["(ns rewrite-clj.node.seq\n  (:require [rewrite-clj.node.protocols :as node]))\n\n;; ## Node\n\n(defn wrap-vec [s] (str \"[\" s \"]\"))\n(defn wrap-list [s] (str \"(\" s \")\"))\n(defn wrap-set [s] (str \"#{\" s \"}\"))\n(defn wrap-map [s] (str \"{\" s \"}\"))\n\n\n\n(defrecord SeqNode [tag\n                    wrap-fn\n                    wrap-length\n                    seq-fn\n                    children]\n  node/Node\n  (tag [this]\n    tag)\n  (printable-only? [_] false)\n  (sexpr [this]\n    (seq-fn (node/sexprs children)))\n  (length [_]\n    (+ wrap-length (node/sum-lengths children)))\n  (string [this]\n    (->> (node/concat-strings children)\n         wrap-fn))\n\n  node/InnerNode\n  (inner? [_]\n    true)\n  (children [_]\n    children)\n  (replace-children [this children']\n    (assoc this :children children'))\n\n  Object\n  (toString [this]\n    (node/string this)))\n\n;; TODO\n;(node/make-printable! SeqNode)\n\n;; ## Constructors\n\n(defn list-node\n  \"Create a node representing an EDN list.\"\n  [children]\n  (->SeqNode :list wrap-list 2 #(apply list %) children))\n\n(defn vector-node\n  \"Create a node representing an EDN vector.\"\n  [children]\n  (->SeqNode :vector  wrap-vec 2 vec children))\n\n(defn set-node\n  \"Create a node representing an EDN set.\"\n  [children]\n  (->SeqNode :set  wrap-set 3 set children))\n\n(defn map-node\n  \"Create a node representing an EDN map.\"\n  [children]\n  (->SeqNode :map wrap-map 2 #(apply hash-map %) children))\n"]}