{"version":3,"file":"day8.re_frame_10x.events.js","sources":["day8/re_frame_10x/events.cljs"],"mappings":"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","names":["paths","new-matches","G__31517","mranderson047.re-frame.v0v10v2.re-frame.core/path","new-id","match-id","or__3922__auto__","p__31468","vec__31469","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","categories","_","new-categories","cljs.core.map.cljs$core$IFn$_invoke$arity$4","match","sub-match","t","day8.re-frame-10x.events/app-db-path-mw","day8.re-frame-10x.utils.utils/last-in-vec","cljs.core.get.cljs$core$IFn$_invoke$arity$2","epochs","cljs.core/assoc-in","db","unloading?","mranderson047.re_frame.v0v10v2.re_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$3","d","p__31355","vec__31356","width%","_scroll-pos","p__31412","vec__31413","debug?","cljs.core.disj.cljs$core$IFn$_invoke$arity$2","path","day8.re-frame-10x.metamorphic/elapsed-time","start-of-epoch","finish-run","mranderson047.re_frame.v0v10v2.re_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$2","day8.re-frame-10x.events/enable-tracing!","G__31422","G__31423","G__31424","goog.object/set","popup-window","G__31425","mranderson047.re-frame.v0v10v2.re-frame.core/dispatch","mranderson047.re_frame.v0v10v2.re_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$2","day8.re-frame-10x.events/filtered-view-trace-mw","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","filter-items","and__3911__auto__","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","filter-type","ctx","day8.re-frame-10x.events/mount","popup-document","cljs.core/count","p__31408","vec__31409","low-level","trace-type","capture?","trace-detail-expansions","e31354","cljs.tools.reader.edn.read_string.cljs$core$IFn$_invoke$arity$1","s","p__31551","map__31552","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","p__31418","vec__31419","follows-events?","first-id-to-retain","day8.re-frame-10x.events/first-match-id","cljs.core/first","retained-matches","mranderson047.re_frame.v0v10v2.re_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$3","all-traces","day8.re-frame-10x.utils.localstorage/save!","selected-tab","day8.re-frame-10x.events/read-string-maybe","cljs.core/contains?","events-to-ignore","event","parse-state","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","e","new-db","p__31528","vec__31529","p__31569","vec__31570","expansions","id","diff?","f","p1__31461#","cljs.core.update_in.cljs$core$IFn$_invoke$arity$3","showing?","cljs.core/not","x","day8.re-frame-10x.utils.utils/find-index-in-vec","match-array-index","current-id","match-ids","external-panel?","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","context","day8.re-frame-10x.metamorphic/parse-traces","filtered-traces","day8.re-frame-10x.events/disable-tracing!","num","clojure.set.union.cljs$core$IFn$_invoke$arity$2","m","epoch-traces","cljs.core.into.cljs$core$IFn$_invoke$arity$3","p__31584","vec__31585","form","new-form","p__31574","vec__31575","code-open?","open?-path","open?","cljs.core/reset!","re-frame.db/app-db","day8.re-frame-10x.events/low-level-trace-mw","js/Date.now","G__31578","re-frame.trace/remove-trace-cb","p__31579","vec__31580","app","p__31380","vec__31381","ignored-events","event-str","cljs.core.update.cljs$core$IFn$_invoke$arity$3","p__31442","vec__31443","using-trace?","path-str","day8.re-frame-10x.styles/inject-trace-styles","js/parseFloat","filter-input","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","day8.re-frame-10x.events/save-filter-items","G__31527","filtered-view-trace","G__31462","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","k","p__31450","vec__31451","p__31438","vec__31439","G__31554","G__31467","p__31456","vec__31457","filter-id","mranderson047.reagent.v0v8v0_alpha2.reagent.core.render.cljs$core$IFn$_invoke$arity$2","now-showing?","ks","keys","temp__5455__auto__","nextmap","G__31431","G__31432","G__31433","w","p__31367","map__31368","dofx-trace","path-id","p__31532","vec__31533","G__31583","cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2","p__31523","vec__31524","render-operation?","trace","G__31375","p1__31374#","day8.re-frame-10x.events/fixed-after","re-frame.interop/reagent-id","search-string","subscription-matches","timing","event-trace","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","day8.re-frame-10x.metamorphic/finish-run?","ns-str","cljs.core/last","cljs.core.get_in.cljs$core$IFn$_invoke$arity$3","day8.re-frame-10x.metamorphic/subscription-info","subscription-info","p__31564","vec__31565","day8.re-frame-10x.events/open-debugger-window","mranderson047.reagent.v0v8v0-alpha2.reagent.core/create-class","valid-path?","p__31489","vec__31490","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","G__31460","day8.re-frame-10x.metamorphic/matched-event","day8.re-frame-10x.events/ignored-event-mw","clojure.set/superset?","p1__31446#","cljs.core/some","G__31558","G__31417","p1__31416#","map__31493","component-path","G__31484","p1__31483#","new-paths","drop-re-frame","day8.re-frame-10x.metamorphic/low-level-re-frame-trace?","js/location.reload","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","show-epoch-traces?","p__31473","vec__31474","p1__31454#","p__31384","vec__31385","clojure.string/includes?","previous-matches","cljs.core/random-uuid","p__31495","vec__31496","G__31472","p1__31448#","day8.re-frame-10x.view.container/devtools-inner","old-event","day8.re-frame-10x.utils.localstorage/delete-all-keys!","map__31548","number-of-epochs-to-retain","js/parseInt","num-str","temp__5459__auto__","doc","js/document","retained-traces","p__31376","vec__31377","event-handler-trace","day8.re-frame-10x.metamorphic/event-handler?","p__31350","vec__31351","seq__31352","cljs.core/seq","first__31353","cljs.core/next","day8.re-frame-10x.events/dissoc-in","day8.re-frame-10x.events/log-trace?","new-traces","cljs.core/sequential?","subscription-match-state","day8.re-frame-10x.metamorphic/subscription-match-state","sub-state","p__31479","vec__31480","p__31544","vec__31545","p__31394","vec__31395","js/window.addEventListener","G__31437","mranderson047.re-frame.v0v10v2.re-frame.core/dispatch-sync","G__31522","top","left","newmap","all-matches","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","cljs.core/conj","cljs.core.remove.cljs$core$IFn$_invoke$arity$1","G__31449","p__31370","vec__31371","p__31513","vec__31514","p1__31447#","day8.re-frame-10x.metamorphic/initial-parse-state","re-frame.trace/reset-tracing!","G__31588","x__4006__auto__","y__4007__auto__","G__31478","p1__31477#","clojure.set.difference.cljs$core$IFn$_invoke$arity$2","day8.re-frame-10x.utils.utils/id-between-xf","temp__5461__auto__","p__31463","vec__31464","G__31573","cljs.core/rest","G__31593","new-sub-state","p__31363","vec__31364","show-panel?","G__31344","G__31345","G__31346","G__31347","mranderson047.re-frame.v0v10v2.re-frame.core/->interceptor","G__31403","p1__31402#","p__31507","vec__31508","previous-traces","map__31429","ext_height","ext_width","G__31568","js/window.open","p__31503","vec__31504","p__31485","vec__31486","p__31559","vec__31560","ignore?","cljs.core.comp.cljs$core$IFn$_invoke$arity$1","G__31455","day8.re-frame-10x.metamorphic/initial-sub-state","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core/set","cljs.core/vals","js/isNaN","cljs.core/pos-int?","day8.re-frame-10x.metamorphic/event-run?","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic","p1__31543#","cljs.core.drop_while.cljs$core$IFn$_invoke$arity$1","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","clojure.string/blank?","drop-reagent","day8.re-frame-10x.metamorphic/low-level-reagent-trace?","G__31389","p1__31388#","p__31589","vec__31590","p__31404","vec__31405","p__31499","vec__31500","p__31518","vec__31519","day8.re-frame-10x.metamorphic/event-dofx?","G__31550","p__31555","map__31556","G__31563","cljs.core.juxt.cljs$core$IFn$_invoke$arity$2","cljs.core/identity","cljs.core.map.cljs$core$IFn$_invoke$arity$1","clojure.string/lower-case","p__31359","vec__31360","p1__31348#","re-frame.trace/register-trace-cb","G__31349","p__31398","vec__31399","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core/take-last","p__31390","vec__31391"],"sourcesContent":["(ns day8.re-frame-10x.events\n  (:require [mranderson047.re-frame.v0v10v2.re-frame.core :as rf]\n            [mranderson047.reagent.v0v8v0-alpha2.reagent.core :as r]\n            [cljs.tools.reader.edn]\n            [day8.re-frame-10x.utils.utils :as utils :refer [spy]]\n            [day8.re-frame-10x.utils.localstorage :as localstorage]\n            [clojure.string :as str]\n            [goog.object]\n            [re-frame.db]\n            [re-frame.interop]\n            [day8.re-frame-10x.view.container :as container]\n            [day8.re-frame-10x.styles :as styles]\n            [clojure.set :as set]\n            [day8.re-frame-10x.metamorphic :as metam]\n            [re-frame.trace]))\n\n(defn fixed-after\n  ;; Waiting on https://github.com/Day8/re-frame/issues/447\n  [f]\n  (rf/->interceptor\n    :id :after\n    :after (fn after-after\n             [context]\n             (let [db    (if (contains? (:effects context) :db)\n                           (get-in context [:effects :db])\n                           (get-in context [:coeffects :db]))\n                   event (get-in context [:coeffects :event])]\n               (f db event)                                 ;; call f for side effects\n               context))))                                  ;; context is unchanged\n\n(defn log-trace? [trace]\n  (let [render-operation? (or (= (:op-type trace) :render)\n                              (= (:op-type trace) :componentWillUnmount))\n        component-path    (get-in trace [:tags :component-path] \"\")]\n    (if-not render-operation?\n      true\n      (not (str/includes? component-path \"devtools outer\")))))\n\n(defn disable-tracing! []\n  (re-frame.trace/remove-trace-cb ::cb))\n\n(defn enable-tracing! []\n  (re-frame.trace/register-trace-cb ::cb #(rf/dispatch [:epochs/receive-new-traces %])))\n\n(defn dissoc-in\n  \"Dissociates an entry from a nested associative structure returning a new\n  nested structure. keys is a sequence of keys. Any empty maps that result\n  will not be present in the new structure.\"\n  [m [k & ks :as keys]]\n  (if ks\n    (if-let [nextmap (clojure.core/get m k)]\n      (let [newmap (dissoc-in nextmap ks)]\n        (if (seq newmap)\n          (assoc m k newmap)\n          (dissoc m k)))\n      m)\n    (dissoc m k)))\n\n(defn read-string-maybe [s]\n  (try (cljs.tools.reader.edn/read-string s)\n       (catch :default e\n         nil)))\n\n(rf/reg-event-db\n  :settings/panel-width%\n  (fn [db [_ width%]]\n    (localstorage/save! \"panel-width-ratio\" (max width% 0.05))\n    (assoc-in db [:settings :panel-width%] (max width% 0.05))))\n\n(rf/reg-event-db\n  :settings/selected-tab\n  (fn [db [_ selected-tab]]\n    (localstorage/save! \"selected-tab\" selected-tab)\n    (assoc-in db [:settings :selected-tab] selected-tab)))\n\n(rf/reg-event-db\n  :settings/toggle-settings\n  (fn [db _]\n    (update-in db [:settings :showing-settings?] not)))\n\n(rf/reg-event-db\n  :settings/show-panel?\n  (fn [db [_ show-panel?]]\n    (localstorage/save! \"show-panel\" show-panel?)\n    (assoc-in db [:settings :show-panel?] show-panel?)))\n\n(rf/reg-event-db\n  :settings/factory-reset\n  (fn [db _]\n    (localstorage/delete-all-keys!)\n    (js/location.reload)\n    db))\n\n(rf/reg-event-db\n  :settings/user-toggle-panel\n  (fn [db _]\n    (let [now-showing?    (not (get-in db [:settings :show-panel?]))\n          external-panel? (get-in db [:settings :external-window?])\n          using-trace?    (or external-panel? now-showing?)]\n      (if now-showing?\n        (enable-tracing!)\n        (when-not external-panel?\n          (disable-tracing!)))\n      (localstorage/save! \"using-trace?\" using-trace?)\n      (localstorage/save! \"show-panel\" now-showing?)\n      (-> db\n          (assoc-in [:settings :using-trace?] using-trace?)\n          (assoc-in [:settings :show-panel?] now-showing?)))))\n\n(rf/reg-event-db\n  :settings/pause\n  (fn [db _]\n    (assoc-in db [:settings :paused?] true)))\n\n(rf/reg-event-fx\n  :settings/play\n  (fn [{db :db} _]\n    {:db       (-> db\n                   (assoc-in [:settings :paused?] false)\n                   (assoc-in [:epochs :current-epoch-index] nil)\n                   (assoc-in [:epochs :current-epoch-id] nil))\n     :dispatch [:snapshot/reset-current-epoch-app-db nil]}))\n\n(rf/reg-event-db\n  :settings/set-number-of-retained-epochs\n  (fn [db [_ num-str]]\n    ;; TODO: this is not perfect, there is an issue in re-com\n    ;; where it won't update its model if it never receives another\n    ;; changes after it's on-change is fired.\n    ;; TODO: you could reset the stored epochs on change here\n    ;; once the way they are processed is refactored.\n    (let [num (js/parseInt num-str)\n          num (if (and (not (js/isNaN num)) (pos-int? num))\n                num\n                5)]\n      (localstorage/save! \"retained-epochs\" num)\n      (assoc-in db [:settings :number-of-epochs] num))))\n\n(def ignored-event-mw\n  [(rf/path [:settings :ignored-events]) (fixed-after #(localstorage/save! \"ignored-events\" %))])\n\n(rf/reg-event-db\n  :settings/add-ignored-event\n  ignored-event-mw\n  (fn [ignored-events _]\n    (let [id (random-uuid)]\n      (assoc ignored-events id {:id id :event-str \"\" :event-id nil :sort (js/Date.now)}))))\n\n(rf/reg-event-db\n  :settings/remove-ignored-event\n  ignored-event-mw\n  (fn [ignored-events [_ id]]\n    (dissoc ignored-events id)))\n\n(rf/reg-event-db\n  :settings/update-ignored-event\n  ignored-event-mw\n  (fn [ignored-events [_ id event-str]]\n    ;; TODO: this won't inform users if they type bad strings in.\n    (let [event (read-string-maybe event-str)]\n      (-> ignored-events\n          (assoc-in [id :event-str] event-str)\n          (update-in [id :event-id] (fn [old-event] (if event event old-event)))))))\n\n(rf/reg-event-db\n  :settings/set-ignored-events\n  ignored-event-mw\n  (fn [_ [_ ignored-events]]\n    ignored-events))\n\n(def filtered-view-trace-mw\n  [(rf/path [:settings :filtered-view-trace]) (fixed-after #(localstorage/save! \"filtered-view-trace\" %))])\n\n(rf/reg-event-db\n  :settings/add-filtered-view-trace\n  filtered-view-trace-mw\n  (fn [filtered-view-trace _]\n    (let [id (random-uuid)]\n      (assoc filtered-view-trace id {:id id :ns-str \"\" :ns nil :sort (js/Date.now)}))))\n\n(rf/reg-event-db\n  :settings/remove-filtered-view-trace\n  filtered-view-trace-mw\n  (fn [filtered-view-trace [_ id]]\n    (dissoc filtered-view-trace id)))\n\n(rf/reg-event-db\n  :settings/update-filtered-view-trace\n  filtered-view-trace-mw\n  (fn [filtered-view-trace [_ id ns-str]]\n    ;; TODO: this won't inform users if they type bad strings in.\n    (let [event (read-string-maybe ns-str)]\n      (-> filtered-view-trace\n          (assoc-in [id :ns-str] ns-str)\n          (update-in [id :ns] (fn [old-event] (if event event old-event)))))))\n\n(rf/reg-event-db\n  :settings/set-filtered-view-trace\n  filtered-view-trace-mw\n  (fn [_ [_ ignored-events]]\n    ignored-events))\n\n(def low-level-trace-mw [(rf/path [:settings :low-level-trace]) (fixed-after #(localstorage/save! \"low-level-trace\" %))])\n\n(rf/reg-event-db\n  :settings/set-low-level-trace\n  low-level-trace-mw\n  (fn [_ [_ low-level]]\n    low-level))\n\n(rf/reg-event-db\n  :settings/low-level-trace\n  low-level-trace-mw\n  (fn [low-level [_ trace-type capture?]]\n    (assoc low-level trace-type capture?)))\n\n(rf/reg-event-db\n  :settings/debug?\n  (fn [db [_ debug?]]\n    (assoc-in db [:settings :debug?] debug?)))\n\n(rf/reg-event-db\n  :settings/app-db-follows-events?\n  [(rf/path [:settings :app-db-follows-events?]) (fixed-after #(localstorage/save! \"app-db-follows-events?\" %))]\n  (fn [db [_ follows-events?]]\n    follows-events?))\n\n;; Global\n\n(defn mount [popup-window popup-document]\n  (let [app (.getElementById popup-document \"--re-frame-10x--\")\n        doc js/document]\n    (styles/inject-trace-styles popup-document)\n    (goog.object/set popup-window \"onunload\" #(rf/dispatch [:global/external-closed]))\n    (r/render\n      [(r/create-class\n         {:display-name   \"devtools outer external\"\n          :reagent-render (fn []\n                            [container/devtools-inner {:panel-type :popup}])})]\n      app)))\n\n(defn open-debugger-window\n  \"Copied from re-frisk.devtool/open-debugger-window\"\n  []\n  (let [{:keys [ext_height ext_width]} (:prefs {})\n        w (js/window.open \"\" \"Debugger\" (str \"width=\" (or ext_width 800) \",height=\" (or ext_height 800)\n                                             \",resizable=yes,scrollbars=yes,status=no,directories=no,toolbar=no,menubar=no\"))\n\n        d (.-document w)]\n    (.open d)\n    (.write d \"<head></head><body style=\\\"margin: 0px;\\\"><div id=\\\"--re-frame-10x--\\\" class=\\\"external-window\\\"></div></body>\")\n    (goog.object/set w \"onload\" #(mount w d))\n    (.close d)))\n\n(rf/reg-event-fx\n  :global/launch-external\n  (fn [ctx _]\n    (open-debugger-window)\n    (localstorage/save! \"external-window?\" true)\n    {:db             (assoc-in (:db ctx) [:settings :external-window?] true)\n     ;; TODO: capture the intent that the user is still interacting with devtools, to persist between reloads.\n     :dispatch-later [{:ms 200 :dispatch [:settings/show-panel? false]}]}))\n\n(rf/reg-event-fx\n  :global/external-closed\n  (fn [ctx _]\n    (localstorage/save! \"external-window?\" false)\n    {:db             (assoc-in (:db ctx) [:settings :external-window?] false)\n     :dispatch-later [{:ms 400 :dispatch [:settings/show-panel? true]}]}))\n\n(rf/reg-event-fx\n  :global/enable-tracing\n  (fn [ctx _]\n    (enable-tracing!)\n    nil))\n\n(rf/reg-event-fx\n  :global/disable-tracing\n  (fn [ctx _]\n    (disable-tracing!)\n    nil))\n\n(rf/reg-event-fx\n  :global/add-unload-hook\n  (fn [_ _]\n    (js/window.addEventListener \"beforeunload\" #(rf/dispatch-sync [:global/unloading? true]))\n    nil))\n\n(rf/reg-event-db\n  :global/unloading?\n  (fn [db [_ unloading?]]\n    (assoc-in db [:global :unloading?] unloading?)))\n\n;; Traces\n\n(defn save-filter-items [filter-items]\n  (localstorage/save! \"filter-items\" filter-items))\n\n(rf/reg-event-db\n  :traces/filter-items\n  (fn [db [_ filter-items]]\n    (save-filter-items filter-items)\n    (assoc-in db [:traces :filter-items] filter-items)))\n\n(rf/reg-event-db\n  :traces/add-filter\n  [(rf/path [:traces :filter-items])]\n  (fn [filter-items [_ filter-input filter-type]]\n    (let [new-db (when-not (some #(= filter-input (:query %)) filter-items) ;; prevent duplicate filter strings\n                   ;; if existing, remove prior filter for :slower-than\n                   ;; TODO: rework how time filters are used.\n                   (let [filter-items (if (and (= :slower-than filter-type)\n                                               (some #(= filter-type (:filter-type %)) filter-items))\n                                        (remove #(= :slower-than (:filter-type %)) filter-items)\n                                        filter-items)]\n                     ;; add new filter\n                     (conj filter-items {:id          (random-uuid)\n                                         :query       (if (= filter-type :contains)\n                                                        (str/lower-case filter-input)\n                                                        (js/parseFloat filter-input))\n                                         :filter-type filter-type})))]\n      (save-filter-items new-db)\n      new-db)))\n\n(rf/reg-event-db\n  :traces/remove-filter\n  [(rf/path [:traces :filter-items])]\n  (fn [filter-items [_ filter-id]]\n    (let [new-db (remove #(= (:id %) filter-id) filter-items)]\n      (save-filter-items new-db)\n      new-db)))\n\n(rf/reg-event-db\n  :traces/reset-filter-items\n  (fn [db _]\n    (let [new-db (dissoc-in db [:traces :filter-items])]\n      (save-filter-items (get-in new-db [:traces :filter-items]))\n      new-db)))\n\n(rf/reg-event-db\n  :traces/toggle-all-expansions\n  [(rf/path [:traces :expansions])]\n  (fn [trace-detail-expansions _]\n    (-> trace-detail-expansions\n        (assoc :overrides {})\n        (update :show-all? not))))\n\n(rf/reg-event-db\n  :traces/toggle-trace\n  [(rf/path [:traces :expansions])]\n  (fn [expansions [_ id]]\n    (let [showing? (get-in expansions [:overrides id] (:show-all? expansions))]\n      (update-in expansions [:overrides id] #(if showing? false (not %))))))\n\n(rf/reg-event-db\n  :traces/toggle-categories\n  [(rf/path [:traces :categories])]\n  (fn [categories [_ new-categories]]\n    (let [new-categories (if (set/superset? categories new-categories)\n                           (set/difference categories new-categories)\n                           (set/union categories new-categories))]\n      (localstorage/save! \"categories\" new-categories)\n      new-categories)))\n\n(rf/reg-event-db\n  :traces/set-categories\n  [(rf/path [:traces :categories])]\n  (fn [categories [_ new-categories]]\n    new-categories))\n\n\n(rf/reg-event-db\n  :trace-panel/update-show-epoch-traces?\n  [(rf/path [:trace-panel :show-epoch-traces?]) (fixed-after #(localstorage/save! \"show-epoch-traces?\" %))]\n  (fn [_ [k show-epoch-traces?]]\n    show-epoch-traces?))\n\n;; App DB\n\n(def app-db-path-mw\n  [(rf/path [:app-db :paths]) (fixed-after #(localstorage/save! \"app-db-paths\" %))])\n\n(rf/reg-event-db\n  :app-db/create-path\n  app-db-path-mw\n  (fn [paths _]\n\n    (assoc paths (js/Date.now) {:diff? false :open? true :path nil :path-str \"\" :valid-path? true})))\n\n\n\n;; The core idea with :app-db/update-path and :app-db/update-path-blur\n;; is that we need to separate the users text input (`path-str`) with the\n;; parsing of that string (`path`). We let the user type any string that\n;; they like, and check it for validity on each change. If it is valid\n;; then we update `path` and mark the pod as valid. If it isn't valid then\n;; we don't update `path` and mark the pod as invalid.\n;;\n;; On blur of the input, we reset path-str to the last valid path, if\n;; the pod isn't currently valid.\n\n(rf/reg-event-db\n  :app-db/update-path\n  app-db-path-mw\n  (fn [paths [_ path-id path-str]]\n    (let [path  (read-string-maybe path-str)\n          paths (assoc-in paths [path-id :path-str] path-str)]\n      (if (or (and (some? path)\n                   (sequential? path))\n              (str/blank? path-str))\n        (-> paths\n            (assoc-in [path-id :path] path)\n            (assoc-in [path-id :valid-path?] true))\n        (assoc-in paths [path-id :valid-path?] false)))))\n\n(rf/reg-event-db\n  :app-db/update-path-blur\n  app-db-path-mw\n  (fn [paths [_ path-id]]\n    (let [{:keys [valid-path? path]} (get paths path-id)]\n      (if valid-path?\n        paths\n        (-> (assoc-in paths [path-id :path-str] (pr-str path))\n            (assoc-in [path-id :valid-path?] true))))))\n\n(rf/reg-event-db\n  :app-db/set-path-visibility\n  app-db-path-mw\n  (fn [paths [_ path-id open?]]\n    (assoc-in paths [path-id :open?] open?)))\n\n(rf/reg-event-db\n  :app-db/set-diff-visibility\n  app-db-path-mw\n  (fn [paths [_ path-id diff?]]\n    (let [open? (if diff?\n                  true\n                  (get-in paths [path-id :open?]))]\n      (-> paths\n          (assoc-in [path-id :diff?] diff?)\n          ;; If we turn on diffing then we want to also expand the path\n          (assoc-in [path-id :open?] open?)))))\n\n(rf/reg-event-db\n  :app-db/remove-path\n  app-db-path-mw\n  (fn [paths [_ path-id]]\n    (dissoc paths path-id)))\n\n(rf/reg-event-db\n  :app-db/paths\n  app-db-path-mw\n  (fn [db [_ paths]]\n    paths))\n\n#_(rf/reg-event-db\n    :app-db/remove-path\n    (fn [db [_ path]]\n      (let [new-db (update-in db [:app-db :paths] #(remove (fn [p] (= p path)) %))]\n        (localstorage/save! \"app-db-paths\" (get-in new-db [:app-db :paths]))\n        ;; TODO: remove from json-ml expansions too.\n        new-db)))\n\n#_(rf/reg-event-db\n    :app-db/add-path\n    (fn [db _]\n      (let [search-string (get-in db [:app-db :search-string])\n            path          (try\n                            (when-not (str/blank? search-string)\n                              (cljs.reader/read-string (str \"[\" search-string \"]\")))\n                            (catch :default e\n                              nil))]\n        (if (some? path)\n          (do (localstorage/save! \"app-db-paths\" (cons path (get-in db [:app-db :paths])))\n              (rf/dispatch [:app-db/toggle-expansion [path]])\n              (-> db\n                  (update-in [:app-db :paths] #(cons path %))\n                  (assoc-in [:app-db :search-string] \"\")))\n          db))))\n\n(rf/reg-event-db\n  :app-db/search-string\n  (fn [db [_ search-string]]\n    (assoc-in db [:app-db :search-string] search-string)))\n\n(rf/reg-event-db\n  :app-db/set-json-ml-paths\n  [(rf/path [:app-db :json-ml-expansions])]\n  (fn [db [_ paths]]\n    (localstorage/save! \"app-db-json-ml-expansions\" paths)\n    paths))\n\n(rf/reg-event-db\n  :app-db/toggle-expansion\n  [(rf/path [:app-db :json-ml-expansions])]\n  (fn [paths [_ path]]\n    (let [new-paths (if (contains? paths path)\n                      (disj paths path)\n                      (conj paths path))]\n      (localstorage/save! \"app-db-json-ml-expansions\" new-paths)\n      new-paths)))\n\n(rf/reg-event-db\n  :app-db/reagent-id\n  [(rf/path [:app-db :reagent-id])]\n  (fn [paths _]\n    (re-frame.interop/reagent-id re-frame.db/app-db)))\n\n(rf/reg-event-db\n  :snapshot/load-snapshot\n  (fn [db [_ new-db]]\n    (reset! re-frame.db/app-db new-db)\n    db))\n\n(rf/reg-event-db\n  :snapshot/reset-current-epoch-app-db\n  (fn [db [_ new-id]]\n    (let [follows-events? (get-in db [:settings :app-db-follows-events?])\n          epochs          (:epochs db)\n          match-id        (or new-id\n                              ;; new-id may be nil when we call this event from :settings/play\n                              (utils/last-in-vec (get epochs :match-ids)))\n          match           (get-in epochs [:matches-by-id match-id])\n          event           (metam/matched-event (:match-info match))]\n      (when follows-events?\n        ;; Don't mess up the users app if there is a problem getting app-db-after.\n        (when-some [new-db (get-in event [:tags :app-db-after])]\n          (reset! re-frame.db/app-db new-db))))\n    db))\n\n;;;\n\n(defn first-match-id\n  [m]\n  (-> m :match-info first :id))\n\n(rf/reg-event-db\n  :epochs/receive-new-traces\n  (fn [db [_ new-traces]]\n    (if-let [filtered-traces (->> (filter log-trace? new-traces)\n                                  (sort-by :id))]\n      (let [number-of-epochs-to-retain (get-in db [:settings :number-of-epochs])\n            events-to-ignore           (->> (get-in db [:settings :ignored-events]) vals (map :event-id) set)\n            previous-traces            (get-in db [:traces :all-traces] [])\n            parse-state                (get-in db [:epochs :parse-state] metam/initial-parse-state)\n            {drop-re-frame :re-frame drop-reagent :reagent} (get-in db [:settings :low-level-trace])\n            all-traces                 (reduce conj previous-traces filtered-traces)\n            parse-state                (metam/parse-traces parse-state filtered-traces)\n            ;; TODO:!!!!!!!!!!!!! We should be parsing everything else with the traces that span the newly matched\n            ;; epochs, not the filtered-traces, as these are only partial.\n            new-matches                (:partitions parse-state)\n            previous-matches           (get-in db [:epochs :matches] [])\n            parse-state                (assoc parse-state :partitions []) ;; Remove matches we know about\n            new-matches                (remove (fn [match]\n                                                 (let [event (get-in (metam/matched-event match) [:tags :event])]\n                                                   (contains? events-to-ignore (first event)))) new-matches)\n            ;; subscription-info is calculated separately from subscription-match-state because they serve different purposes:\n            ;; - subscription-info collects all the data that we know about the subscription itself, like its layer, inputs and other\n            ;;   things that are defined as part of the reg-sub.\n            ;; - subscription-match-state collects all the data that we know about the state of specific instances of subscriptions\n            ;;   like its reagent id, when it was created, run, disposed, what values it returned, e.t.c.\n            subscription-info          (metam/subscription-info (get-in db [:epochs :subscription-info] {}) filtered-traces (get-in db [:app-db :reagent-id]))\n            sub-state                  (get-in db [:epochs :sub-state] metam/initial-sub-state)\n            subscription-match-state   (metam/subscription-match-state sub-state all-traces new-matches)\n            subscription-matches       (rest subscription-match-state)\n\n            new-sub-state              (last subscription-match-state)\n            timing                     (mapv (fn [match]\n                                               (let [epoch-traces        (into []\n                                                                               (comp\n                                                                                 (utils/id-between-xf (:id (first match)) (:id (last match))))\n                                                                               all-traces)\n                                                     ;; TODO: handle case when there are no epoch-traces\n                                                     start-of-epoch      (nth epoch-traces 0)\n                                                     ;; TODO: optimise trace searching\n                                                     event-handler-trace (first (filter metam/event-handler? epoch-traces))\n                                                     dofx-trace          (first (filter metam/event-dofx? epoch-traces))\n                                                     event-trace         (first (filter metam/event-run? epoch-traces))\n                                                     finish-run          (or (first (filter metam/finish-run? epoch-traces))\n                                                                             (utils/last-in-vec epoch-traces))]\n                                                 {:re-frame/event-run-time     (metam/elapsed-time start-of-epoch finish-run)\n                                                  :re-frame/event-time         (:duration event-trace)\n                                                  :re-frame/event-handler-time (:duration event-handler-trace)\n                                                  :re-frame/event-dofx-time    (:duration dofx-trace)}))\n                                             new-matches)\n\n            new-matches                (map (fn [match sub-match t] {:match-info match\n                                                                     :sub-state  sub-match\n                                                                     :timing     t})\n                                            new-matches subscription-matches timing)\n            all-matches                (reduce conj previous-matches new-matches)\n            retained-matches           (into [] (take-last number-of-epochs-to-retain all-matches))\n            first-id-to-retain         (first-match-id (first retained-matches))\n            retained-traces            (into [] (comp (drop-while #(< (:id %) first-id-to-retain))\n                                                      (remove (fn [trace]\n                                                                (or (when drop-reagent (metam/low-level-reagent-trace? trace))\n                                                                    (when drop-re-frame (metam/low-level-re-frame-trace? trace)))))) all-traces)]\n        (-> db\n            (assoc-in [:traces :all-traces] retained-traces)\n            (update :epochs (fn [epochs]\n                              (assoc epochs\n                                :matches retained-matches\n                                :matches-by-id (into {} (map (juxt first-match-id identity)) retained-matches)\n                                :match-ids (mapv first-match-id retained-matches)\n                                :parse-state parse-state\n                                :sub-state new-sub-state\n                                :subscription-info subscription-info)))))\n      ;; Else\n      db)))\n\n(rf/reg-event-fx\n  :epochs/previous-epoch\n  [(rf/path [:epochs])]\n  (fn [{:keys [db]} _]\n    (if-some [current-id (:current-epoch-id db)]\n      (let [match-ids         (:match-ids db)\n            match-array-index (utils/find-index-in-vec (fn [x] (= current-id x)) match-ids)\n            new-id            (nth match-ids (dec match-array-index))]\n        {:db         (assoc db :current-epoch-id new-id)\n         :dispatch-n [[:settings/pause] [:snapshot/reset-current-epoch-app-db new-id]]})\n      (let [new-id (nth (:match-ids db)\n                        (- (count (:match-ids db)) 2))]\n        {:db         (assoc db :current-epoch-id new-id )\n         :dispatch-n [[:settings/pause] [:snapshot/reset-current-epoch-app-db new-id]]}))))\n\n(rf/reg-event-fx\n  :epochs/next-epoch\n  [(rf/path [:epochs])]\n  (fn [{:keys [db]} _]\n    (if-some [current-id (:current-epoch-id db)]\n      (let [match-ids         (:match-ids db)\n            match-array-index (utils/find-index-in-vec (fn [x] (= current-id x)) match-ids)\n            new-id            (nth match-ids (inc match-array-index))]\n        {:db         (assoc db :current-epoch-id new-id)\n         :dispatch-n [[:code/clear-scroll-pos] [:settings/pause] [:snapshot/reset-current-epoch-app-db new-id]]})\n      (let [new-id (last (:match-ids db))]\n        {:db         (assoc db :current-epoch-id new-id)\n         :dispatch-n [[:code/clear-scroll-pos] [:settings/pause] [:snapshot/reset-current-epoch-app-db new-id]]}))))\n\n(rf/reg-event-db\n  :epochs/reset\n  (fn [db]\n    (re-frame.trace/reset-tracing!)\n    (dissoc db :epochs :traces)))\n\n;;\n\n(rf/reg-event-db\n  :subs/ignore-unchanged-l2-subs?\n  [(rf/path [:subs :ignore-unchanged-subs?])]\n  (fn [_ [_ ignore?]]\n    ignore?))\n\n(rf/reg-event-db\n  :subs/open-pod?\n  [(rf/path [:subs :expansions])]\n  (fn [expansions [_ id open?]]\n    (assoc-in expansions [id :open?] open?)))\n\n(rf/reg-event-db\n  :subs/set-diff-visibility\n  [(rf/path [:subs :expansions])]\n  (fn [expansions [_ id diff?]]\n    (let [open? (if diff?\n                  true\n                  (get-in expansions [id :open?]))]\n      (-> expansions\n          (assoc-in [id :diff?] diff?)\n          ;; If we turn on diffing then we want to also expand the path\n          (assoc-in [id :open?] open?)))))\n\n;;\n\n(rf/reg-event-db\n  :code/set-code-visibility\n  [(rf/path [:code :code-open?])]\n  (fn [code-open? [_ open?-path open?]]\n    (assoc-in code-open? open?-path open?)))\n\n(rf/reg-event-db\n  :code/hover-form\n  [(rf/path [:code :highlighted-form])]\n  (fn [form [_ new-form]]\n    new-form))\n\n(rf/reg-event-db\n  :code/exit-hover-form\n  [(rf/path [:code :highlighted-form])]\n  (fn [form [_ new-form]]\n    (if (= form new-form)\n      nil\n      new-form)))\n\n(rf/reg-event-db\n  :code/save-scroll-pos\n  [(rf/path [:code :scroll-pos])]\n  (fn [_scroll-pos [_ top left]]\n    {:top top :left left}))\n\n(rf/reg-event-db\n  :code/clear-scroll-pos\n  [(rf/path [:code :scroll-pos])]\n  (fn [_scroll-pos _]\n    {:top 0 :left 0}))\n"]}