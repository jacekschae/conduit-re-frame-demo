{"version":3,"file":"mranderson047.re_frame.v0v10v2.re_frame.events.js","sources":["mranderson047/re_frame/v0v10v2/re_frame/events.cljc"],"mappings":"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","names":["event-v","*handling*27266","mranderson047.re-frame.v0v10v2.re-frame.events/*handling*","make-chain","interceptors","mranderson047.re_frame.v0v10v2.re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic","mranderson047.re-frame.v0v10v2.re-frame.trace/is-trace-enabled?","*current-trace*27267","mranderson047.re-frame.v0v10v2.re-frame.trace/*current-trace*","mranderson047.re-frame.v0v10v2.re-frame.trace/start-trace","end__27221__auto__","mranderson047.re-frame.v0v10v2.re-frame.interop/now","duration__27222__auto__","seq__27275","cljs.core/seq","cljs.core/deref","mranderson047.re-frame.v0v10v2.re-frame.trace/trace-cbs","chunk__27276","count__27277","i__27278","vec__27279","k__27223__auto__","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","cb__27224__auto__","G__27300","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","e27285","java/lang.Exception","e__27225__auto__","temp__5457__auto__","cljs.core/chunked-seq?","c__4319__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__27305","cljs.core/first","G__27309","e27308","cljs.core/next","event-id","not-i","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","mranderson047.re-frame.v0v10v2.re-frame.interceptor/interceptor?","chain","mranderson047.re-frame.v0v10v2.re-frame.utils/first-in-vector","temp__5455__auto__","mranderson047.re_frame.v0v10v2.re_frame.registrar.get_handler.cljs$core$IFn$_invoke$arity$3","mranderson047.re-frame.v0v10v2.re-frame.events/kind","mranderson047.re-frame.v0v10v2.re-frame.events/flatten-and-remove-nils","cljs.core/coll?","id","mranderson047.re-frame.v0v10v2.re-frame.registrar/register-handler","cljs.core/fn?","cljs.core/empty?","mranderson047.re-frame.v0v10v2.re-frame.events/register","mranderson047.re-frame.v0v10v2.re-frame.interop/debug-enabled?","js/Error","mranderson047.re-frame.v0v10v2.re-frame.registrar/kinds","p1__27256#","cljs.core/flatten","cljs.core/nil?","mranderson047.re-frame.v0v10v2.re-frame.events/handle","mranderson047.re-frame.v0v10v2.re-frame.interceptor/execute"],"sourcesContent":["(ns mranderson047.re-frame.v0v10v2.re-frame.events\n  (:require [mranderson047.re-frame.v0v10v2.re-frame.db          :refer [app-db]]\n            [mranderson047.re-frame.v0v10v2.re-frame.utils       :refer [first-in-vector]]\n            [mranderson047.re-frame.v0v10v2.re-frame.interop     :refer [empty-queue debug-enabled?]]\n            [mranderson047.re-frame.v0v10v2.re-frame.registrar   :refer [get-handler register-handler]]\n            [mranderson047.re-frame.v0v10v2.re-frame.loggers     :refer [console]]\n            [mranderson047.re-frame.v0v10v2.re-frame.interceptor :as  interceptor]\n            [mranderson047.re-frame.v0v10v2.re-frame.trace       :as trace :include-macros true]))\n\n\n(def kind :event)\n(assert (mranderson047.re-frame.v0v10v2.re-frame.registrar/kinds kind))\n\n(defn- flatten-and-remove-nils\n  \"`interceptors` might have nested collections, and contain nil elements.\n  return a flat collection, with all nils removed.\n  This function is 9/10 about giving good error messages.\"\n  [id interceptors]\n  (let [make-chain  #(->> % flatten (remove nil?))]\n    (if-not debug-enabled?\n      (make-chain interceptors)\n      (do    ;; do a whole lot of development time checks\n        (when-not (coll? interceptors)\n          (console :error \"re-frame: when registering \" id \", expected a collection of interceptors, got: \" interceptors))\n        (let [chain (make-chain interceptors)]\n          (when (empty? chain)\n            (console :error \"re-frame: when registering \" id \", given an empty interceptor chain\"))\n          (when-let [not-i (first (remove interceptor/interceptor? chain))]\n            (if (fn? not-i)\n              (console :error \"re-frame: when registering \" id \", got a function instead of an interceptor. Did you provide old style middleware by mistake? Got: \" not-i)\n              (console :error \"re-frame: when registering \" id \", expected interceptors, but got: \" not-i)))\n          chain)))))\n\n\n(defn register\n  \"Associate the given event `id` with the given collection of `interceptors`.\n\n   `interceptors` may contain nested collections and there may be nils\n   at any level,so process this structure into a simple, nil-less vector\n   before registration.\n\n   Typically, an `event handler` will be at the end of the chain (wrapped\n   in an interceptor).\"\n  [id interceptors]\n  (register-handler kind id (flatten-and-remove-nils id interceptors)))\n\n\n\n;; -- handle event --------------------------------------------------------------------------------\n\n(def ^:dynamic *handling* nil)    ;; remember what event we are currently handling\n\n(defn handle\n  \"Given an event vector `event-v`, look up the associated interceptor chain, and execute it.\"\n  [event-v]\n  (let [event-id  (first-in-vector event-v)]\n    (if-let [interceptors  (get-handler kind event-id true)]\n      (if *handling*\n        (console :error \"re-frame: while handling \\\"\" *handling* \"\\\", dispatch-sync was called for \\\"\" event-v \"\\\". You can't call dispatch-sync within an event handler.\")\n        (binding [*handling*  event-v]\n          (trace/with-trace {:operation event-id\n                             :op-type   kind\n                             :tags      {:event event-v}}\n            (interceptor/execute event-v interceptors)))))))\n\n\n"]}