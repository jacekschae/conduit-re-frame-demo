{"version":3,"file":"re_frame.registrar.js","sources":["re_frame/registrar.cljc"],"mappings":";;;;AASA,2BAAA,iFAAA,yDAAA,2DAAA,0DAAA,1RAAKe;AAKL,AAAKb,6CAAmB,6CAAA,7CAACuB;AAGzB,AAAA,iCAAA,yCAAAR,1EAAMO;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,6DAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,6DAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,6DAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAV,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,AAAA,+DAAA,/DAAMU,0EAEFrB;AACD,mDAAA,AAAAH,5CAACC,4DAAKC,4CAAkBC,/GAH3B;;;0EAKIA,KAAKG,/EALT,AAAA,+DAAA,/DAAMkB;AAOC,OAACvB,0JAAIK,jKAPZ,mDAMO,4CAAA,AAAAN,5CAACC,4DAAKC,4CAAkBC;;;AAN/B,AAAA,+DAAA,/DAAMqB,0EASFrB,KAAKG,GAAGe;AACT,IAAMjB,UAAQ,AAACC,6DAAYF,KAAKG,hFAVnC;AAUG,AACE,GAAMU;AACJ,oBAAM,iBAAAI,oBAAKC,zDADb;AACQ,AAAA,oBAAAD;AAAe,mBAAA,XAAMhB;;AAArBgB;;;AAAN,AACE,8DAAA,yGAAA,4EAAA,nPAACb,sLAA8B,6CAAKJ,0CAAgCG;;AADtE;;AADF;;AAGAF;;;AAdL,AAAA,yDAAA,zDAAMoB;;AAiBN,sCAAA,tCAAMF,AAjBN,oFAkBGnB,KAAKG,GAAGI;AACT,GAAMM,HAFR;AAEE,AACE,oBAAM,qEAAA,rEAACW,6DAAYxB,KAAKG;AACtB,8DAAA,uGAAA,qFAAA,1PAACC,6LAAsC,6CAAKJ,+BAAqBG,zQADnE;;AAAA;;AADF;;AAGA,iHAAA,jHAACE,mDAAMN,2CAAkBO,sGAAUN,KAAKG,WAAII;;AAC5CA;;AAGF,AAAA,oCAAA,4CAAAO,hFAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC;;;KAAA;AAAA,OAAAA,gEAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,gEAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAL,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,AAAA,kEAAA,lEAAMK;AAAN,AAEG,wEAAA,jEAACO,sBAAOxB;;;AAFX,AAAA,kEAAA,lEAAMiB,6EAIFhB;AACD,oBAAQ,CAACY,yDAAAA,+DAAAA,RAAMZ,2CAAAA,hLALlB;AAKG;AAAA,AAAA,MAAA,KAAAW,MAAA;;;AACA,OAACc,mDAAM1B,2CAAkBW,iBAAOV;;;AANnC,AAAA,kEAAA,lEAAMgB,6EAQFhB,KAAKG;AART,AASG,oBAAQ,CAACS,yDAAAA,+DAAAA,RAAMZ,2CAAAA;AAAf;AAAA,AAAA,MAAA,KAAAW,MAAA;;;AACA,oBAAI,AAACT,6DAAYF,KAAKG;AACpB,gIAAA,zHAACK,0DAAMT,2CAAkBU,uGAAWT,aAAMU,mEAAOP;;AACjD,qEAAA,uGAAA,qFAAA,1PAACC,6LAAsC,6CAAKJ,8BAAoB,iDAAA,JAAKG;;;;AAZ1E,AAAA,4DAAA,5DAAMa;;AAAN","names":["cljs.core/deref","cljs.core.get.cljs$core$IFn$_invoke$arity$2","re-frame.registrar/kind->id->handler","kind","handler","re_frame.registrar.get_handler.cljs$core$IFn$_invoke$arity$2","id","re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc-in","handler-fn","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic","cljs.core/update-in","cljs.core/dissoc","js/Error","re-frame.registrar/kinds","re-frame.interop/debug-enabled?","var_args","G__38081","re-frame.registrar/clear-handlers","and__3911__auto__","required?","re-frame.registrar/register-handler","G__38066","re-frame.registrar/get-handler","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","cljs.core/reset!","re_frame.registrar.get_handler.cljs$core$IFn$_invoke$arity$3","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3"],"sourcesContent":["(ns re-frame.registrar\n  \"In many places, re-frame asks you to associate an `id` (keyword)\n  with a `handler` (function).  This namespace contains the\n  central registry of such associations.\"\n  (:require  [re-frame.interop :refer [debug-enabled?]]\n             [re-frame.loggers :refer [console]]))\n\n\n;; kinds of handlers\n(def kinds #{:event :fx :cofx :sub})\n\n;; This atom contains a register of all handlers.\n;; Contains a two layer map, keyed first by `kind` (of handler), and then `id` of handler.\n;; Leaf nodes are handlers.\n(def kind->id->handler  (atom {}))\n\n\n(defn get-handler\n\n  ([kind]\n   (get @kind->id->handler kind))\n\n  ([kind id]\n   (-> (get @kind->id->handler kind)\n       (get id)))\n\n  ([kind id required?]\n   (let [handler (get-handler kind id)]\n     (when debug-enabled?                          ;; This is in a separate `when` so Closure DCE can run ...\n       (when (and required? (nil? handler))        ;; ...otherwise you'd need to type-hint the `and` with a ^boolean for DCE.\n         (console :error \"re-frame: no\" (str kind) \"handler registered for:\" id)))\n     handler)))\n\n\n(defn register-handler\n  [kind id handler-fn]\n  (when debug-enabled?                                       ;; This is in a separate when so Closure DCE can run\n    (when (get-handler kind id false)\n      (console :warn \"re-frame: overwriting\" (str kind) \"handler for:\" id)))   ;; allow it, but warn. Happens on figwheel reloads.\n  (swap! kind->id->handler assoc-in [kind id] handler-fn)\n  handler-fn)    ;; note: returns the just registered handler\n\n\n(defn clear-handlers\n  ([]            ;; clear all kinds\n   (reset! kind->id->handler {}))\n\n  ([kind]        ;; clear all handlers for this kind\n   (assert (kinds kind))\n   (swap! kind->id->handler dissoc kind))\n\n  ([kind id]     ;; clear a single handler for a kind\n   (assert (kinds kind))\n   (if (get-handler kind id)\n     (swap! kind->id->handler update-in [kind] dissoc id)\n     (console :warn \"re-frame: can't clear\" (str kind) \"handler for\" (str id \". Handler not found.\")))))\n"]}