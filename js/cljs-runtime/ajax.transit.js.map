{"version":3,"file":"ajax.transit.js","sources":["ajax/transit.cljc"],"mappings":";;;;;;AAQA,4BAAA,oCAAA2B,hEAAMvB;AAAN,AAAA,IAAAwB,aAAAD;IAAAC,iBAAA,EAAA,EAAA,EAAA,CAAAA,cAAA,QAAA,EAAA,EAAA,CAAA,AAAAA,iDAAA,WAAA,CAAAC,gCAAA,AAAAD,+BAAA,KAAA,OAAA,QAAA,AAAAE,8CAAAC,mBAAAH,YAAAA;WAAA,AAAAI,4CAAAJ,eAAA,lEAA4B3B;AAC1B,IAAAO,mBAAIP,vBADN;AACE,AAAA,oBAAAO;AAAAA;;AAAA;;;wEAGWP,KAAKC,7EADR,gCAAA,hCAAMF;AAEJ,IAAMW,SAAO,iBAAAH,mBAAI,AAAA,uFAASN,xIAF5B;AAEe,AAAA,oBAAAM;AAAAA;;AACI,OAACe,uDAAStB,KAAKC;;;AAC9B,AAFF;sEAE4BG;AAA1B,AACE,OAACoB,wBAAQd,OAAON;;;;AAMhC,AAAA,sCAAA,8CAAAO,pFAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC;;;KAAA;AAAA,OAAAA,kEAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,AAAA,oEAAA,pEAAMD;AAAN,AACM,yEAAA,lEAACQ;;;+EACHpB,/EAFJ,AAAA,oEAAA,pEAAMY;AAAN,AAGK,IAAMb,OAAK,AAACG,0BAAaF;IACnBiB,YAAU,2GAAA,OAAA,hHAAI,kDAAA,lDAACK,6CAAEvB;0GACb,AAACD,8BAAiBC,KAAKC,8EAChB,CAAA,mEAA4BiB,/RAH7C,AAAA,kDAAA,oGAAA;;;AAHL,AAAA,8DAAA,9DAAML;;AAAN,AAQU,+BAAA,/BAAMY,sEAAiBxB;AACrB,IAAMK,SAAO,iBAAAC,mBAAI,AAAA,sFAASN,vIAD5B;AACe,AAAA,oBAAAM;AAAAA;;AACI,8DAAA,vDAACC,4GAAeP;;;AADjC,AAEE;sEAA2BQ;AAA3B,AACE,OAACU,uBAAOb,OAAO,AAACc,qBAASX;;;;AASzC,AAAA,uCAAA,+CAAAE,tFAAMK;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC;;;KAAA;AAAA,OAAAA,mEAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,mEAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAF,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,AAAA,qEAAA,rEAAME;AAAN,AACM,0EAAA,nEAACC;;;AADP,AAAA,qEAAA,rEAAMD,gFAEFf;AACC,OAACC,mEAAwB,AAACC,0BAAaF,SAASA,7GAHrD;;;AAAA,AAAA,qEAAA,rEAAMe,gFAIFhB,KAAKC;AACJ,gDAAA,2CAAA,2FAAA,oEAAA,UAAA,qEAAA,mFAAA,rZAACI,PALN,gJAMa,AAACoB,6BAAgBxB;;;AAN9B,AAAA,+DAAA,/DAAMe;;AAAN","names":["ajax.transit/transit-write-fn","type","request","ajax.transit.transit_response_format.cljs$core$IFn$_invoke$arity$2","ajax.transit/transit-type","params","ajax.interceptors/map->ResponseFormat","reader","or__3922__auto__","cognitect.transit.reader.cljs$core$IFn$_invoke$arity$2","response","writer","var_args","G__41582","ajax.transit/transit-request-format","js/Error","G__41612","ajax.transit/transit-response-format","ajax.transit.transit_response_format.cljs$core$IFn$_invoke$arity$1","mime-type","cognitect.transit/read","ajax.protocols/-body","ajax.transit.transit_request_format.cljs$core$IFn$_invoke$arity$1","cognitect.transit.writer.cljs$core$IFn$_invoke$arity$2","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cognitect.transit/write","ajax.transit/transit-read-fn","p__41566","map__41568","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],"sourcesContent":["(ns ajax.transit\n    (:require [cognitect.transit :as t]\n              [ajax.interceptors :as i]\n              [ajax.protocols :as pr]\n              [ajax.util :as u]\n              #? (:clj  [poppea :as p]))\n    #? (:cljs (:require-macros [poppea :as p])))\n\n(defn transit-type [{:keys [type]}]\n  (or type #? (:cljs :json :clj :msgpack)))\n\n#? (:cljs (defn transit-write-fn\n            [type request]\n            (let [writer (or (:writer request)\n                             (t/writer type request))]\n              (fn transit-write-params [params]\n                (t/write writer params))))\n    :clj (p/defn-curried transit-write-fn\n           [type request stream params]\n           (let [writer (t/writer stream type request)]\n             (t/write writer params))))\n\n(defn transit-request-format\n  ([] (transit-request-format {}))\n  ([request]\n     (let [type (transit-type request)\n           mime-type (if (= type :json) \"json\" \"msgpack\")]\n       {:write (transit-write-fn type request)\n        :content-type (str \"application/transit+\" mime-type)})))\n\n#? (:cljs (defn transit-read-fn [request]\n            (let [reader (or (:reader request)\n                             (t/reader :json request))]\n              (fn transit-read-response [response]\n                (t/read reader (pr/-body response)))))\n    :clj (p/defn-curried transit-read-fn [request response]\n           (let [content-type (u/get-content-type response)\n                 type (if (.contains content-type \"msgpack\")\n                        :msgpack :json)\n                 stream (pr/-body response)\n                 reader (t/reader stream type request)]\n             (t/read reader))))\n\n(defn transit-response-format\n  ([] (transit-response-format {}))\n  ([request]\n     (transit-response-format (transit-type request) request))\n  ([type request]\n     (i/map->ResponseFormat\n      {:read (transit-read-fn request)\n       :description \"Transit\"\n       :content-type\n       #? (:cljs [\"application/transit+json\"]\n           :clj [\"application/transit+msgpack\"\n                 \"application/transit+json\"])})))\n"]}