{"version":3,"file":"rewrite_clj.zip.removez.js","sources":["rewrite_clj/zip/removez.cljs"],"mappings":";;;;;;AAQA;;;wGAEGS,KAAKI,7DAFR,hDAAOE;AAGL,OAACI,yCAAqBV,KAAKI,rDAH7B;;AAKA;;;0GAEGJ,KAAKI,9DAFR,jDAAOH;AAAP,AAGE,OAACU,wCAAoBX,KAAKI;;AAE5B;;;;;;;;;;;;;;;;;;;0EAkBGJ,zCAlBH,jCAAMY;AAAN,AAAA,oBAmBSZ;AAnBT;AAAA,AAAA,MAAA,KAAAQ,MAAA;;;0GAqBO,iEAAI,kBAAI,iBAAAV,mBAAI,AAACC,sCAAaC,1IAItB,AAACM,nBACDf,1FACJ,AAACI,yEAAmBC,zFA3B3B,IAAAW;AAqBe,AAAA,oBAAAT;AAAAA;;AACI,OAACO,qCAAYL;;MACnB,AAACC,+CAAuBD,KAAKG,oDAERA,NADrBH;oBAJHO,pBApBV,AAAA;AAAA;AAAA,AAAA,MAAA,KAAAC,MAAA;;;AAAAD;;AA6BA;;;kDAAA,lDAAME,4GAEHT;oBACMA,pBAHT,AAAA;AAAA;AAAA,AAAA,MAAA,KAAAQ,MAAA;;;0GAYWjB,1FACJ,AAACI,yEAAmBC,zFAb3B,IAAAW,yHAUW,AAACD,nBALL,iEAAI,kBAAI,iBAAAR,mBAAI,AAACC,sCAAaC;AAAlB,AAAA,oBAAAF;AAAAA;;AACI,OAACO,qCAAYL;;MACnB,oDAAA,WAAAH,/DAACI,+CAAuBD;AAAxB,AAA8B,IAAAE,oBAAK,6CAAAL,7CAACM;AAAN,AAAA,oBAAAD;AACK,OAACV,cAAI,4CAAAK,5CAACH;;AADXQ;;IAE9BF,MACF,WAAAP;AAAA,AAAwB,IAAAS,oBAAK,6CAAAT,7CAACU;AAAN,AAAA,oBAAAD;AACa,OAACV,cAAI,4CAAAC,5CAACC;;AADnBQ;;;oBANzBK,pBAJV,AAAA;AAAA;AAAA,AAAA,MAAA,KAAAC,MAAA;;;AAAAD","names":["clojure.zip/remove","cljs.core/not","p1__28919#","rewrite-clj.zip.whitespace/linebreak?","rewrite_clj.zip.whitespace.skip_whitespace.cljs$core$IFn$_invoke$arity$2","clojure.zip/prev","p1__28918#","or__3922__auto__","rewrite-clj.zip.move/rightmost?","zloc","rewrite-clj.zip.removez/remove-preceding-space","and__3911__auto__","rewrite-clj.zip.whitespace/whitespace?","p?","rewrite-clj.zip.move/leftmost?","rewrite-clj.zip.removez/remove-trailing-space","%","js/Error","rewrite-clj.zip.removez/remove-preserve-newline","rewrite-clj.zip.utils/remove-right-while","rewrite-clj.zip.utils/remove-left-while","rewrite-clj.zip.removez/remove"],"sourcesContent":["(ns rewrite-clj.zip.removez\n  (:refer-clojure :exclude [remove])\n  (:require [rewrite-clj.zip.move :as m]\n            [rewrite-clj.zip.utils :as u]\n            [rewrite-clj.zip.whitespace :as ws]\n            [clojure.zip :as z]))\n\n\n(defn- remove-trailing-space\n  \"Remove all whitespace following a given node.\"\n  [zloc p?]\n  (u/remove-right-while zloc p?))\n\n(defn- remove-preceding-space\n  \"Remove all whitespace preceding a given node.\"\n  [zloc p?]\n  (u/remove-left-while zloc p?))\n\n(defn remove\n  \"Remove value at the given zipper location. Returns the first non-whitespace\n   node that would have preceded it in a depth-first walk. Will remove whitespace\n   appropriately.\n\n  - `[1  2  3]   => [1  3]`\n  - `[1 2]       => [1]`\n  - `[1 2]       => [2]`\n  - `[1]         => []`\n  - `[  1  ]     => []`\n  - `[1 [2 3] 4] => [1 [2 3]]`\n  - `[1 [2 3] 4] => [[2 3] 4]`\n\n   If a node is located rightmost, both preceding and trailing spaces are removed,\n   otherwise only trailing spaces are touched. This means that a following element\n   (no matter whether on the same line or not) will end up in the same position\n   (line/column) as the removed one, _unless_ a comment lies between the original\n   node and the neighbour.\"\n  [zloc]\n  {:pre [zloc]\n   :post [%]}\n  (->> (-> (if (or (m/rightmost? zloc)\n                   (m/leftmost? zloc))\n             (remove-preceding-space zloc ws/whitespace?)\n             zloc)\n           (remove-trailing-space ws/whitespace?)\n           z/remove)\n       (ws/skip-whitespace z/prev)))\n\n(defn remove-preserve-newline\n  \"Same as remove but preserves newlines\"\n  [zloc]\n  {:pre [zloc]\n   :post [%]}\n  (->> (-> (if (or (m/rightmost? zloc)\n                   (m/leftmost? zloc))\n             (remove-preceding-space zloc #(and (ws/whitespace? %)\n                                                (not (ws/linebreak? %))))\n             zloc)\n           (remove-trailing-space #(and (ws/whitespace? %)\n                                                (not (ws/linebreak? %))))\n           z/remove)\n       (ws/skip-whitespace z/prev)))\n\n"]}