{"version":3,"file":"shadow.cljs.devtools.client.env.js","sources":["shadow/cljs/devtools/client/env.cljs"],"mappings":"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","names":["task","e29470","cljs.core/*1","ret","G__29469","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","e","result","log-call-async","reload-info","msg","load-code-fn","complete-fn","goog/define","tag","value","e29471","cljs.core/*2","next","fn-obj","js/goog.getObjectByName","fn-str","js/$CLJS","p1__29490#","cljs.core.map.cljs$core$IFn$_invoke$arity$2","shadow.cljs.devtools.client.env/make-task-fn","shadow.cljs.devtools.client.env/repl-error","*default-data-reader-fn*29472","cljs.tools.reader/*default-data-reader-fn*","shadow.cljs.devtools.client.env/get-ws-url-base","text","js/console.log","log-missing-fn","fn-sym","js/console.warn","e29473","cljs.core.map.cljs$core$IFn$_invoke$arity$1","p1__29491#","cljs.core.into.cljs$core$IFn$_invoke$arity$3","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","shadow.cljs.devtools.client.env/build-id","shadow.cljs.devtools.client.env/proc-id","shadow.cljs.devtools.client.env/client-id","shadow.cljs.devtools.client.env/files-url","log-call","shadow.cljs.devtools.client.env/repl-print-fn","js/document.location.hostname","shadow.cljs.devtools.client.env/repl-host","cljs.core/reverse","shadow.cljs.devtools.client.env/get-url-base","shadow.cljs.devtools.client.env.do_js_reload.cljs$core$IFn$_invoke$arity$3","async","shadow.cljs.devtools.client.env/devtools-url","clojure.string/replace","p__29474","p__29475","map__29476","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","map__29477","load-tasks","G__29489","shadow.cljs.devtools.client.env/do-js-reload*","remaining-tasks","js/Error","shadow.cljs.devtools.client.env/ws-url","client-type","shadow.cljs.devtools.client.env/get-repl-host","cljs.core/Keyword","cljs.tools.reader.read_string.cljs$core$IFn$_invoke$arity$1","cljs.core.into.cljs$core$IFn$_invoke$arity$2","shadow.cljs.devtools.client.env/repl-call","repl-expr","repl-error","shadow.cljs.devtools.client.env/ws-listener-url","cljs.core/seq","handler","cljs.core/*3","cljs.core/random-uuid","cljs.core/name","cljs.core/pr-str","p__29485","vec__29486","seq__29487","first__29488","cljs.core/first","cljs.core/next","var_args","G__29493","shadow.cljs.devtools.client.env/do-js-reload","p__29494","map__29495","and__3911__auto__","shadow.cljs.devtools.client.env/use-document-host","js/goog.global.document","cljs.core/*e","shadow.cljs.devtools.client.env/ssl","shadow.cljs.devtools.client.env/repl-port","shadow.cljs.devtools.client.env/process-ws-msg"],"sourcesContent":["(ns shadow.cljs.devtools.client.env\n  (:require [goog.object :as gobj]\n            [cljs.tools.reader :as reader]\n            [clojure.string :as str]))\n\n(defonce client-id (random-uuid))\n\n(goog-define enabled false)\n\n(goog-define autoload true)\n\n(goog-define module-format \"goog\")\n\n(goog-define reload-with-state false)\n\n(goog-define build-id \"\")\n\n(goog-define proc-id \"\")\n\n(goog-define repl-host \"\")\n\n(goog-define repl-port 8200)\n\n(goog-define use-document-host true)\n\n(goog-define devtools-url \"\")\n\n(goog-define ssl false)\n\n(defn get-repl-host []\n  (if (and use-document-host js/goog.global.document)\n    js/document.location.hostname\n    repl-host))\n\n(defn get-url-base []\n  (if (seq devtools-url)\n    devtools-url\n    (str \"http\" (when ssl \"s\") \"://\" (get-repl-host) \":\" repl-port)))\n\n(defn get-ws-url-base []\n  (-> (get-url-base)\n      (str/replace #\"^http\" \"ws\")))\n\n(defn ws-url [client-type]\n  {:pre [(keyword? client-type)]}\n  (str (get-ws-url-base) \"/ws/worker/\" build-id \"/\" proc-id \"/\" client-id \"/\" (name client-type)))\n\n(defn ws-listener-url [client-type]\n  (str (get-ws-url-base) \"/ws/listener/\" build-id \"/\" proc-id \"/\" client-id))\n\n(defn files-url []\n  (str (get-url-base) \"/worker/files/\" build-id \"/\" proc-id \"/\" client-id))\n\n(def repl-print-fn pr-str)\n\n(defn repl-error [e]\n  (-> {:type :repl/invoke-error\n       ;; FIXME: may contain non-printable things and would break the client read\n       ;; :ex-data (ex-data e)\n       :error (.-message e)}\n      (cond->\n        (.hasOwnProperty e \"stack\")\n        (assoc :stack (.-stack e)))))\n\n(defn repl-call [repl-expr repl-error]\n  (try\n    (let [result {:type :repl/result}\n          ret (repl-expr)]\n      (set! *3 *2)\n      (set! *2 *1)\n      (set! *1 ret)\n\n      (try\n\n        (assoc result\n          :value (repl-print-fn ret))\n        (catch :default e\n          (js/console.log \"encoding of result failed\" e ret)\n          (assoc result :error \"ENCODING FAILED\"))))\n    (catch :default e\n      (set! *e e)\n      (repl-error e)\n      )))\n\n(defn process-ws-msg [e handler]\n  (binding [reader/*default-data-reader-fn*\n            (fn [tag value]\n              [:tagged-literal tag value])]\n    (let [text\n          (.-data e)\n\n          msg\n          (try\n            (reader/read-string text)\n            (catch :default e\n              (js/console.warn \"failed to parse websocket message\" text e)))]\n      (when msg\n        (handler msg))\n      )))\n\n(defn make-task-fn [{:keys [log-missing-fn log-call-async log-call]} {:keys [fn-sym fn-str async]}]\n  (fn [next]\n    (let [fn-obj (js/goog.getObjectByName fn-str js/$CLJS)]\n      (cond\n        (nil? fn-obj)\n        (do (when log-missing-fn\n              (log-missing-fn fn-sym))\n            (next))\n\n        async\n        (do (when log-call-async\n              (log-call-async fn-sym))\n            (fn-obj next))\n\n        :else\n        (do (when log-call\n              (log-call fn-sym))\n            (fn-obj)\n            (next))))))\n\n(defn do-js-reload* [[task & remaining-tasks]]\n  (when task\n    (task #(do-js-reload* remaining-tasks))))\n\n(defn do-js-reload\n  \"should pass the :build-complete message and an additional callback\n   which performs the actual loading of the code (sync)\n   will call all before/after callbacks in order\"\n  ([msg load-code-fn]\n    (do-js-reload msg load-code-fn (fn [])))\n  ([{:keys [reload-info] :as msg} load-code-fn complete-fn]\n   (let [load-tasks\n         (-> []\n             ;; unload is FILO\n             (into (->> (:before-load reload-info)\n                        (map #(make-task-fn msg %))\n                        (reverse)))\n             (conj (fn [next]\n                     (load-code-fn)\n                     (next)))\n             ;; load is FIFO\n             (into (map #(make-task-fn msg %)) (:after-load reload-info))\n             (conj (fn [next]\n                     (complete-fn)\n                     (next))))]\n\n     (do-js-reload* load-tasks))))\n"]}