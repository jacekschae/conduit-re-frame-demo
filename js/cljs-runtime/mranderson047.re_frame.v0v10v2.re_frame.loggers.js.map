{"version":3,"file":"mranderson047.re_frame.v0v10v2.re_frame.loggers.js","sources":["mranderson047/re_frame/v0v10v2/re_frame/loggers.cljc"],"mappings":";;;AAaA;;;;;;uWAO6B,AAACA,mBAAsBC,oNAIvB,mEAAA,jDAAI,AAAYA,vKAHhB,kBAAI,AAASA,3cAR3BC,0dASgB,AAACE,mBAAsBH,qIAGvB,AAACa,sBAAyBb,lJAF1B,AAAC0B,iBAAsB1B,lPAJzB,AAAC6B,kBAAsB7B,7OADlD,6CAAA,2CAAA,8EAAA,gFAAA,mFAAA,8IAAA,vdAACgC,4IAA0B,AAACN,iBAAsB1B;AAMvB,AAAA;;AAU7B,AAAA,0DAAA,kEAAAc,5HAAMM;AAAN,AAAA,IAAAL,qBAAA;AAAA,AAAA,IAAAC,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAAD,wBAAA,CAAA,UAAAE;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,EAAA,CAAA,MAAA,AAAAH,4BAAA,AAAA,KAAAI,qBAAA,AAAAJ,yBAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAAK,6FAAA,CAAA,UAAA,MAAAF;;;AAAA,AAAA,AAAA,AAAAE,+FAAA,WACGb,MAAQqB;AACT,GAAQ,0BAAA,AAAAvB,1BAACC,0CAAWL,yDAAQM,tGAF9B;AAEE;AAAA,AAAA,MAAA,KAAAH,MAAA,CAAA,yKAAA,KAAA,hHAAmC,CAAA,wFAAiDG;;;AACpF,OAAC0B,8CAAM,iBAAAC,WAAA,AAAA7B,gBAAQJ;AAAR,AAAA,kFAAAiC,4BAAAA,tGAAC3B,sCAAAA,gDAAAA;KAAgBqB;;;AAH1B,AAAA,AAAAR,kFAAA;;AAAA;AAAA,AAAA,AAAAA,4EAAA,WAAAC;AAAA,AAAA,IAAAC,WAAA,AAAAC,gBAAAF;IAAAA,eAAA,AAAAG,eAAAH;AAAA,AAAA,IAAAI,qBAAA;AAAA,AAAA,OAAAA,wDAAAH,SAAAD;;;AAMA,AANA;;;;oEAMA,pEAAMnB,gJAGHM;AAHH,0HAI0EC,hGAAtDC,8GAAiDC,zDAAtC,AAACF,2CAAwB,cAAA,eAAA,AAAAJ,1DAApB,0EAAyBJ,pKAAjDW,HAAV,0BAAiB,vBAAR,yGAA+BJ,fAALG;AAAnC;AAAA,AAAA,MAAA,KAAAP,MAAA,CAAA,kBAAA,8BAAA,KAAA;;;AACA,OAAC0B,mDAAM7B,wDAAQ8B,gBAAMvB;;AAEvB;;;8DAAA,9DAAMmB;uBAGH1B,vBAHH,AAAA,OAAAI","names":["js/console.error.bind","js/console","mranderson047.re-frame.v0v10v2.re-frame.loggers/loggers","mranderson047.re-frame.v0v10v2.re-frame.loggers/set-loggers!","js/console.group.bind","js/Error","cljs.core/deref","cljs.core/contains?","level","new-loggers","cljs.core/set","clojure.set.difference.cljs$core$IFn$_invoke$arity$2","cljs.core/keys","cljs.core/empty?","js/console.groupEnd.bind","var_args","args__4502__auto__","len__4499__auto__","i__4500__auto__","argseq__4503__auto__","cljs.core/IndexedSeq","mranderson047.re-frame.v0v10v2.re-frame.loggers/console","seq26937","G__26938","cljs.core/first","cljs.core/next","self__4486__auto__","js/console.log.bind","mranderson047.re-frame.v0v10v2.re-frame.loggers/get-loggers","args","js/console.warn.bind","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","cljs.core/merge","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","G__26939"],"sourcesContent":["(ns mranderson047.re-frame.v0v10v2.re-frame.loggers\n  (:require\n   [clojure.set :refer [difference]]\n   #?@(:clj [[clojure.string :as str]\n             [clojure.tools.logging :as log]])))\n\n#?(:clj (defn log [level & args]\n          (log/log level (if (= 1 (count args))\n                           (first args)\n                           (str/join \" \" args)))))\n\n\n;; XXX should loggers be put in the registrar ??\n(def ^:private loggers\n  \"Holds the current set of logging functions.\n   By default, mranderson047.re-frame.v0v10v2.re-frame uses the functions provided by js/console.\n   Use `set-loggers!` to change these defaults\n  \"\n  (atom #?(:cljs {:log       (js/console.log.bind   js/console)\n                  :warn      (js/console.warn.bind  js/console)\n                  :error     (js/console.error.bind js/console)\n                  :group     (if (.-group js/console)         ;; console.group does not exist  < IE 11\n                               (js/console.group.bind js/console)\n                               (js/console.log.bind   js/console))\n                  :groupEnd  (if (.-groupEnd js/console)        ;; console.groupEnd does not exist  < IE 11\n                               (js/console.groupEnd.bind js/console)\n                               #())})\n        ;; clojure versions\n        #?(:clj {:log      (partial log :info)\n                 :warn     (partial log :warn)\n                 :error    (partial log :error)\n                 :group    (partial log :info)\n                 :groupEnd  #()})))\n\n(defn console\n  [level & args]\n  (assert (contains? @loggers level) (str \"re-frame: log called with unknown level: \" level))\n  (apply (level @loggers) args))\n\n\n(defn set-loggers!\n  \"Change the set (or a subset) of logging functions used by mranderson047.re-frame.v0v10v2.re-frame.\n  `new-loggers` should be a map with the same keys as `loggers` (above)\"\n  [new-loggers]\n  (assert  (empty? (difference (set (keys new-loggers)) (-> @loggers keys set))) \"Unknown keys in new-loggers\")\n  (swap! loggers merge new-loggers))\n\n(defn get-loggers\n  \"Get the current logging functions used by mranderson047.re-frame.v0v10v2.re-frame.\"\n  []\n  @loggers)\n"]}