{"version":3,"file":"mranderson047.re_frame.v0v10v2.re_frame.trace.js","sources":["mranderson047/re_frame/v0v10v2/re_frame/trace.cljc"],"mappings":";;;;AASA,AAAKkB,mDAAG,6CAAA,7CAACS;AACT,0EAAA,1EAAeP;AAEf,oEAAA,pEAAMM;AACJ,8EAAA,vEAACT,sBAAOC,7BADV;;AAGS,AAAA,AAAA;AAAA;AAAA,AAAAP,YAAA,qEAAA;AAGT;;;wEAAA,xEAAeoB;AAGbnB,AAHF;;AAKA,AAAKY,0DAAU,6CAAA,7CAACG;AAEhB;;;;4IAGGX,IAAIK,9EAHP,lEAAMC;AAIJ,GAAIV,HAJN;AAKI,OAACiB,mDAAML,wDAAUM,gBAAMd,IAAIK;;AAC3B,oGAAA,uGAAA,pMAACR;;;AAEL,gEAAA,hEAAME,wIAAiBC;AAAvB,AACE,AAACO,mDAAMC,wDAAUC,iBAAOT;;AAD1B;;AAIA,wDAAA,xDAAMF;AAAN,AAAiB,OAACkB,mDAAMd,iDAAGe;;AAE3B,4DAAA,oEAAAjC,hIAAMM;AAAN,AAAA,IAAAL,aAAAD;IAAAC,iBAAA,EAAA,EAAA,EAAA,CAAAA,cAAA,QAAA,EAAA,EAAA,CAAA,AAAAA,iDAAA,WAAA,CAAAC,gCAAA,AAAAD,+BAAA,KAAA,OAAA,QAAA,AAAAE,8CAAAC,mBAAAH,YAAAA;gBAAA,AAAAI,4CAAAJ,eAAA,vEAA2BM;cAA3B,AAAAF,4CAAAJ,eAAA,rEAAqCO;WAArC,AAAAH,4CAAAJ,eAAA,lEAA6CQ;eAA7C,AAAAJ,4CAAAJ,eAAA,tEAAkDS;AAAlD,AAAA,kDAAA,0GAAA,0EAAA,oEAAA,0DAAA,hQACc,AAACI,wHACDP,mIAEAE,kEACA,iBAAAU,mBAAIT,nKAFJF;AAEA,AAAA,oBAAAW;AAAAA;;AAAa,OAAA,gFAAKC;;KALhC,uDAMc,AAACQ;;AAEf","names":["p__27244","map__27245","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","mranderson047.re-frame.v0v10v2.re-frame.trace/start-trace","operation","op-type","tags","child-of","goog/define","mranderson047.re-frame.v0v10v2.re-frame.trace/trace-enabled?","mranderson047.re_frame.v0v10v2.re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic","mranderson047.re-frame.v0v10v2.re-frame.trace/next-id","mranderson047.re-frame.v0v10v2.re-frame.trace/remove-trace-cb","key","cljs.core/reset!","mranderson047.re-frame.v0v10v2.re-frame.trace/id","or__3922__auto__","mranderson047.re-frame.v0v10v2.re-frame.trace/*current-trace*","f","mranderson047.re-frame.v0v10v2.re-frame.trace/register-trace-cb","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","mranderson047.re-frame.v0v10v2.re-frame.trace/trace-cbs","cljs.core/dissoc","mranderson047.re-frame.v0v10v2.re-frame.trace/reset-tracing!","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","mranderson047.re-frame.v0v10v2.re-frame.interop/now","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","mranderson047.re-frame.v0v10v2.re-frame.trace/is-trace-enabled?","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","cljs.core/inc"],"sourcesContent":["(ns mranderson047.re-frame.v0v10v2.re-frame.trace\n  \"Tracing for mranderson047.re-frame.v0v10v2.re-frame.\n  Alpha quality, subject to change/break at any time.\"\n  #?(:cljs (:require-macros [net.cgrand.macrovich :as macros]\n                            [mranderson047.re-frame.v0v10v2.re-frame.trace :refer [finish-trace with-trace merge-trace!]]))\n  (:require [mranderson047.re-frame.v0v10v2.re-frame.interop :as interop]\n            #?(:clj [net.cgrand.macrovich :as macros])\n            [mranderson047.re-frame.v0v10v2.re-frame.loggers :refer [console]]))\n\n(def id (atom 0))\n(def ^:dynamic *current-trace* nil)\n\n(defn reset-tracing! []\n  (reset! id 0))\n\n#?(:cljs (goog-define trace-enabled? false)\n   :clj  (def ^boolean trace-enabled? false))\n\n(defn ^boolean is-trace-enabled?\n  \"See https://groups.google.com/d/msg/clojurescript/jk43kmYiMhA/IHglVr_TPdgJ for more details\"\n  []\n  trace-enabled?)\n\n(def trace-cbs (atom {}))\n\n(defn register-trace-cb\n  \"Registers a tracing callback function which will receive a collection of one or more traces.\n  Will replace an existing callback function if it shares the same key.\"\n  [key f]\n  (if trace-enabled?\n    (swap! trace-cbs assoc key f)\n    (console :warn \"Tracing is not enabled. Please set {\\\"re_frame.trace.trace_enabled_QMARK_\\\" true} in :closure-defines. See: https://github.com/Day8/re-frame-10x#installation.\")))\n\n(defn remove-trace-cb [key]\n  (swap! trace-cbs dissoc key)\n  nil)\n\n(defn next-id [] (swap! id inc))\n\n(defn start-trace [{:keys [operation op-type tags child-of]}]\n  {:id        (next-id)\n   :operation operation\n   :op-type   op-type\n   :tags      tags\n   :child-of  (or child-of (:id *current-trace*))\n   :start     (interop/now)})\n\n(macros/deftime\n  (defmacro finish-trace [trace]\n     `(when (is-trace-enabled?)\n        (let [end#      (interop/now)\n              duration# (- end# (:start ~trace))]\n          (doseq [[k# cb#] @trace-cbs]\n            (try (cb# [(assoc ~trace\n                              :duration duration#\n                              :end (interop/now))])\n                 #?(:clj (catch Exception e#\n                           (console :error \"Error thrown from trace cb\" k# \"while storing\" ~trace e#)))\n                 #?(:cljs (catch :default e#\n                            (console :error \"Error thrown from trace cb\" k# \"while storing\" ~trace e#))))))))\n\n (defmacro with-trace\n     \"Create a trace inside the scope of the with-trace macro\n\n          Common keys for trace-opts\n          :op-type - what kind of operation is this? e.g. :sub/create, :render.\n          :operation - identifier for the operation, for an subscription it would be the subscription keyword\n          tags - a map of arbitrary kv pairs\"\n     [{:keys [operation op-type tags child-of] :as trace-opts} & body]\n     `(if (is-trace-enabled?)\n        (binding [*current-trace* (start-trace ~trace-opts)]\n          (try ~@body\n               (finally (finish-trace *current-trace*))))\n        (do ~@body)))\n\n  (defmacro merge-trace! [m]\n     ;; Overwrite keys in tags, and all top level keys.\n     `(when (is-trace-enabled?)\n        (let [new-trace# (-> (update *current-trace* :tags merge (:tags ~m))\n                             (merge (dissoc ~m :tags)))]\n          (set! *current-trace* new-trace#))\n        nil)))\n"]}