{"version":3,"file":"zprint.focus.js","sources":["zprint/focus.cljc"],"mappings":"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","names":["new-next-nonws?","zprint.focus/next-ssv","ssv","index","moves","cljs.core/count","and__3911__auto__","or__3922__auto__","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","index-type","skip-to-right?","zprint.focus/down-ssv","nr","start","end","next-nonws?","cljs.core/first","idx","nwp","zprint.focus/right-ssv","cljs.core/next","n","cljs.core/not","zprint.focus/path-ssv","nwpath","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","ssv-next","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","non-ws-n","zprint.focus/type-ssv","zprint.focus/skip-whitespace-ssv","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","ssv-element","cljs.core/empty?","zprint.focus/range-ssv"],"sourcesContent":["(ns zprint.focus\n  (:require [clojure.string :as s]\n            [zprint.ansi :refer [color-str]]))\n\n;;\n;; # Find focus in a style-vec\n;;\n\n(defn type-ssv\n  \"What is this element in a str-style-vec?\"\n  [ssv-element]\n  (nth ssv-element 2 :whitespace))\n\n(defn skip-whitespace-ssv\n  \"Skip any whitespace in this ssv starting at n. Whitespace is :whitespace\n  and :indent\"\n  [ssv n]\n  #_(println \"skip-whitespace: n:\" n)\n  (loop [index n]\n    #_(println \"skip-whitespace: loop index:\" index)\n    (if (>= index (count ssv))\n      (dec index)\n      (if (not (or (= (type-ssv (nth ssv index)) :whitespace)\n                   (= (type-ssv (nth ssv index)) :indent)))\n        index\n        (recur (inc index))))))\n\n(defn down-ssv\n  \"Given a str-style-vec, move into a collection at element n.\"\n  [ssv n]\n  (let [non-ws-n (skip-whitespace-ssv ssv n)]\n    (when (= (type-ssv (nth ssv non-ws-n)) :left) (inc non-ws-n))))\n\n(defn next-ssv\n  \"Given a str-style-vec, move to the next element beyond this\n  one.  This will skip over entire collections, if there are any.\n  It will also ignore :whitespace elements.\"\n  [ssv n]\n  #_(println \"next-ssv: n:\" n \"count ssv:\" (count ssv))\n  (loop [index n\n         skip-to-right? nil\n         next-nonws? nil]\n    #_(println \"next-ssv: loop index:\" index)\n    (if (>= index (count ssv))\n      nil\n      (let [index-type (type-ssv (nth ssv index))\n            new-next-nonws? (and (or (not skip-to-right?) (= index-type :right))\n                                 (not= index-type :left)\n                                 (not= index-type :whitespace)\n                                 (not= index-type :indent))]\n        #_(println \"next-ssv: index:\" index\n                   \"skip-to-right?\" skip-to-right?\n                   \"next-nonws?\" next-nonws?\n                   \"index-type:\" index-type\n                   \"new-next-nonws?\" new-next-nonws?)\n        (if next-nonws?\n          index\n          (recur (if (and (= index-type :left) skip-to-right?)\n                   (next-ssv ssv index)\n                   (inc index))\n                 (and (or (= index-type :left) skip-to-right?)\n                      (not= index-type :right))\n                 new-next-nonws?))))))\n\n(defn right-ssv\n  \"Given a str-style-vec, move right nr elements.\"\n  [nr ssv n]\n  #_(println \"right-ssv: nr:\" nr \"n:\" n)\n  (loop [index n\n         moves nr]\n    #_(println \"right-ssv: loop index:\" index \"moves:\" moves)\n    (when index\n      (if (zero? moves)\n        (when index (skip-whitespace-ssv ssv index))\n        (recur (next-ssv ssv index) (dec moves))))))\n\n(defn path-ssv\n  \"Given a non-whitespace path from a zipper, find that same\n  collection or element in a str-style-vec.\"\n  [nwpath ssv]\n  (loop [idx 0\n         nwp nwpath]\n    (when idx\n      (if (empty? nwp)\n        idx\n        (recur (right-ssv (first nwp) ssv (down-ssv ssv idx)) (next nwp))))))\n\n(defn range-ssv\n  \"Use a non-whitespace path from a zipper, and find that\n  same collection or element in a str-style-vec, and return\n  a vector of the start and end of that collection or element.\n  Depends on next-ssv returning one past the end of its input.\"\n  [ssv nwpath]\n  #_(def rssv ssv)\n  #_(prn \"range-ssv: nwpath:\" nwpath \"ssv:\\n\" ssv)\n  (let [start (path-ssv nwpath ssv)\n        #_(println \"range-ssv: start:\" start \"nwpath:\" nwpath)\n        start (skip-whitespace-ssv ssv start)\n        ssv-next (next-ssv ssv start)\n        end (if (and ssv-next (not= start 0)) (dec ssv-next) (dec (count ssv)))]\n    #_(println \"range-ssv:\" [start end])\n    [start end]))"]}