{"version":3,"file":"cljs.analyzer.api.js","sources":["cljs/analyzer/api.cljc"],"mappings":"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","names":["cljs.analyzer.api/empty-state","cljs.env.default_compiler_env.cljs$core$IFn$_invoke$arity$0","cljs.analyzer.api/empty-env","cljs.analyzer/empty-env","cljs.analyzer.api/warning-enabled?","warning-type","cljs.analyzer/*cljs-warnings*","cljs.analyzer.api/default-warning-handler","env","extra","cljs.analyzer/default-warning-handler","var_args","G__27814","cljs.analyzer.api/get-options","js/Error","cljs.analyzer.api.get_options.cljs$core$IFn$_invoke$arity$1","cljs.env/*compiler*","state","cljs.core/deref","cljs.core.get.cljs$core$IFn$_invoke$arity$2","G__27817","cljs.analyzer.api/get-js-index","cljs.analyzer.api/resolve","sym","cljs.core/map?","cljs.core/Symbol","e27819","cljs.analyzer.resolve_var.cljs$core$IFn$_invoke$arity$3","cljs.analyzer/confirm-var-exists-throw","e","cljs.analyzer/resolve-macro-var","G__27821","cljs.analyzer.api/all-ns","cljs.analyzer.api.all_ns.cljs$core$IFn$_invoke$arity$1","cljs.core/keys","G__27824","cljs.analyzer.api/find-ns","cljs.analyzer.api.find_ns.cljs$core$IFn$_invoke$arity$2","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","G__27827","cljs.analyzer.api/ns-interns","ns","cljs.analyzer.api.ns_interns.cljs$core$IFn$_invoke$arity$2","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","G__27830","cljs.analyzer.api/ns-publics","cljs.analyzer.api.ns_publics.cljs$core$IFn$_invoke$arity$2","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","p__27831","vec__27832","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","k","v","cljs.core.into.cljs$core$IFn$_invoke$arity$2","G__27837","cljs.analyzer.api/ns-resolve","cljs.analyzer.api.ns_resolve.cljs$core$IFn$_invoke$arity$3","G__27840","cljs.analyzer.api/remove-ns","cljs.analyzer.api.remove_ns.cljs$core$IFn$_invoke$arity$2","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic","cljs.core/update-in","cljs.core/dissoc"],"sourcesContent":[";   Copyright (c) Rich Hickey. All rights reserved.\n;   The use and distribution terms for this software are covered by the\n;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;   which can be found in the file epl-v10.html at the root of this distribution.\n;   By using this software in any fashion, you are agreeing to be bound by\n;   the terms of this license.\n;   You must not remove this notice, or any other, from this software.\n\n(ns cljs.analyzer.api\n  \"This is intended to be a stable api for those who need programmatic access\n  to the analyzer.\"\n  (:refer-clojure :exclude [all-ns ns-interns ns-resolve resolve find-ns\n                            ns-publics remove-ns])\n  (:require [cljs.env :as env]\n            [cljs.analyzer :as ana]))\n\n;; =============================================================================\n;; Useful Utilities\n\n(defn empty-state\n  \"Creates an empty compilation state Atom<Map>.\"\n  []\n  (env/default-compiler-env))\n\n(defmacro with-state\n  \"Run the body with the given compilation state Atom<Map>.\"\n  [state body]\n  `(env/with-compiler-env ~state\n     ~@body))\n\n(defn empty-env\n  \"Creates an empty analysis environment.\"\n  []\n  (ana/empty-env))\n\n(defmacro no-warn\n  \"Disable analyzer warnings for any analysis executed in body.\"\n  [& body]\n  (let [no-warnings (zipmap (keys ana/*cljs-warnings*) (repeat false))]\n    `(binding [ana/*cljs-warnings* ~no-warnings]\n       ~@body)))\n\n(defn warning-enabled?\n  \"Test if the given warning-type is enabled.\"\n  [warning-type]\n  (ana/*cljs-warnings* warning-type))\n\n(defn default-warning-handler\n  \"The default warning handler.\n\n   Outputs the warning messages to *err*.\"\n  [warning-type env extra]\n  (ana/default-warning-handler warning-type env extra))\n\n(defn get-options\n  \"Return the compiler options from compiler state.\"\n  ([] (get-options env/*compiler*))\n  ([state]\n   (get @state :options)))\n\n(defn get-js-index\n  \"Return the currently computed Google Closure js dependency index from the\n  compiler state.\"\n  ([] (get-options env/*compiler*))\n  ([state]\n   (get @state :js-dependency-index)))\n\n#?(:clj\n   (defn analyze\n     \"Given an environment, a map containing {:locals (mapping of names to bindings), :context\n     (one of :statement, :expr, :return), :ns (a symbol naming the\n     compilation ns)}, and form, returns an expression object (a map\n     containing at least :form, :op and :env keys). If expr has any (immediately)\n     nested exprs, must have :children [exprs...] entry. This will\n     facilitate code walking without knowing the details of the op set.\"\n     ([env form] (analyze env form nil))\n     ([env form name] (analyze env form name nil))\n     ([env form name opts]\n      (analyze\n        (if-not (nil? env/*compiler*)\n          env/*compiler*\n          (env/default-compiler-env opts))\n        env form name opts))\n     ([state env form name opts]\n      (env/with-compiler-env state\n        (binding [ana/*cljs-warning-handlers* (:warning-handlers opts ana/*cljs-warning-handlers*)]\n          (ana/analyze env form name opts))))))\n\n#?(:clj\n   (defn forms-seq\n     \"Seq of Clojure/ClojureScript forms from rdr, a java.io.Reader. Optionally\n     accepts a filename argument which will be used in any emitted errors.\"\n     ([rdr] (ana/forms-seq* rdr nil))\n     ([rdr filename] (ana/forms-seq* rdr filename))))\n\n#?(:clj\n   (defn parse-ns\n     \"Helper for parsing only the essential namespace information from a\n      ClojureScript source file and returning a cljs.closure/IJavaScript compatible\n      map _not_ a namespace AST node.\n   \n      By default does not load macros or perform any analysis of dependencies. If\n      opts parameter provided :analyze-deps and :load-macros keys their values will\n      be used for *analyze-deps* and *load-macros* bindings respectively. This\n      function does _not_ side-effect the ambient compilation environment unless\n      requested via opts where :restore is false.\"\n     ([src] (parse-ns src nil nil))\n     ([src opts] (parse-ns src nil opts))\n     ([src dest opts]\n      (parse-ns\n        (if-not (nil? env/*compiler*)\n          env/*compiler*\n          (env/default-compiler-env opts))\n        src dest opts))\n     ([state src dest opts]\n      (env/with-compiler-env state\n        (binding [ana/*cljs-warning-handlers* (:warning-handlers opts ana/*cljs-warning-handlers*)]\n          (ana/parse-ns src dest opts))))))\n#?(:clj\n   (defn analyze-file\n     \"Given a java.io.File, java.net.URL or a string identifying a resource on the\n      classpath attempt to analyze it.\n   \n      This function side-effects the ambient compilation environment\n      `cljs.env/*compiler*` to aggregate analysis information. opts argument is\n      compiler options, if :cache-analysis true will cache analysis to\n      \\\":output-dir/some/ns/foo.cljs.cache.edn\\\". This function does not return a\n      meaningful value.\"\n     ([f] (analyze-file f nil))\n     ([f opts]\n      (analyze-file\n        (if-not (nil? env/*compiler*)\n          env/*compiler*\n          (env/default-compiler-env opts))\n        f opts))\n     ([state f opts]\n      (env/with-compiler-env state\n        (binding [ana/*cljs-warning-handlers* (:warning-handlers opts ana/*cljs-warning-handlers*)]\n          (ana/analyze-file f opts))))))\n\n;; =============================================================================\n;; Main API\n\n(defn resolve\n  \"Given an analysis environment resolve a var. Analogous to\n   clojure.core/resolve\"\n  [env sym]\n  {:pre [(map? env) (symbol? sym)]}\n  (try\n    (ana/resolve-var env sym\n      (ana/confirm-var-exists-throw))\n    (catch #?(:clj Exception :cljs :default) e\n      (ana/resolve-macro-var env sym))))\n\n(defn all-ns\n  \"Return all namespaces. Analagous to clojure.core/all-ns but\n  returns symbols identifying namespaces not Namespace instances.\"\n  ([]\n   (all-ns env/*compiler*))\n  ([state]\n   (keys (get @state ::ana/namespaces))))\n\n(defn find-ns\n  \"Given a namespace return the corresponding namespace analysis map. Analagous\n  to clojure.core/find-ns.\"\n  ([sym]\n   (find-ns env/*compiler* sym))\n  ([state sym]\n   {:pre [(symbol? sym)]}\n   (get-in @state [::ana/namespaces sym])))\n\n(defn ns-interns\n  \"Given a namespace return all the var analysis maps. Analagous to\n  clojure.core/ns-interns but returns var analysis maps not vars.\"\n  ([ns]\n   (ns-interns env/*compiler* ns))\n  ([state ns]\n   {:pre [(symbol? ns)]}\n   (merge\n     (get-in @state [::ana/namespaces ns :macros])\n     (get-in @state [::ana/namespaces ns :defs]))))\n\n(defn ns-publics\n  \"Given a namespace return all the public var analysis maps. Analagous to\n  clojure.core/ns-publics but returns var analysis maps not vars.\"\n  ([ns]\n   (ns-publics env/*compiler* ns))\n  ([state ns]\n   {:pre [(symbol? ns)]}\n   (->> (merge\n          (get-in @state [::ana/namespaces ns :macros])\n          (get-in @state [::ana/namespaces ns :defs]))\n        (remove (fn [[k v]] (:private v)))\n        (into {}))))\n\n(defn ns-resolve\n  \"Given a namespace and a symbol return the corresponding var analysis map.\n  Analagous to clojure.core/ns-resolve but returns var analysis map not Var.\"\n  ([ns sym]\n   (ns-resolve env/*compiler* ns sym))\n  ([state ns sym]\n   {:pre [(symbol? ns) (symbol? sym)]}\n   (get-in @state [::ana/namespaces ns :defs sym])))\n\n(defn remove-ns\n  \"Removes the namespace named by the symbol.\"\n  ([ns]\n   (remove-ns env/*compiler* ns))\n  ([state ns]\n   {:pre [(symbol? ns)]}\n   (swap! state update-in [::ana/namespaces] dissoc ns)))\n\n(defmacro in-cljs-user\n  \"Binds cljs.analyzer/*cljs-ns* to 'cljs.user and uses the given compilation\n  environment atom and runs body.\"\n  [env & body]\n  `(binding [cljs.analyzer/*cljs-ns* 'cljs.user]\n     (cljs.env/with-compiler-env ~env\n       ~@body)))\n"]}