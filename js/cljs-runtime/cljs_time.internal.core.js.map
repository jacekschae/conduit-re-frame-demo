{"version":3,"file":"cljs_time.internal.core.js","sources":["cljs_time/internal/core.cljs"],"mappings":"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","names":["and__3911__auto__","january","week-number","year","d","minutes?","G__41629","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","minutes","day-of-week?","day-of-week","cljs.core.update_in.cljs$core$IFn$_invoke$arity$3","scale-fn","args","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/=","p1__41615#","cljs.core.map.cljs$core$IFn$_invoke$arity$2","millis?","millis","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2","hours?","hours","field","cljs.core/mod","y","scalar","cljs.core/every?","cljs.core/true?","x","years","months","days","seconds","p1__41637#","cljs_time.internal.core._EQ_.cljs$core$IFn$_invoke$arity$variadic","coll","cljs.core/first","p2__41636#","cljs.core.keep_indexed.cljs$core$IFn$_invoke$arity$2","goog.date/getWeekNumber","month","date","n","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","cljs.core/nil?","zeros","cljs-time.internal.core/abbreviate","s","seconds?","weekyear-week?","weekyear-week","cljs-time.internal.core/multiplied-by","period","cljs-time.internal.core/corrected-dim","cljs-time.internal.core/get-week-year","G__41620","cljs-time.internal.core/days-in-month","weekyear","cljs.core/not","or__3922__auto__","cljs-time.internal.core/leap-year?","months?","december","var_args","G__41652","cljs-time.internal.core/zero-pad","js/Error","cljs-time.internal.core/year-corrected-dim","cljs-time.internal.core/days","G__41621","cljs-time.internal.core/index-of","p1__41614#","goog/date.Date","days?","cljs.core/Keyword","cljs.core/Symbol","dim","cljs.core.subs.cljs$core$IFn$_invoke$arity$3","fmt","args__4502__auto__","len__4499__auto__","i__4500__auto__","argseq__4503__auto__","cljs.core/IndexedSeq","cljs-time.internal.core/format","seq41638","G__41639","cljs.core/next","self__4486__auto__","p__41624","map__41625","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","cljs-time.internal.core/valid-date?","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","goog.string/format","cljs.core.take.cljs$core$IFn$_invoke$arity$2","cljs.core/count","cljs.core.repeat.cljs$core$IFn$_invoke$arity$1","clojure.string.join.cljs$core$IFn$_invoke$arity$1","cljs-time.internal.core/=","seq41616","self__4487__auto__","cljs.core/seq","cljs-time.internal.core/months"],"sourcesContent":["(ns cljs-time.internal.core\n  (:refer-clojure :exclude [=])\n  (:require\n   [clojure.string :as string]\n   [goog.string :as gstring]\n   [goog.string.format]\n   [goog.date]))\n\n(def months\n  [\"January\" \"February\" \"March\" \"April\" \"May\" \"June\" \"July\" \"August\"\n   \"September\" \"October\" \"November\" \"December\"])\n\n(def days\n  [\"Sunday\" \"Monday\" \"Tuesday\" \"Wednesday\" \"Thursday\" \"Friday\" \"Saturday\"])\n\n(defn abbreviate [n s]\n  (subs s 0 n))\n\n(defn = [& args]\n  (cond (every? #(instance? goog.date.Date %) args)\n        (apply cljs.core/= (map #(.getTime %) args))\n        :default (apply cljs.core/= args)))\n\n(defn leap-year? [y]\n  (cond (zero? (mod y 400)) true\n        (zero? (mod y 100)) false\n        (zero? (mod y 4)) true\n        :else false))\n\n(def days-in-month [31 28 31 30 31 30 31 31 30 31 30 31])\n\n(defn corrected-dim [month]\n  (days-in-month (if (= month 1) 11 (dec month))))\n\n(defn year-corrected-dim [year month]\n  (cond-> (corrected-dim month)\n    (and (leap-year? year) (= month 2)) inc))\n\n(defn valid-date?\n  [{:keys [years months days hours minutes seconds millis\n           weekyear weekyear-week day-of-week] :as d}]\n  (let [months?  (when months (<= 1 months 12))\n        dim      (if years\n                   (and months months? (year-corrected-dim years months))\n                   (and months months? (corrected-dim months)))\n        days?    (when days (if dim (<= 1 days dim) (<= 1 days 31)))\n        hours?   (when hours (<= 0 hours 23))\n        minutes? (when minutes (<= 0 minutes 59))\n        seconds? (when seconds (<= 0 seconds 60))\n        millis?  (when millis (<= 0 millis 999))\n        weekyear-week? (when weekyear-week (<= 1 weekyear-week 53))\n        day-of-week? (when day-of-week (<= 1 day-of-week 7))]\n    (if (->> [months? days? hours? minutes? seconds? millis? \n              weekyear-week? day-of-week?]\n             (remove nil?)\n             (every? true?))\n      (if (not (and (or years months days)\n                    (or weekyear weekyear-week day-of-week)))\n        d\n        (throw \n         (ex-info \"Mixing year, month, day and week-year week-number fields\"\n                  {:type :invalid-date :date d\n                   :errors {}})))\n      (throw\n       (ex-info \"Date is not valid\"\n                {:type :invalid-date :date d\n                 :errors (cond-> {}\n                           (false? months?)  (assoc :months months)\n                           (false? days?)    (assoc :days days)\n                           (false? hours?)   (assoc :hours hours)\n                           (false? minutes?) (assoc :minutes minutes)\n                           (false? seconds?) (assoc :seconds seconds)\n                           (false? millis?)  (assoc :millis millis)\n                           (false? weekyear-week?) (assoc :weekyear-week weekyear-week)\n                           (false? day-of-week?) (assoc :day-of-week day-of-week))})))))\n\n(defn index-of [coll x]\n  (first (keep-indexed #(when (= %2 x) %1) coll)))\n\n(defn format\n  \"Formats a string using goog.string.format.\"\n  [fmt & args]\n  (let [args (map (fn [x]\n                    (if (or (keyword? x) (symbol? x))\n                      (str x)\n                      x))\n                  args)]\n    (apply gstring/format fmt args)))\n\n(defn zero-pad\n  \"Remove the need to pull in gstring/format code in advanced compilation\"\n  ([n] (if (<= 0 n 9) (str \"0\" n) (str n)))\n  ([n zeros]\n   ; No need to handle negative numbers\n   (if (< zeros 1)\n     (str n)\n     (str (string/join (take (- zeros (count (str n))) (repeat \"0\")))\n          n))))\n\n(defn multiplied-by [period scalar]\n  (letfn [(scale-fn [field]\n            (when field\n              (* field scalar)))]\n    (-> period\n        (update-in [:millis] scale-fn)\n        (update-in [:seconds] scale-fn)\n        (update-in [:minutes] scale-fn)\n        (update-in [:hours] scale-fn)\n        (update-in [:days] scale-fn)\n        (update-in [:weeks] scale-fn)\n        (update-in [:months] scale-fn)\n        (update-in [:years] scale-fn))))\n\n(defn get-week-year\n  \"Counterpart ot goog.date/getWeekNumber. \n  month 0 is jan per goog.date\"\n  [year month date]\n  (let [january (= month 0)\n        december (= month 11)\n        week-number (goog.date/getWeekNumber year month date)]\n    (cond \n      (and january (>= week-number 52)) (dec year)\n      (and december (= week-number 1))  (inc year)\n      :else year)))\n"]}