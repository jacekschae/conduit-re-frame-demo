{"version":3,"file":"mranderson047.re_frame.v0v10v2.re_frame.interceptor.js","sources":["mranderson047/re_frame/v0v10v2/re_frame/interceptor.cljc"],"mappings":"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","names":["event","interceptors","temp__5455__auto__","f","cljs.core.get.cljs$core$IFn$_invoke$arity$2","interceptor","direction","mranderson047.re-frame.v0v10v2.re-frame.interceptor/invoke-interceptors","mranderson047.re-frame.v0v10v2.re-frame.interceptor/change-direction","mranderson047.re-frame.v0v10v2.re-frame.interceptor/mandatory-interceptor-keys","m","cljs.core/keys","cljs.core/set","cljs.core.apply.cljs$core$IFn$_invoke$arity$5","cljs.core/update-in","context","key","args","before","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","cljs.core/pop","queue","value","var_args","G__27169","mranderson047.re-frame.v0v10v2.re-frame.interceptor/context","js/Error","mranderson047.re-frame.v0v10v2.re-frame.interceptor/execute","cljs.core/assoc-in","mranderson047.re-frame.v0v10v2.re-frame.interceptor/enqueue","mranderson047.re-frame.v0v10v2.re-frame.interceptor/invoke-interceptor-fn","args__4502__auto__","len__4499__auto__","i__4500__auto__","argseq__4503__auto__","cljs.core/IndexedSeq","mranderson047.re-frame.v0v10v2.re-frame.interceptor/->interceptor","p__27070","map__27071","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","seq27067","self__4487__auto__","cljs.core/seq","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","cljs.core.get_in.cljs$core$IFn$_invoke$arity$3","not-found","cljs.core/peek","event-v","mranderson047.re-frame.v0v10v2.re-frame.interceptor/update-coeffect","seq27136","G__27137","cljs.core/first","cljs.core/next","G__27138","G__27139","self__4486__auto__","mranderson047.re_frame.v0v10v2.re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic","unknown-keys","stack","G__27091","mranderson047.re-frame.v0v10v2.re-frame.interceptor/get-effect","G__27107","mranderson047.re-frame.v0v10v2.re-frame.interceptor/get-coeffect","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","after","db","id","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","or__3922__auto__","mranderson047.re-frame.v0v10v2.re-frame.interceptor/assoc-coeffect","cljs.core/empty?","clojure.set.difference.cljs$core$IFn$_invoke$arity$2","cljs.core/map?","cljs.core.fnil.cljs$core$IFn$_invoke$arity$2","cljs.core/into","mranderson047.re-frame.v0v10v2.re-frame.interop/empty-queue","mranderson047.re-frame.v0v10v2.re-frame.interceptor/interceptor?","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","mranderson047.re-frame.v0v10v2.re-frame.interceptor/assoc-effect","mranderson047.re_frame.v0v10v2.re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$2","mranderson047.re-frame.v0v10v2.re-frame.interop/debug-enabled?","cljs.core.update.cljs$core$IFn$_invoke$arity$4"],"sourcesContent":["(ns mranderson047.re-frame.v0v10v2.re-frame.interceptor\n  (:require\n    [mranderson047.re-frame.v0v10v2.re-frame.loggers :refer [console]]\n    [mranderson047.re-frame.v0v10v2.re-frame.interop :refer [empty-queue debug-enabled?]]\n    [clojure.set :as set]))\n\n\n(def mandatory-interceptor-keys #{:id :after :before})\n\n(defn interceptor?\n  [m]\n  (and (map? m)\n       (= mandatory-interceptor-keys (-> m keys set))))\n\n\n(defn ->interceptor\n  \"Create an interceptor from named arguments\"\n  [& {:as m :keys [id before after]}]\n  (when debug-enabled?\n    (if-let [unknown-keys (seq (set/difference\n                                (-> m keys set)\n                                mandatory-interceptor-keys))]\n      (console :error \"re-frame: ->interceptor \" m \" has unknown keys:\" unknown-keys)))\n  {:id     (or id :unnamed)\n   :before before\n   :after  after })\n\n;; -- Effect Helpers  -----------------------------------------------------------------------------\n\n(defn get-effect\n  ([context]\n   (:effects context))\n  ([context key]\n   (get-in context [:effects key]))\n  ([context key not-found]\n   (get-in context [:effects key] not-found)))\n\n\n(defn assoc-effect\n  [context key value]\n  (assoc-in context [:effects key] value))\n\n;; -- CoEffect Helpers  ---------------------------------------------------------------------------\n\n(defn get-coeffect\n  ([context]\n   (:coeffects context))\n  ([context key]\n   (get-in context [:coeffects key]))\n  ([context key not-found]\n   (get-in context [:coeffects key] not-found)))\n\n(defn assoc-coeffect\n  [context key value]\n  (assoc-in context [:coeffects key] value))\n\n(defn update-coeffect\n  [context key f & args]\n  (apply update-in context [:coeffects key] f args))\n\n;; -- Execute Interceptor Chain  ------------------------------------------------------------------\n\n\n(defn- invoke-interceptor-fn\n  [context interceptor direction]\n  (if-let [f (get interceptor direction)]\n    (f context)\n    context))\n\n\n(defn- invoke-interceptors\n  \"Loop over all interceptors, calling `direction` function on each,\n  threading the value of `context` through every call.\n\n  `direction` is one of `:before` or `:after`.\n\n  Each iteration, the next interceptor to process is obtained from\n  context's `:queue`. After they are processed, interceptors are popped\n  from `:queue` and added to `:stack`.\n\n  After sufficient iteration, `:queue` will be empty, and `:stack` will\n  contain all interceptors processed.\n\n  Returns updated `context`. Ie. the `context` which has been threaded\n  through all interceptor functions.\n\n  Generally speaking, an interceptor's `:before` function will (if present)\n  add to a `context's` `:coeffects`, while it's `:after` function\n  will modify the `context`'s `:effects`.  Very approximately.\n\n  But because all interceptor functions are given `context`, and can\n  return a modified version of it, the way is clear for an interceptor\n  to introspect the stack or queue, or even modify the queue\n  (add new interceptors via `enqueue`?). This is a very fluid arrangement.\"\n  ([context direction]\n   (loop [context context]\n     (let [queue (:queue context)]        ;; future interceptors\n       (if (empty? queue)\n         context\n         (let [interceptor (peek queue)   ;; next interceptor to call\n               stack (:stack context)]    ;; already completed interceptors\n           (recur (-> context\n                      (assoc :queue (pop queue)\n                             :stack (conj stack interceptor))\n                      (invoke-interceptor-fn interceptor direction)))))))))\n\n\n(defn enqueue\n  \"Add a collection of `interceptors` to the end of `context's` execution `:queue`.\n  Returns the updated `context`.\n\n  In an advanced case, this function could allow an interceptor to add new\n  interceptors to the `:queue` of a context.\"\n  [context interceptors]\n  (update context :queue\n          (fnil into empty-queue)\n          interceptors))\n\n\n(defn- context\n  \"Create a fresh context\"\n  ([event interceptors]\n  (-> {}\n      (assoc-coeffect :event event)\n      (enqueue interceptors)))\n  ([event interceptors db]      ;; only used in tests, probably a hack, remove ?  XXX\n   (-> (context event interceptors)\n       (assoc-coeffect :db db))))\n\n\n(defn- change-direction\n  \"Called on completion of `:before` processing, this function prepares/modifies\n   `context` for the backwards sweep of processing in which an interceptor\n   chain's `:after` fns are called.\n\n  At this point in processing, the `:queue` is empty and `:stack` holds all\n  the previously run interceptors. So this function enables the backwards walk\n  by priming `:queue` with what's currently in `:stack`\"\n  [context]\n  (-> context\n      (dissoc :queue)\n      (enqueue (:stack context))))\n\n\n(defn execute\n  \"Executes the given chain (coll) of interceptors.\n\n   Each interceptor has this form:\n       {:before  (fn [context] ...)     ;; returns possibly modified context\n        :after   (fn [context] ...)}    ;; `identity` would be a noop\n\n   Walks the queue of iterceptors from beginning to end, calling the\n   `:before` fn on each, then reverse direction and walk backwards,\n   calling the `:after` fn on each.\n\n   The last interceptor in the chain presumably wraps an event\n   handler fn. So the overall goal of the process is to \\\"handle\n   the given event\\\".\n\n   Thread a `context` through all calls. `context` has this form:\n\n     {:coeffects {:event [:a-query-id :some-param]\n                  :db    <original contents of app-db>}\n      :effects   {:db    <new value for app-db>\n                  :dispatch  [:an-event-id :param1]}\n      :queue     <a collection of further interceptors>\n      :stack     <a collection of interceptors already walked>}\n\n   `context` has `:coeffects` and `:effects` which, if this was a web\n   server, would be somewhat anologous to `request` and `response`\n   respectively.\n\n   `coeffects` will contain data like `event` and the initial\n   state of `db` -  the inputs required by the event handler\n   (sitting presumably on the end of the chain), while handler-returned\n   side effects are put into `:effects` including, but not limited to,\n   new values for `db`.\n\n   The first few interceptors in a chain will likely have `:before`\n   functions which \\\"prime\\\" the `context` by adding the event, and\n   the current state of app-db into `:coeffects`. But interceptors can\n   add whatever they want to `:coeffects` - perhaps the event handler needs\n   some information from localstore, or a random number, or access to\n   a DataScript connection.\n\n   Equally, some interceptors in the chain will have `:after` fn\n   which can process the side effects accumulated into `:effects`\n   including but, not limited to, updates to app-db.\n\n   Through both stages (before and after), `context` contains a `:queue`\n   of interceptors yet to be processed, and a `:stack` of interceptors\n   already done.  In advanced cases, these values can be modified by the\n   functions through which the context is threaded.\"\n  [event-v interceptors]\n  (-> (context event-v interceptors)\n      (invoke-interceptors :before)\n      change-direction\n      (invoke-interceptors :after)))\n"]}